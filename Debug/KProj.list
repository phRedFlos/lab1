
KProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bacc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800bc60  0800bc60  0000cc60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3a0  0800c3a0  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3a0  0800c3a0  0000d3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3a8  0800c3a8  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3a8  0800c3a8  0000d3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3ac  0800c3ac  0000d3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c3b0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bc0  200001d8  0800c588  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005d98  0800c588  0000ed98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034f0d  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007518  00000000  00000000  00043115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  0004a630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000290a  00000000  00000000  0004c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002682d  00000000  00000000  0004ecd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046a87  00000000  00000000  000754ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7c35  00000000  00000000  000bbf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183bbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a0c  00000000  00000000  00183c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0001711c  00000000  00000000  0018a60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001a1728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc44 	.word	0x0800bc44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bc44 	.word	0x0800bc44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <vApplicationGetIdleTaskMemory+0x14>)
 8000fe6:	6003      	str	r3, [r0, #0]
{
 8000fe8:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fea:	2380      	movs	r3, #128	@ 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fec:	4c03      	ldr	r4, [pc, #12]	@ (8000ffc <vApplicationGetIdleTaskMemory+0x18>)
 8000fee:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ff4:	6013      	str	r3, [r2, #0]
}
 8000ff6:	4770      	bx	lr
 8000ff8:	200003f4 	.word	0x200003f4
 8000ffc:	200001f4 	.word	0x200001f4

08001000 <Instruction_Write>:
{
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
}

void Instruction_Write(lcd1602_HandleTypeDef *lcd1602_Handle, const uint8_t *instruction)
{
 8001000:	b570      	push	{r4, r5, r6, lr}
	if (lcd1602_Handle->ctrlPins.RS_Pin != status)
 8001002:	79c3      	ldrb	r3, [r0, #7]
{
 8001004:	b084      	sub	sp, #16
 8001006:	4604      	mov	r4, r0
 8001008:	460d      	mov	r5, r1
	if (lcd1602_Handle->ctrlPins.RS_Pin != status)
 800100a:	b1b3      	cbz	r3, 800103a <Instruction_Write+0x3a>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 800100c:	7a41      	ldrb	r1, [r0, #9]
 800100e:	7a03      	ldrb	r3, [r0, #8]
 8001010:	7a82      	ldrb	r2, [r0, #10]
 8001012:	0089      	lsls	r1, r1, #2
 8001014:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
 8001018:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800101c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001020:	9300      	str	r3, [sp, #0]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8001022:	f88d 100f 	strb.w	r1, [sp, #15]
		lcd1602_Handle->ctrlPins.RS_Pin = status;
 8001026:	2100      	movs	r1, #0
 8001028:	71c1      	strb	r1, [r0, #7]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800102a:	2301      	movs	r3, #1
 800102c:	7901      	ldrb	r1, [r0, #4]
 800102e:	6800      	ldr	r0, [r0, #0]
 8001030:	f10d 020f 	add.w	r2, sp, #15
 8001034:	f001 face 	bl	80025d4 <HAL_I2C_Master_Transmit>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001038:	79e3      	ldrb	r3, [r4, #7]
	if (lcd1602_Handle->ctrlPins.RW_Pin != status)
 800103a:	7a21      	ldrb	r1, [r4, #8]
 800103c:	b1a9      	cbz	r1, 800106a <Instruction_Write+0x6a>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 800103e:	7aa1      	ldrb	r1, [r4, #10]
 8001040:	7a62      	ldrb	r2, [r4, #9]
 8001042:	00c9      	lsls	r1, r1, #3
 8001044:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
 8001048:	4319      	orrs	r1, r3
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800104a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800104e:	9200      	str	r2, [sp, #0]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8001050:	f88d 100f 	strb.w	r1, [sp, #15]
		lcd1602_Handle->ctrlPins.RW_Pin = status;
 8001054:	2100      	movs	r1, #0
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001056:	2301      	movs	r3, #1
		lcd1602_Handle->ctrlPins.RW_Pin = status;
 8001058:	7221      	strb	r1, [r4, #8]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800105a:	6820      	ldr	r0, [r4, #0]
 800105c:	7921      	ldrb	r1, [r4, #4]
 800105e:	f10d 020f 	add.w	r2, sp, #15
 8001062:	f001 fab7 	bl	80025d4 <HAL_I2C_Master_Transmit>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001066:	79e3      	ldrb	r3, [r4, #7]
 8001068:	7a21      	ldrb	r1, [r4, #8]
	if (lcd1602_Handle->ctrlPins.E_Pin != status)
 800106a:	7a66      	ldrb	r6, [r4, #9]
 800106c:	2e01      	cmp	r6, #1
 800106e:	d016      	beq.n	800109e <Instruction_Write+0x9e>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001070:	7aa2      	ldrb	r2, [r4, #10]
 8001072:	00d2      	lsls	r2, r2, #3
 8001074:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001078:	4313      	orrs	r3, r2
 800107a:	f043 0304 	orr.w	r3, r3, #4
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800107e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001082:	9200      	str	r2, [sp, #0]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8001084:	f88d 300f 	strb.w	r3, [sp, #15]
		lcd1602_Handle->ctrlPins.E_Pin = status;
 8001088:	2301      	movs	r3, #1
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800108a:	7921      	ldrb	r1, [r4, #4]
		lcd1602_Handle->ctrlPins.E_Pin = status;
 800108c:	7263      	strb	r3, [r4, #9]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800108e:	6820      	ldr	r0, [r4, #0]
 8001090:	f10d 020f 	add.w	r2, sp, #15
 8001094:	f001 fa9e 	bl	80025d4 <HAL_I2C_Master_Transmit>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001098:	79e3      	ldrb	r3, [r4, #7]
 800109a:	7a21      	ldrb	r1, [r4, #8]
 800109c:	7a66      	ldrb	r6, [r4, #9]
 800109e:	7aa2      	ldrb	r2, [r4, #10]
	uint8_t ctrlPinsAndInstruction;
	RS_Pin(lcd1602_Handle, RESET);
	RW_Pin(lcd1602_Handle, RESET);
	E_Pin(lcd1602_Handle, SET);
	MODIFY_REG(ctrlPinsAndInstruction, 0xF, CtrlPinsRetrieve(lcd1602_Handle));
	MODIFY_REG(ctrlPinsAndInstruction, 0xF0, (*instruction) & 0xF0);
 80010a0:	7828      	ldrb	r0, [r5, #0]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80010a2:	ea43 02c2 	orr.w	r2, r3, r2, lsl #3
 80010a6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80010aa:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
	MODIFY_REG(ctrlPinsAndInstruction, 0xF0, (*instruction) & 0xF0);
 80010ae:	f020 000f 	bic.w	r0, r0, #15
 80010b2:	f002 020f 	and.w	r2, r2, #15
 80010b6:	4302      	orrs	r2, r0
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPinsAndInstruction, sizeof(ctrlPinsAndInstruction), I2C_TIMEOUT);
 80010b8:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 80010bc:	7921      	ldrb	r1, [r4, #4]
 80010be:	6820      	ldr	r0, [r4, #0]
	MODIFY_REG(ctrlPinsAndInstruction, 0xF0, (*instruction) & 0xF0);
 80010c0:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPinsAndInstruction, sizeof(ctrlPinsAndInstruction), I2C_TIMEOUT);
 80010c4:	2301      	movs	r3, #1
 80010c6:	9600      	str	r6, [sp, #0]
 80010c8:	f10d 020e 	add.w	r2, sp, #14
 80010cc:	f001 fa82 	bl	80025d4 <HAL_I2C_Master_Transmit>
	if (lcd1602_Handle->ctrlPins.E_Pin != status)
 80010d0:	7a63      	ldrb	r3, [r4, #9]
 80010d2:	b193      	cbz	r3, 80010fa <Instruction_Write+0xfa>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80010d4:	7aa5      	ldrb	r5, [r4, #10]
 80010d6:	7a21      	ldrb	r1, [r4, #8]
 80010d8:	79e3      	ldrb	r3, [r4, #7]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80010da:	6820      	ldr	r0, [r4, #0]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80010dc:	00ed      	lsls	r5, r5, #3
		lcd1602_Handle->ctrlPins.E_Pin = status;
 80010de:	2200      	movs	r2, #0
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80010e0:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
		lcd1602_Handle->ctrlPins.E_Pin = status;
 80010e4:	7262      	strb	r2, [r4, #9]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80010e6:	431d      	orrs	r5, r3
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80010e8:	7921      	ldrb	r1, [r4, #4]
 80010ea:	9600      	str	r6, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	f10d 020f 	add.w	r2, sp, #15
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 80010f2:	f88d 500f 	strb.w	r5, [sp, #15]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80010f6:	f001 fa6d 	bl	80025d4 <HAL_I2C_Master_Transmit>
	E_Pin(lcd1602_Handle, RESET);
}
 80010fa:	b004      	add	sp, #16
 80010fc:	bd70      	pop	{r4, r5, r6, pc}
 80010fe:	bf00      	nop

08001100 <lcd1602_SetCursor>:
{
 8001100:	b538      	push	{r3, r4, r5, lr}
	lcd1602_Handle->instruction = 0b10000000 | DDRAM_address;
 8001102:	4605      	mov	r5, r0
	uint8_t DDRAM_address = col + (0x40 * row);
 8001104:	eb01 1382 	add.w	r3, r1, r2, lsl #6
	lcd1602_Handle->instruction = 0b10000000 | DDRAM_address;
 8001108:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800110c:	f805 3f05 	strb.w	r3, [r5, #5]!
{
 8001110:	4604      	mov	r4, r0
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff ff74 	bl	8001000 <Instruction_Write>
	lcd1602_Handle->instruction = lcd1602_Handle->instruction << 4;
 8001118:	7963      	ldrb	r3, [r4, #5]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	7163      	strb	r3, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800111e:	4629      	mov	r1, r5
 8001120:	4620      	mov	r0, r4
}
 8001122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8001126:	f7ff bf6b 	b.w	8001000 <Instruction_Write>
 800112a:	bf00      	nop

0800112c <lcd1602_Clear>:
{
 800112c:	b538      	push	{r3, r4, r5, lr}
	lcd1602_Handle->instruction = 0b00000001;
 800112e:	4605      	mov	r5, r0
 8001130:	2301      	movs	r3, #1
 8001132:	f805 3f05 	strb.w	r3, [r5, #5]!
{
 8001136:	4604      	mov	r4, r0
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8001138:	4629      	mov	r1, r5
 800113a:	f7ff ff61 	bl	8001000 <Instruction_Write>
	lcd1602_Handle->instruction = lcd1602_Handle->instruction << 4;
 800113e:	7963      	ldrb	r3, [r4, #5]
 8001140:	011b      	lsls	r3, r3, #4
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8001142:	4620      	mov	r0, r4
	lcd1602_Handle->instruction = lcd1602_Handle->instruction << 4;
 8001144:	7163      	strb	r3, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8001146:	4629      	mov	r1, r5
 8001148:	f7ff ff5a 	bl	8001000 <Instruction_Write>
}
 800114c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	osDelay(2);
 8001150:	2002      	movs	r0, #2
 8001152:	f002 bddf 	b.w	8003d14 <osDelay>
 8001156:	bf00      	nop

08001158 <lcd1602_Display>:
{
 8001158:	b538      	push	{r3, r4, r5, lr}
	if (lcd1602_Handle->dispBits.cursorState == ENABLE)
 800115a:	7b02      	ldrb	r2, [r0, #12]
	lcd1602_Handle->dispBits.displayState = state;
 800115c:	72c1      	strb	r1, [r0, #11]
		SET_BIT(lcd1602_Handle->instruction, 1 << 2);
 800115e:	2901      	cmp	r1, #1
 8001160:	bf0c      	ite	eq
 8001162:	230c      	moveq	r3, #12
 8001164:	2308      	movne	r3, #8
	if (lcd1602_Handle->dispBits.cursorState == ENABLE)
 8001166:	2a01      	cmp	r2, #1
 8001168:	7143      	strb	r3, [r0, #5]
		SET_BIT(lcd1602_Handle->instruction, 1 << 1);
 800116a:	bf04      	itt	eq
 800116c:	f043 0302 	orreq.w	r3, r3, #2
 8001170:	7143      	strbeq	r3, [r0, #5]
	if (lcd1602_Handle->dispBits.blinkState == ENABLE)
 8001172:	7b43      	ldrb	r3, [r0, #13]
 8001174:	2b01      	cmp	r3, #1
{
 8001176:	4604      	mov	r4, r0
	if (lcd1602_Handle->dispBits.blinkState == ENABLE)
 8001178:	d103      	bne.n	8001182 <lcd1602_Display+0x2a>
		SET_BIT(lcd1602_Handle->instruction, 1 << 0);
 800117a:	7943      	ldrb	r3, [r0, #5]
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	7143      	strb	r3, [r0, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8001182:	1d65      	adds	r5, r4, #5
 8001184:	4629      	mov	r1, r5
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff ff3a 	bl	8001000 <Instruction_Write>
	lcd1602_Handle->instruction = lcd1602_Handle->instruction << 4;
 800118c:	7963      	ldrb	r3, [r4, #5]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	7163      	strb	r3, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8001192:	4629      	mov	r1, r5
 8001194:	4620      	mov	r0, r4
}
 8001196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800119a:	f7ff bf31 	b.w	8001000 <Instruction_Write>
 800119e:	bf00      	nop

080011a0 <lcd1602_Init>:
{
 80011a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a4:	4604      	mov	r4, r0
 80011a6:	b084      	sub	sp, #16
	osDelay(100);
 80011a8:	2064      	movs	r0, #100	@ 0x64
{
 80011aa:	460d      	mov	r5, r1
 80011ac:	4616      	mov	r6, r2
	osDelay(100);
 80011ae:	f002 fdb1 	bl	8003d14 <osDelay>
	lcd1602_Handle->ctrlPins.RW_Pin = SET;
 80011b2:	4b61      	ldr	r3, [pc, #388]	@ (8001338 <lcd1602_Init+0x198>)
	lcd1602_Handle->hi2c = hi2c;
 80011b4:	6025      	str	r5, [r4, #0]
	lcd1602_Handle->instruction = NULL;
 80011b6:	2700      	movs	r7, #0
	lcd1602_Handle->ctrlPins.RW_Pin = SET;
 80011b8:	60a3      	str	r3, [r4, #8]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80011ba:	4628      	mov	r0, r5
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 80011bc:	230e      	movs	r3, #14
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80011be:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
	lcd1602_Handle->address = address;
 80011c2:	7126      	strb	r6, [r4, #4]
	lcd1602_Handle->instruction = NULL;
 80011c4:	7167      	strb	r7, [r4, #5]
	lcd1602_Handle->data = NULL;
 80011c6:	80e7      	strh	r7, [r4, #6]
	lcd1602_Handle->dispBits.cursorState = DISABLE;
 80011c8:	81a7      	strh	r7, [r4, #12]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 80011ca:	f88d 300f 	strb.w	r3, [sp, #15]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80011ce:	f10d 020f 	add.w	r2, sp, #15
 80011d2:	4631      	mov	r1, r6
 80011d4:	9500      	str	r5, [sp, #0]
 80011d6:	2301      	movs	r3, #1
 80011d8:	f001 f9fc 	bl	80025d4 <HAL_I2C_Master_Transmit>
	if (lcd1602_Handle->ctrlPins.RW_Pin != status)
 80011dc:	7a22      	ldrb	r2, [r4, #8]
 80011de:	b192      	cbz	r2, 8001206 <lcd1602_Init+0x66>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80011e0:	7aa2      	ldrb	r2, [r4, #10]
 80011e2:	7a63      	ldrb	r3, [r4, #9]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80011e4:	9500      	str	r5, [sp, #0]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80011e6:	00d2      	lsls	r2, r2, #3
 80011e8:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 80011ec:	79e3      	ldrb	r3, [r4, #7]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80011ee:	7921      	ldrb	r1, [r4, #4]
 80011f0:	6820      	ldr	r0, [r4, #0]
		lcd1602_Handle->ctrlPins.RW_Pin = status;
 80011f2:	7227      	strb	r7, [r4, #8]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80011f4:	431a      	orrs	r2, r3
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 80011f6:	f88d 200f 	strb.w	r2, [sp, #15]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80011fa:	2301      	movs	r3, #1
 80011fc:	f10d 020f 	add.w	r2, sp, #15
 8001200:	f001 f9e8 	bl	80025d4 <HAL_I2C_Master_Transmit>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001204:	7a22      	ldrb	r2, [r4, #8]
	if (lcd1602_Handle->ctrlPins.E_Pin != status)
 8001206:	7a63      	ldrb	r3, [r4, #9]
 8001208:	b1ab      	cbz	r3, 8001236 <lcd1602_Init+0x96>
		lcd1602_Handle->ctrlPins.E_Pin = status;
 800120a:	2300      	movs	r3, #0
 800120c:	7263      	strb	r3, [r4, #9]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 800120e:	7aa3      	ldrb	r3, [r4, #10]
 8001210:	79e1      	ldrb	r1, [r4, #7]
 8001212:	0052      	lsls	r2, r2, #1
 8001214:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001218:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121c:	9300      	str	r3, [sp, #0]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 800121e:	4311      	orrs	r1, r2
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001220:	2301      	movs	r3, #1
 8001222:	f10d 020f 	add.w	r2, sp, #15
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8001226:	f88d 100f 	strb.w	r1, [sp, #15]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800122a:	6820      	ldr	r0, [r4, #0]
 800122c:	7921      	ldrb	r1, [r4, #4]
 800122e:	f001 f9d1 	bl	80025d4 <HAL_I2C_Master_Transmit>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001232:	7a22      	ldrb	r2, [r4, #8]
 8001234:	7a63      	ldrb	r3, [r4, #9]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800123c:	79e2      	ldrb	r2, [r4, #7]
	lcd1602_Handle->ctrlPins.LED = state;
 800123e:	2700      	movs	r7, #0
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001240:	f44f 787a 	mov.w	r8, #1000	@ 0x3e8
	lcd1602_Handle->ctrlPins.LED = state;
 8001244:	72a7      	strb	r7, [r4, #10]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001246:	4313      	orrs	r3, r2
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001248:	f8cd 8000 	str.w	r8, [sp]
 800124c:	f10d 020f 	add.w	r2, sp, #15
 8001250:	7921      	ldrb	r1, [r4, #4]
	uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8001252:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001256:	6820      	ldr	r0, [r4, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	f001 f9bb 	bl	80025d4 <HAL_I2C_Master_Transmit>
	lcd1602_Handle->instruction = 0b00110000;
 800125e:	4625      	mov	r5, r4
	osDelay(50);
 8001260:	2032      	movs	r0, #50	@ 0x32
 8001262:	f002 fd57 	bl	8003d14 <osDelay>
	lcd1602_Handle->instruction = 0b00110000;
 8001266:	2330      	movs	r3, #48	@ 0x30
 8001268:	f805 3f05 	strb.w	r3, [r5, #5]!
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff fec6 	bl	8001000 <Instruction_Write>
	osDelay(5);
 8001274:	2005      	movs	r0, #5
 8001276:	f002 fd4d 	bl	8003d14 <osDelay>
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800127a:	4629      	mov	r1, r5
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff febf 	bl	8001000 <Instruction_Write>
	osDelay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f002 fd46 	bl	8003d14 <osDelay>
	lcd1602_Handle->instruction = 0b00100000;
 8001288:	2620      	movs	r6, #32
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800128a:	4629      	mov	r1, r5
 800128c:	4620      	mov	r0, r4
 800128e:	f7ff feb7 	bl	8001000 <Instruction_Write>
	lcd1602_Handle->instruction = 0b00100000;
 8001292:	7166      	strb	r6, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8001294:	4629      	mov	r1, r5
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff feb2 	bl	8001000 <Instruction_Write>
	lcd1602_Handle->instruction = 0b00100000;
 800129c:	7166      	strb	r6, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800129e:	4629      	mov	r1, r5
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7ff fead 	bl	8001000 <Instruction_Write>
	lcd1602_Handle->instruction = 0b10000000;
 80012a6:	2380      	movs	r3, #128	@ 0x80
 80012a8:	7163      	strb	r3, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80012aa:	4629      	mov	r1, r5
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff fea7 	bl	8001000 <Instruction_Write>
	lcd1602_Handle->instruction = 0b00000001;
 80012b2:	2601      	movs	r6, #1
	lcd1602_Display(lcd1602_Handle, DISABLE);
 80012b4:	4639      	mov	r1, r7
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff ff4e 	bl	8001158 <lcd1602_Display>
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80012bc:	4629      	mov	r1, r5
 80012be:	4620      	mov	r0, r4
	lcd1602_Handle->instruction = 0b00000001;
 80012c0:	7166      	strb	r6, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80012c2:	f7ff fe9d 	bl	8001000 <Instruction_Write>
	lcd1602_Handle->instruction = lcd1602_Handle->instruction << 4;
 80012c6:	7963      	ldrb	r3, [r4, #5]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	7163      	strb	r3, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80012cc:	4629      	mov	r1, r5
 80012ce:	4620      	mov	r0, r4
 80012d0:	f7ff fe96 	bl	8001000 <Instruction_Write>
	osDelay(2);
 80012d4:	2002      	movs	r0, #2
 80012d6:	f002 fd1d 	bl	8003d14 <osDelay>
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80012da:	4629      	mov	r1, r5
 80012dc:	4620      	mov	r0, r4
	lcd1602_Handle->instruction = 0b00000000;
 80012de:	7167      	strb	r7, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80012e0:	f7ff fe8e 	bl	8001000 <Instruction_Write>
	lcd1602_Handle->instruction = 0b01100000;
 80012e4:	2360      	movs	r3, #96	@ 0x60
 80012e6:	7163      	strb	r3, [r4, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80012e8:	4629      	mov	r1, r5
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff fe88 	bl	8001000 <Instruction_Write>
	lcd1602_Display(lcd1602_Handle, ENABLE);
 80012f0:	4631      	mov	r1, r6
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff ff30 	bl	8001158 <lcd1602_Display>
	osDelay(500);
 80012f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012fc:	f002 fd0a 	bl	8003d14 <osDelay>
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001300:	f8cd 8000 	str.w	r8, [sp]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001304:	7a65      	ldrb	r5, [r4, #9]
 8001306:	7a23      	ldrb	r3, [r4, #8]
 8001308:	79e2      	ldrb	r2, [r4, #7]
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800130a:	7921      	ldrb	r1, [r4, #4]
 800130c:	6820      	ldr	r0, [r4, #0]
	lcd1602_Handle->ctrlPins.LED = state;
 800130e:	72a6      	strb	r6, [r4, #10]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001310:	00ad      	lsls	r5, r5, #2
 8001312:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 8001316:	4315      	orrs	r5, r2
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001318:	4633      	mov	r3, r6
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 800131a:	f045 0508 	orr.w	r5, r5, #8
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800131e:	f10d 020f 	add.w	r2, sp, #15
	uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8001322:	f88d 500f 	strb.w	r5, [sp, #15]
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001326:	f001 f955 	bl	80025d4 <HAL_I2C_Master_Transmit>
	osDelay(500);
 800132a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
}
 800132e:	b004      	add	sp, #16
 8001330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(500);
 8001334:	f002 bcee 	b.w	8003d14 <osDelay>
 8001338:	00010101 	.word	0x00010101

0800133c <Data_Write>:

void Data_Write(lcd1602_HandleTypeDef *lcd1602_Handle, const uint8_t *data)
{
 800133c:	b570      	push	{r4, r5, r6, lr}
	if (lcd1602_Handle->ctrlPins.RS_Pin != status)
 800133e:	79c3      	ldrb	r3, [r0, #7]
 8001340:	2b01      	cmp	r3, #1
{
 8001342:	b084      	sub	sp, #16
 8001344:	4604      	mov	r4, r0
 8001346:	460d      	mov	r5, r1
	if (lcd1602_Handle->ctrlPins.RS_Pin != status)
 8001348:	d017      	beq.n	800137a <Data_Write+0x3e>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 800134a:	7a83      	ldrb	r3, [r0, #10]
 800134c:	7a01      	ldrb	r1, [r0, #8]
 800134e:	7a42      	ldrb	r2, [r0, #9]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001356:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800135a:	f043 0301 	orr.w	r3, r3, #1
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800135e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001362:	9200      	str	r2, [sp, #0]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8001364:	f88d 300f 	strb.w	r3, [sp, #15]
		lcd1602_Handle->ctrlPins.RS_Pin = status;
 8001368:	2301      	movs	r3, #1
 800136a:	71c3      	strb	r3, [r0, #7]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800136c:	7901      	ldrb	r1, [r0, #4]
 800136e:	6800      	ldr	r0, [r0, #0]
 8001370:	f10d 020f 	add.w	r2, sp, #15
 8001374:	f001 f92e 	bl	80025d4 <HAL_I2C_Master_Transmit>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001378:	79e3      	ldrb	r3, [r4, #7]
	if (lcd1602_Handle->ctrlPins.RW_Pin != status)
 800137a:	7a21      	ldrb	r1, [r4, #8]
 800137c:	b1a9      	cbz	r1, 80013aa <Data_Write+0x6e>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 800137e:	7aa1      	ldrb	r1, [r4, #10]
 8001380:	7a62      	ldrb	r2, [r4, #9]
 8001382:	00c9      	lsls	r1, r1, #3
 8001384:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
 8001388:	4319      	orrs	r1, r3
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800138a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800138e:	9200      	str	r2, [sp, #0]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8001390:	f88d 100f 	strb.w	r1, [sp, #15]
		lcd1602_Handle->ctrlPins.RW_Pin = status;
 8001394:	2100      	movs	r1, #0
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001396:	2301      	movs	r3, #1
		lcd1602_Handle->ctrlPins.RW_Pin = status;
 8001398:	7221      	strb	r1, [r4, #8]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800139a:	6820      	ldr	r0, [r4, #0]
 800139c:	7921      	ldrb	r1, [r4, #4]
 800139e:	f10d 020f 	add.w	r2, sp, #15
 80013a2:	f001 f917 	bl	80025d4 <HAL_I2C_Master_Transmit>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80013a6:	79e3      	ldrb	r3, [r4, #7]
 80013a8:	7a21      	ldrb	r1, [r4, #8]
	if (lcd1602_Handle->ctrlPins.E_Pin != status)
 80013aa:	7a66      	ldrb	r6, [r4, #9]
 80013ac:	2e01      	cmp	r6, #1
 80013ae:	d016      	beq.n	80013de <Data_Write+0xa2>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80013b0:	7aa2      	ldrb	r2, [r4, #10]
 80013b2:	00d2      	lsls	r2, r2, #3
 80013b4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80013b8:	4313      	orrs	r3, r2
 80013ba:	f043 0304 	orr.w	r3, r3, #4
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80013be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013c2:	9200      	str	r2, [sp, #0]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 80013c4:	f88d 300f 	strb.w	r3, [sp, #15]
		lcd1602_Handle->ctrlPins.E_Pin = status;
 80013c8:	2301      	movs	r3, #1
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80013ca:	7921      	ldrb	r1, [r4, #4]
		lcd1602_Handle->ctrlPins.E_Pin = status;
 80013cc:	7263      	strb	r3, [r4, #9]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 80013ce:	6820      	ldr	r0, [r4, #0]
 80013d0:	f10d 020f 	add.w	r2, sp, #15
 80013d4:	f001 f8fe 	bl	80025d4 <HAL_I2C_Master_Transmit>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80013d8:	79e3      	ldrb	r3, [r4, #7]
 80013da:	7a21      	ldrb	r1, [r4, #8]
 80013dc:	7a66      	ldrb	r6, [r4, #9]
 80013de:	7aa2      	ldrb	r2, [r4, #10]
	uint8_t ctrlPinsAndData;
	RS_Pin(lcd1602_Handle, SET);
	RW_Pin(lcd1602_Handle, RESET);
	E_Pin(lcd1602_Handle, SET);
	MODIFY_REG(ctrlPinsAndData, 0xF, CtrlPinsRetrieve(lcd1602_Handle));
	MODIFY_REG(ctrlPinsAndData, 0xF0, (*data) & 0xF0);
 80013e0:	7828      	ldrb	r0, [r5, #0]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 80013e2:	ea43 02c2 	orr.w	r2, r3, r2, lsl #3
 80013e6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80013ea:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
	MODIFY_REG(ctrlPinsAndData, 0xF0, (*data) & 0xF0);
 80013ee:	f020 000f 	bic.w	r0, r0, #15
 80013f2:	f002 020f 	and.w	r2, r2, #15
 80013f6:	4302      	orrs	r2, r0
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPinsAndData, sizeof(ctrlPinsAndData), I2C_TIMEOUT);
 80013f8:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 80013fc:	7921      	ldrb	r1, [r4, #4]
 80013fe:	6820      	ldr	r0, [r4, #0]
	MODIFY_REG(ctrlPinsAndData, 0xF0, (*data) & 0xF0);
 8001400:	f88d 200e 	strb.w	r2, [sp, #14]
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPinsAndData, sizeof(ctrlPinsAndData), I2C_TIMEOUT);
 8001404:	2301      	movs	r3, #1
 8001406:	9600      	str	r6, [sp, #0]
 8001408:	f10d 020e 	add.w	r2, sp, #14
 800140c:	f001 f8e2 	bl	80025d4 <HAL_I2C_Master_Transmit>
	if (lcd1602_Handle->ctrlPins.E_Pin != status)
 8001410:	7a63      	ldrb	r3, [r4, #9]
 8001412:	b193      	cbz	r3, 800143a <Data_Write+0xfe>
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001414:	7aa5      	ldrb	r5, [r4, #10]
 8001416:	7a21      	ldrb	r1, [r4, #8]
 8001418:	79e3      	ldrb	r3, [r4, #7]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 800141a:	6820      	ldr	r0, [r4, #0]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 800141c:	00ed      	lsls	r5, r5, #3
		lcd1602_Handle->ctrlPins.E_Pin = status;
 800141e:	2200      	movs	r2, #0
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001420:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
		lcd1602_Handle->ctrlPins.E_Pin = status;
 8001424:	7262      	strb	r2, [r4, #9]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8001426:	431d      	orrs	r5, r3
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001428:	7921      	ldrb	r1, [r4, #4]
 800142a:	9600      	str	r6, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	f10d 020f 	add.w	r2, sp, #15
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8001432:	f88d 500f 	strb.w	r5, [sp, #15]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8001436:	f001 f8cd 	bl	80025d4 <HAL_I2C_Master_Transmit>
	E_Pin(lcd1602_Handle, RESET);
}
 800143a:	b004      	add	sp, #16
 800143c:	bd70      	pop	{r4, r5, r6, pc}
 800143e:	bf00      	nop

08001440 <lcd1602_Print>:
{
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	4604      	mov	r4, r0
 8001444:	460d      	mov	r5, r1
		Data_Write(lcd1602_Handle, &lcd1602_Handle->data);
 8001446:	1d86      	adds	r6, r0, #6
		lcd1602_Handle->data = *pString++;
 8001448:	f815 3b01 	ldrb.w	r3, [r5], #1
 800144c:	71a3      	strb	r3, [r4, #6]
		Data_Write(lcd1602_Handle, &lcd1602_Handle->data);
 800144e:	4631      	mov	r1, r6
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff ff73 	bl	800133c <Data_Write>
		lcd1602_Handle->data = lcd1602_Handle->data << 4;
 8001456:	79a3      	ldrb	r3, [r4, #6]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	71a3      	strb	r3, [r4, #6]
		Data_Write(lcd1602_Handle, &lcd1602_Handle->data);
 800145c:	4631      	mov	r1, r6
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff ff6c 	bl	800133c <Data_Write>
	} while (*pString != '\0');
 8001464:	782b      	ldrb	r3, [r5, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ee      	bne.n	8001448 <lcd1602_Print+0x8>
}
 800146a:	bd70      	pop	{r4, r5, r6, pc}

0800146c <StartButtonTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 800146c:	b500      	push	{lr}
 800146e:	b083      	sub	sp, #12
	/* USER CODE BEGIN StartButtonTask */
	uint8_t displayMode = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	4c13      	ldr	r4, [pc, #76]	@ (80014c0 <StartButtonTask+0x54>)
 8001474:	4d13      	ldr	r5, [pc, #76]	@ (80014c4 <StartButtonTask+0x58>)
 8001476:	f88d 3007 	strb.w	r3, [sp, #7]
	/* Infinite loop */
	for(;;)
	{
		if (xSemaphoreTake(btnSemaphore, portMAX_DELAY) == pdTRUE)
 800147a:	f04f 31ff 	mov.w	r1, #4294967295
 800147e:	6820      	ldr	r0, [r4, #0]
 8001480:	f003 f92c 	bl	80046dc <xQueueSemaphoreTake>
		{
			displayMode = (displayMode + 1) % 4;
			xQueueSend(myQueueModeHandle, &displayMode, 0);
 8001484:	2300      	movs	r3, #0
		if (xSemaphoreTake(btnSemaphore, portMAX_DELAY) == pdTRUE)
 8001486:	2801      	cmp	r0, #1
			xQueueSend(myQueueModeHandle, &displayMode, 0);
 8001488:	461a      	mov	r2, r3
 800148a:	f10d 0107 	add.w	r1, sp, #7
		if (xSemaphoreTake(btnSemaphore, portMAX_DELAY) == pdTRUE)
 800148e:	d112      	bne.n	80014b6 <StartButtonTask+0x4a>
			displayMode = (displayMode + 1) % 4;
 8001490:	f89d c007 	ldrb.w	ip, [sp, #7]
			xQueueSend(myQueueModeHandle, &displayMode, 0);
 8001494:	6828      	ldr	r0, [r5, #0]
			displayMode = (displayMode + 1) % 4;
 8001496:	f10c 0c01 	add.w	ip, ip, #1
 800149a:	f00c 0c03 	and.w	ip, ip, #3
 800149e:	f88d c007 	strb.w	ip, [sp, #7]
			xQueueSend(myQueueModeHandle, &displayMode, 0);
 80014a2:	f002 fe33 	bl	800410c <xQueueGenericSend>
			osDelay(500);
 80014a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014aa:	f002 fc33 	bl	8003d14 <osDelay>
			xSemaphoreTake(btnSemaphore, 0);
 80014ae:	6820      	ldr	r0, [r4, #0]
 80014b0:	2100      	movs	r1, #0
 80014b2:	f003 f913 	bl	80046dc <xQueueSemaphoreTake>
		}
		osDelay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f002 fc2c 	bl	8003d14 <osDelay>
		if (xSemaphoreTake(btnSemaphore, portMAX_DELAY) == pdTRUE)
 80014bc:	e7dd      	b.n	800147a <StartButtonTask+0xe>
 80014be:	bf00      	nop
 80014c0:	200005f8 	.word	0x200005f8
 80014c4:	200004ac 	.word	0x200004ac

080014c8 <StartDisplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014cc:	ed2d 8b02 	vpush	{d8}
 80014d0:	b093      	sub	sp, #76	@ 0x4c
	float temperature;
	float hum;

	uint16_t bufferIndex = 0;
	uint16_t validDataCount = 0;
	uint8_t displayMode = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8df b210 	ldr.w	fp, [pc, #528]	@ 80016e8 <StartDisplayTask+0x220>
 80014d8:	4e75      	ldr	r6, [pc, #468]	@ (80016b0 <StartDisplayTask+0x1e8>)
 80014da:	4f76      	ldr	r7, [pc, #472]	@ (80016b4 <StartDisplayTask+0x1ec>)
		if (validDataCount < BUFFER_SIZE)
		{
			validDataCount++;
		}

		lcd1602_Clear(&lcd1602_Handle);
 80014dc:	4d76      	ldr	r5, [pc, #472]	@ (80016b8 <StartDisplayTask+0x1f0>)
	uint8_t displayMode = 0;
 80014de:	f88d 300b 	strb.w	r3, [sp, #11]
	uint16_t validDataCount = 0;
 80014e2:	469a      	mov	sl, r3
	uint16_t bufferIndex = 0;
 80014e4:	461c      	mov	r4, r3
		xQueueReceive(myQueueTempHandle, &temperature, portMAX_DELAY);
 80014e6:	4b75      	ldr	r3, [pc, #468]	@ (80016bc <StartDisplayTask+0x1f4>)
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	a903      	add	r1, sp, #12
 80014f0:	f002 ffce 	bl	8004490 <xQueueReceive>
		xQueueReceive(myQueueHumHandle, &hum, portMAX_DELAY);
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	a904      	add	r1, sp, #16
 80014fa:	f8db 0000 	ldr.w	r0, [fp]
 80014fe:	f002 ffc7 	bl	8004490 <xQueueReceive>
		xQueueReceive(myQueueModeHandle, &displayMode, 0);
 8001502:	4b6f      	ldr	r3, [pc, #444]	@ (80016c0 <StartDisplayTask+0x1f8>)
 8001504:	f10d 010b 	add.w	r1, sp, #11
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	2200      	movs	r2, #0
 800150c:	f002 ffc0 	bl	8004490 <xQueueReceive>
		bufferIndex = (bufferIndex + 1) % BUFFER_SIZE;
 8001510:	4a6c      	ldr	r2, [pc, #432]	@ (80016c4 <StartDisplayTask+0x1fc>)
		tempBuffer[bufferIndex] = temperature;
 8001512:	9803      	ldr	r0, [sp, #12]
		bufferIndex = (bufferIndex + 1) % BUFFER_SIZE;
 8001514:	1c63      	adds	r3, r4, #1
 8001516:	fba2 1203 	umull	r1, r2, r2, r3
 800151a:	f04f 0cc8 	mov.w	ip, #200	@ 0xc8
 800151e:	0992      	lsrs	r2, r2, #6
 8001520:	fb0c 3312 	mls	r3, ip, r2, r3
		tempBuffer[bufferIndex] = temperature;
 8001524:	eb06 0284 	add.w	r2, r6, r4, lsl #2
		if (validDataCount < BUFFER_SIZE)
 8001528:	f1ba 0fc7 	cmp.w	sl, #199	@ 0xc7
		humBuffer[bufferIndex] = hum;
 800152c:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8001530:	9904      	ldr	r1, [sp, #16]
		tempBuffer[bufferIndex] = temperature;
 8001532:	6010      	str	r0, [r2, #0]
			validDataCount++;
 8001534:	bf98      	it	ls
 8001536:	f10a 0a01 	addls.w	sl, sl, #1
		lcd1602_Clear(&lcd1602_Handle);
 800153a:	4628      	mov	r0, r5
		humBuffer[bufferIndex] = hum;
 800153c:	6021      	str	r1, [r4, #0]
			validDataCount++;
 800153e:	bf98      	it	ls
 8001540:	fa1f fa8a 	uxthls.w	sl, sl
		bufferIndex = (bufferIndex + 1) % BUFFER_SIZE;
 8001544:	b29c      	uxth	r4, r3
		lcd1602_Clear(&lcd1602_Handle);
 8001546:	f7ff fdf1 	bl	800112c <lcd1602_Clear>
		lcd1602_SetCursor(&lcd1602_Handle, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	4611      	mov	r1, r2
 800154e:	4628      	mov	r0, r5
 8001550:	f7ff fdd6 	bl	8001100 <lcd1602_SetCursor>

		switch (displayMode)
 8001554:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001558:	2b03      	cmp	r3, #3
 800155a:	f200 8098 	bhi.w	800168e <StartDisplayTask+0x1c6>
 800155e:	e8df f003 	tbb	[pc, r3]
 8001562:	5682      	.short	0x5682
 8001564:	022c      	.short	0x022c
	for (uint16_t i = 1; i < size; i++)
 8001566:	f1ba 0f01 	cmp.w	sl, #1
	float min = buffer[0];
 800156a:	edd6 8a00 	vldr	s17, [r6]
	float max = buffer[0];
 800156e:	ed97 8a00 	vldr	s16, [r7]
	for (uint16_t i = 1; i < size; i++)
 8001572:	d020      	beq.n	80015b6 <StartDisplayTask+0xee>
 8001574:	4b54      	ldr	r3, [pc, #336]	@ (80016c8 <StartDisplayTask+0x200>)
 8001576:	f1aa 0202 	sub.w	r2, sl, #2
 800157a:	b292      	uxth	r2, r2
 800157c:	1d18      	adds	r0, r3, #4
 800157e:	0091      	lsls	r1, r2, #2
 8001580:	eb00 0282 	add.w	r2, r0, r2, lsl #2
		if (buffer[i] < min)
 8001584:	ecf3 7a01 	vldmia	r3!, {s15}
 8001588:	eef4 8a67 	vcmp.f32	s17, s15
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	bfc8      	it	gt
 8001592:	eef0 8a67 	vmovgt.f32	s17, s15
	for (uint16_t i = 1; i < size; i++)
 8001596:	4293      	cmp	r3, r2
 8001598:	d1f4      	bne.n	8001584 <StartDisplayTask+0xbc>
 800159a:	4b4c      	ldr	r3, [pc, #304]	@ (80016cc <StartDisplayTask+0x204>)
 800159c:	185a      	adds	r2, r3, r1
 800159e:	3b04      	subs	r3, #4
		if (buffer[i] < min)
 80015a0:	ecf3 7a01 	vldmia	r3!, {s15}
 80015a4:	eef4 7a48 	vcmp.f32	s15, s16
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	bf48      	it	mi
 80015ae:	eeb0 8a67 	vmovmi.f32	s16, s15
	for (uint16_t i = 1; i < size; i++)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d1f4      	bne.n	80015a0 <StartDisplayTask+0xd8>

		case 3:
		{
			float minTemp = findMin(tempBuffer, validDataCount);
			float minHum = findMin(humBuffer, validDataCount);
			lcd1602_Print(&lcd1602_Handle, "Minimum:");
 80015b6:	4946      	ldr	r1, [pc, #280]	@ (80016d0 <StartDisplayTask+0x208>)
 80015b8:	e049      	b.n	800164e <StartDisplayTask+0x186>
	for (uint16_t i = 1; i < size; i++)
 80015ba:	f1ba 0f01 	cmp.w	sl, #1
	float max = buffer[0];
 80015be:	edd6 8a00 	vldr	s17, [r6]
 80015c2:	ed97 8a00 	vldr	s16, [r7]
	for (uint16_t i = 1; i < size; i++)
 80015c6:	d020      	beq.n	800160a <StartDisplayTask+0x142>
 80015c8:	4b3f      	ldr	r3, [pc, #252]	@ (80016c8 <StartDisplayTask+0x200>)
 80015ca:	f1aa 0202 	sub.w	r2, sl, #2
 80015ce:	b292      	uxth	r2, r2
 80015d0:	1d18      	adds	r0, r3, #4
 80015d2:	0091      	lsls	r1, r2, #2
 80015d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
		if (buffer[i] > max)
 80015d8:	ecf3 7a01 	vldmia	r3!, {s15}
 80015dc:	eef4 7a68 	vcmp.f32	s15, s17
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	bfc8      	it	gt
 80015e6:	eef0 8a67 	vmovgt.f32	s17, s15
	for (uint16_t i = 1; i < size; i++)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d1f4      	bne.n	80015d8 <StartDisplayTask+0x110>
 80015ee:	4b37      	ldr	r3, [pc, #220]	@ (80016cc <StartDisplayTask+0x204>)
 80015f0:	185a      	adds	r2, r3, r1
 80015f2:	3b04      	subs	r3, #4
		if (buffer[i] > max)
 80015f4:	ecf3 7a01 	vldmia	r3!, {s15}
 80015f8:	eef4 7a48 	vcmp.f32	s15, s16
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	bfc8      	it	gt
 8001602:	eeb0 8a67 	vmovgt.f32	s16, s15
	for (uint16_t i = 1; i < size; i++)
 8001606:	429a      	cmp	r2, r3
 8001608:	d1f4      	bne.n	80015f4 <StartDisplayTask+0x12c>
			lcd1602_Print(&lcd1602_Handle, "Maximum:");
 800160a:	4932      	ldr	r1, [pc, #200]	@ (80016d4 <StartDisplayTask+0x20c>)
 800160c:	e01f      	b.n	800164e <StartDisplayTask+0x186>
	float sum = 0;
 800160e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80016d8 <StartDisplayTask+0x210>
 8001612:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <StartDisplayTask+0x1e8>)
 8001614:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8001618:	eb06 018a 	add.w	r1, r6, sl, lsl #2
		sum += buffer[i];
 800161c:	ecf3 7a01 	vldmia	r3!, {s15}
	for (uint16_t i = 0; i < size; i++)
 8001620:	428b      	cmp	r3, r1
		sum += buffer[i];
 8001622:	ee37 7a27 	vadd.f32	s14, s14, s15
	for (uint16_t i = 0; i < size; i++)
 8001626:	d1f9      	bne.n	800161c <StartDisplayTask+0x154>
	return sum / size;
 8001628:	ee07 aa90 	vmov	s15, sl
 800162c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001630:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <StartDisplayTask+0x1ec>)
	float sum = 0;
 8001632:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80016d8 <StartDisplayTask+0x210>
	return sum / size;
 8001636:	eec7 8a26 	vdiv.f32	s17, s14, s13
	for (uint16_t i = 0; i < size; i++)
 800163a:	443a      	add	r2, r7
		sum += buffer[i];
 800163c:	ecb3 7a01 	vldmia	r3!, {s14}
	for (uint16_t i = 0; i < size; i++)
 8001640:	429a      	cmp	r2, r3
		sum += buffer[i];
 8001642:	ee77 7a87 	vadd.f32	s15, s15, s14
	for (uint16_t i = 0; i < size; i++)
 8001646:	d1f9      	bne.n	800163c <StartDisplayTask+0x174>
	return sum / size;
 8001648:	ee87 8aa6 	vdiv.f32	s16, s15, s13
			lcd1602_Print(&lcd1602_Handle, "Average:");
 800164c:	4923      	ldr	r1, [pc, #140]	@ (80016dc <StartDisplayTask+0x214>)
			lcd1602_Print(&lcd1602_Handle, "Minimum:");
 800164e:	4628      	mov	r0, r5
 8001650:	f7ff fef6 	bl	8001440 <lcd1602_Print>
			sprintf(lcdBuffer, "T:%.1fC H:%.1f%%", minTemp, minHum);
 8001654:	ee18 0a90 	vmov	r0, s17
 8001658:	f7fe ff76 	bl	8000548 <__aeabi_f2d>
 800165c:	4680      	mov	r8, r0
 800165e:	4689      	mov	r9, r1
 8001660:	ee18 0a10 	vmov	r0, s16
 8001664:	e009      	b.n	800167a <StartDisplayTask+0x1b2>
			lcd1602_Print(&lcd1602_Handle, "Current:");
 8001666:	491e      	ldr	r1, [pc, #120]	@ (80016e0 <StartDisplayTask+0x218>)
 8001668:	4628      	mov	r0, r5
 800166a:	f7ff fee9 	bl	8001440 <lcd1602_Print>
			sprintf(lcdBuffer, "T:%.1fC H:%.1f%%", temperature, hum);
 800166e:	9803      	ldr	r0, [sp, #12]
 8001670:	f7fe ff6a 	bl	8000548 <__aeabi_f2d>
 8001674:	4680      	mov	r8, r0
 8001676:	9804      	ldr	r0, [sp, #16]
 8001678:	4689      	mov	r9, r1
			sprintf(lcdBuffer, "T:%.1fC H:%.1f%%", minTemp, minHum);
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_f2d>
 800167e:	4642      	mov	r2, r8
 8001680:	e9cd 0100 	strd	r0, r1, [sp]
 8001684:	464b      	mov	r3, r9
 8001686:	4917      	ldr	r1, [pc, #92]	@ (80016e4 <StartDisplayTask+0x21c>)
 8001688:	a805      	add	r0, sp, #20
 800168a:	f006 fe4b 	bl	8008324 <siprintf>

		default:
			break;
		}

		lcd1602_SetCursor(&lcd1602_Handle, 0, 1);
 800168e:	2201      	movs	r2, #1
 8001690:	4628      	mov	r0, r5
 8001692:	2100      	movs	r1, #0
 8001694:	f7ff fd34 	bl	8001100 <lcd1602_SetCursor>
		lcd1602_Print(&lcd1602_Handle, lcdBuffer);
 8001698:	a905      	add	r1, sp, #20
 800169a:	4628      	mov	r0, r5
 800169c:	f7ff fed0 	bl	8001440 <lcd1602_Print>
		osDelay(3000);
 80016a0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80016a4:	f002 fb36 	bl	8003d14 <osDelay>

		osDelay(1);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f002 fb33 	bl	8003d14 <osDelay>
		xQueueReceive(myQueueTempHandle, &temperature, portMAX_DELAY);
 80016ae:	e71a      	b.n	80014e6 <StartDisplayTask+0x1e>
 80016b0:	2000091c 	.word	0x2000091c
 80016b4:	200005fc 	.word	0x200005fc
 80016b8:	2000049c 	.word	0x2000049c
 80016bc:	200004b4 	.word	0x200004b4
 80016c0:	200004ac 	.word	0x200004ac
 80016c4:	51eb851f 	.word	0x51eb851f
 80016c8:	20000920 	.word	0x20000920
 80016cc:	20000604 	.word	0x20000604
 80016d0:	0800bd0c 	.word	0x0800bd0c
 80016d4:	0800bd00 	.word	0x0800bd00
 80016d8:	00000000 	.word	0x00000000
 80016dc:	0800bcf4 	.word	0x0800bcf4
 80016e0:	0800bcd4 	.word	0x0800bcd4
 80016e4:	0800bce0 	.word	0x0800bce0
 80016e8:	200004b0 	.word	0x200004b0

080016ec <SystemClock_Config>:
{
 80016ec:	b530      	push	{r4, r5, lr}
 80016ee:	b099      	sub	sp, #100	@ 0x64
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f0:	2244      	movs	r2, #68	@ 0x44
 80016f2:	2100      	movs	r1, #0
 80016f4:	a806      	add	r0, sp, #24
 80016f6:	f006 fe78 	bl	80083ea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fa:	2300      	movs	r3, #0
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016fc:	f44f 7000 	mov.w	r0, #512	@ 0x200
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001704:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001708:	9305      	str	r3, [sp, #20]
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800170a:	f001 f8a1 	bl	8002850 <HAL_PWREx_ControlVoltageScaling>
 800170e:	b108      	cbz	r0, 8001714 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001712:	e7fe      	b.n	8001712 <SystemClock_Config+0x26>
	HAL_PWR_EnableBkUpAccess();
 8001714:	4604      	mov	r4, r0
 8001716:	f001 f88b 	bl	8002830 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800171a:	4a14      	ldr	r2, [pc, #80]	@ (800176c <SystemClock_Config+0x80>)
 800171c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001720:	f023 0318 	bic.w	r3, r3, #24
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001728:	2314      	movs	r3, #20
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800172a:	2501      	movs	r5, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800172c:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172e:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001730:	23a0      	movs	r3, #160	@ 0xa0
 8001732:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001734:	e9cd 540d 	strd	r5, r4, [sp, #52]	@ 0x34
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001738:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800173a:	9411      	str	r4, [sp, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173c:	f001 f968 	bl	8002a10 <HAL_RCC_OscConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	b108      	cbz	r0, 8001748 <SystemClock_Config+0x5c>
 8001744:	b672      	cpsid	i
	while (1)
 8001746:	e7fe      	b.n	8001746 <SystemClock_Config+0x5a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001748:	220f      	movs	r2, #15
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800174a:	4629      	mov	r1, r5
 800174c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800174e:	e9cd 2301 	strd	r2, r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001752:	e9cd 3303 	strd	r3, r3, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001756:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001758:	f001 fc88 	bl	800306c <HAL_RCC_ClockConfig>
 800175c:	b108      	cbz	r0, 8001762 <SystemClock_Config+0x76>
 800175e:	b672      	cpsid	i
	while (1)
 8001760:	e7fe      	b.n	8001760 <SystemClock_Config+0x74>
	HAL_RCCEx_EnableMSIPLLMode();
 8001762:	f001 fe83 	bl	800346c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001766:	b019      	add	sp, #100	@ 0x64
 8001768:	bd30      	pop	{r4, r5, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <main>:
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0a6      	sub	sp, #152	@ 0x98
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	2400      	movs	r4, #0
	HAL_Init();
 8001776:	f000 fc2d 	bl	8001fd4 <HAL_Init>
	SystemClock_Config();
 800177a:	f7ff ffb7 	bl	80016ec <SystemClock_Config>
	xTraceEnable(TRC_START);
 800177e:	2001      	movs	r0, #1
 8001780:	f005 fdb0 	bl	80072e4 <xTraceEnable>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	e9cd 441e 	strd	r4, r4, [sp, #120]	@ 0x78
 8001788:	e9cd 4420 	strd	r4, r4, [sp, #128]	@ 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800178c:	4b81      	ldr	r3, [pc, #516]	@ (8001994 <main+0x224>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	9422      	str	r4, [sp, #136]	@ 0x88
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001790:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
	huart2.Init.BaudRate = 115200;
 8001792:	4e81      	ldr	r6, [pc, #516]	@ (8001998 <main+0x228>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	f042 0204 	orr.w	r2, r2, #4
 8001798:	64da      	str	r2, [r3, #76]	@ 0x4c
 800179a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800179c:	f002 0204 	and.w	r2, r2, #4
 80017a0:	9201      	str	r2, [sp, #4]
 80017a2:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80017ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017ae:	f002 0201 	and.w	r2, r2, #1
 80017b2:	9202      	str	r2, [sp, #8]
 80017b4:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017b8:	f042 0202 	orr.w	r2, r2, #2
 80017bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	f003 0302 	and.w	r3, r3, #2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017c4:	2120      	movs	r1, #32
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	9303      	str	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017cc:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017d0:	f000 fd70 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017d4:	4871      	ldr	r0, [pc, #452]	@ (800199c <main+0x22c>)
 80017d6:	4622      	mov	r2, r4
 80017d8:	2108      	movs	r1, #8
 80017da:	f000 fd6b 	bl	80022b4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017de:	2501      	movs	r5, #1
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017e0:	2202      	movs	r2, #2
 80017e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	a91e      	add	r1, sp, #120	@ 0x78
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ec:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f0:	9520      	str	r5, [sp, #128]	@ 0x80
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f000 fc6d 	bl	80020d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017f6:	2320      	movs	r3, #32
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	a91e      	add	r1, sp, #120	@ 0x78
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	e9cd 351e 	strd	r3, r5, [sp, #120]	@ 0x78
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	e9cd 4420 	strd	r4, r4, [sp, #128]	@ 0x80
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f000 fc63 	bl	80020d0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD3_Pin;
 800180a:	2308      	movs	r3, #8
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800180c:	4863      	ldr	r0, [pc, #396]	@ (800199c <main+0x22c>)
 800180e:	a91e      	add	r1, sp, #120	@ 0x78
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	e9cd 351e 	strd	r3, r5, [sp, #120]	@ 0x78
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	e9cd 4420 	strd	r4, r4, [sp, #128]	@ 0x80
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001818:	f000 fc5a 	bl	80020d0 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800181c:	4622      	mov	r2, r4
 800181e:	2105      	movs	r1, #5
 8001820:	2007      	movs	r0, #7
 8001822:	f000 fc0b 	bl	800203c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001826:	2007      	movs	r0, #7
 8001828:	f000 fc44 	bl	80020b4 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 800182c:	485c      	ldr	r0, [pc, #368]	@ (80019a0 <main+0x230>)
	huart2.Init.BaudRate = 115200;
 800182e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001832:	e9c0 6300 	strd	r6, r3, [r0]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001836:	230c      	movs	r3, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001838:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	e9c0 4304 	strd	r4, r3, [r0, #16]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001844:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001848:	f002 f9fc 	bl	8003c44 <HAL_UART_Init>
 800184c:	b108      	cbz	r0, 8001852 <main+0xe2>
 800184e:	b672      	cpsid	i
	while (1)
 8001850:	e7fe      	b.n	8001850 <main+0xe0>
	hi2c1.Instance = I2C1;
 8001852:	4c54      	ldr	r4, [pc, #336]	@ (80019a4 <main+0x234>)
	hi2c1.Init.Timing = 0x00B07CB4;
 8001854:	4954      	ldr	r1, [pc, #336]	@ (80019a8 <main+0x238>)
 8001856:	4a55      	ldr	r2, [pc, #340]	@ (80019ac <main+0x23c>)
 8001858:	4603      	mov	r3, r0
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800185a:	4620      	mov	r0, r4
	hi2c1.Init.Timing = 0x00B07CB4;
 800185c:	e9c4 1200 	strd	r1, r2, [r4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001860:	e9c4 3502 	strd	r3, r5, [r4, #8]
	hi2c1.Init.OwnAddress2 = 0;
 8001864:	e9c4 3304 	strd	r3, r3, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001868:	e9c4 3306 	strd	r3, r3, [r4, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186c:	6223      	str	r3, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186e:	f000 fe57 	bl	8002520 <HAL_I2C_Init>
 8001872:	b108      	cbz	r0, 8001878 <main+0x108>
 8001874:	b672      	cpsid	i
	while (1)
 8001876:	e7fe      	b.n	8001876 <main+0x106>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001878:	4601      	mov	r1, r0
 800187a:	4620      	mov	r0, r4
 800187c:	f000 ff82 	bl	8002784 <HAL_I2CEx_ConfigAnalogFilter>
 8001880:	b108      	cbz	r0, 8001886 <main+0x116>
 8001882:	b672      	cpsid	i
	while (1)
 8001884:	e7fe      	b.n	8001884 <main+0x114>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001886:	4601      	mov	r1, r0
 8001888:	4620      	mov	r0, r4
 800188a:	f000 ffa5 	bl	80027d8 <HAL_I2CEx_ConfigDigitalFilter>
 800188e:	b990      	cbnz	r0, 80018b6 <main+0x146>
	htim6.Instance = TIM6;
 8001890:	4f47      	ldr	r7, [pc, #284]	@ (80019b0 <main+0x240>)
	htim6.Init.Prescaler = 31;
 8001892:	4a48      	ldr	r2, [pc, #288]	@ (80019b4 <main+0x244>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	9020      	str	r0, [sp, #128]	@ 0x80
	htim6.Init.Prescaler = 31;
 8001896:	231f      	movs	r3, #31
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	e9cd 001e 	strd	r0, r0, [sp, #120]	@ 0x78
	htim6.Init.Prescaler = 31;
 800189c:	e9c7 2300 	strd	r2, r3, [r7]
 80018a0:	60b8      	str	r0, [r7, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	61b8      	str	r0, [r7, #24]
	htim6.Init.Period = 65535;
 80018a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018a8:	4638      	mov	r0, r7
	htim6.Init.Period = 65535;
 80018aa:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018ac:	f001 ff3a 	bl	8003724 <HAL_TIM_Base_Init>
 80018b0:	b118      	cbz	r0, 80018ba <main+0x14a>
 80018b2:	b672      	cpsid	i
	while (1)
 80018b4:	e7fe      	b.n	80018b4 <main+0x144>
 80018b6:	b672      	cpsid	i
 80018b8:	e7fe      	b.n	80018b8 <main+0x148>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ba:	901e      	str	r0, [sp, #120]	@ 0x78
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	9020      	str	r0, [sp, #128]	@ 0x80
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018be:	a91e      	add	r1, sp, #120	@ 0x78
 80018c0:	4638      	mov	r0, r7
 80018c2:	f001 ff61 	bl	8003788 <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4606      	mov	r6, r0
 80018c8:	b108      	cbz	r0, 80018ce <main+0x15e>
 80018ca:	b672      	cpsid	i
	while (1)
 80018cc:	e7fe      	b.n	80018cc <main+0x15c>
	lcd1602_Init(&lcd1602_Handle, &hi2c1, PCF8574_ADDRESS);
 80018ce:	4621      	mov	r1, r4
 80018d0:	224e      	movs	r2, #78	@ 0x4e
 80018d2:	4839      	ldr	r0, [pc, #228]	@ (80019b8 <main+0x248>)
	osMessageQDef(myQueueTemp, 1, float);
 80018d4:	4c39      	ldr	r4, [pc, #228]	@ (80019bc <main+0x24c>)
	lcd1602_Init(&lcd1602_Handle, &hi2c1, PCF8574_ADDRESS);
 80018d6:	f7ff fc63 	bl	80011a0 <lcd1602_Init>
	HAL_TIM_Base_Start(&htim6);
 80018da:	4638      	mov	r0, r7
 80018dc:	f001 fdce 	bl	800347c <HAL_TIM_Base_Start>
	btnSemaphore = xSemaphoreCreateBinary();
 80018e0:	2203      	movs	r2, #3
 80018e2:	4631      	mov	r1, r6
 80018e4:	4628      	mov	r0, r5
 80018e6:	f002 fc05 	bl	80040f4 <xQueueGenericCreate>
 80018ea:	4b35      	ldr	r3, [pc, #212]	@ (80019c0 <main+0x250>)
 80018ec:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueueTemp, 1, float);
 80018ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018f2:	ad04      	add	r5, sp, #16
 80018f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueueTempHandle = osMessageCreate(osMessageQ(myQueueTemp), NULL);
 80018f8:	4631      	mov	r1, r6
 80018fa:	4628      	mov	r0, r5
 80018fc:	f002 fa12 	bl	8003d24 <osMessageCreate>
 8001900:	4b30      	ldr	r3, [pc, #192]	@ (80019c4 <main+0x254>)
 8001902:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueueHum, 1, float);
 8001904:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001908:	ad08      	add	r5, sp, #32
 800190a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueueHumHandle = osMessageCreate(osMessageQ(myQueueHum), NULL);
 800190e:	4631      	mov	r1, r6
 8001910:	4628      	mov	r0, r5
 8001912:	f002 fa07 	bl	8003d24 <osMessageCreate>
 8001916:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <main+0x258>)
 8001918:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueueMode, 1, uint8_t);
 800191a:	f104 0310 	add.w	r3, r4, #16
 800191e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001920:	ad0c      	add	r5, sp, #48	@ 0x30
 8001922:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueueModeHandle = osMessageCreate(osMessageQ(myQueueMode), NULL);
 8001926:	4631      	mov	r1, r6
 8001928:	4628      	mov	r0, r5
 800192a:	f002 f9fb 	bl	8003d24 <osMessageCreate>
 800192e:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <main+0x25c>)
	osThreadDef(SensorTask, StartSensorTask, osPriorityNormal, 0, 256);
 8001930:	f104 0c20 	add.w	ip, r4, #32
	myQueueModeHandle = osMessageCreate(osMessageQ(myQueueMode), NULL);
 8001934:	6018      	str	r0, [r3, #0]
	osThreadDef(SensorTask, StartSensorTask, osPriorityNormal, 0, 256);
 8001936:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800193a:	ad10      	add	r5, sp, #64	@ 0x40
 800193c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001942:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8001946:	4631      	mov	r1, r6
 8001948:	a810      	add	r0, sp, #64	@ 0x40
 800194a:	f002 f9b3 	bl	8003cb4 <osThreadCreate>
 800194e:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <main+0x260>)
	osThreadDef(ButtonTask, StartButtonTask, osPriorityNormal, 0, 128);
 8001950:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8001954:	6018      	str	r0, [r3, #0]
	osThreadDef(ButtonTask, StartButtonTask, osPriorityNormal, 0, 128);
 8001956:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800195a:	ad17      	add	r5, sp, #92	@ 0x5c
 800195c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001962:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	ButtonTaskHandle = osThreadCreate(osThread(ButtonTask), NULL);
 8001966:	4631      	mov	r1, r6
 8001968:	a817      	add	r0, sp, #92	@ 0x5c
 800196a:	f002 f9a3 	bl	8003cb4 <osThreadCreate>
 800196e:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <main+0x264>)
	osThreadDef(DisplayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 8001970:	3458      	adds	r4, #88	@ 0x58
	ButtonTaskHandle = osThreadCreate(osThread(ButtonTask), NULL);
 8001972:	6018      	str	r0, [r3, #0]
	osThreadDef(DisplayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 8001974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001976:	ad1e      	add	r5, sp, #120	@ 0x78
 8001978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800197e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 8001982:	4631      	mov	r1, r6
 8001984:	a81e      	add	r0, sp, #120	@ 0x78
 8001986:	f002 f995 	bl	8003cb4 <osThreadCreate>
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <main+0x268>)
 800198c:	6018      	str	r0, [r3, #0]
	osKernelStart();
 800198e:	f002 f98b 	bl	8003ca8 <osKernelStart>
	while (1)
 8001992:	e7fe      	b.n	8001992 <main+0x222>
 8001994:	40021000 	.word	0x40021000
 8001998:	40004400 	.word	0x40004400
 800199c:	48000400 	.word	0x48000400
 80019a0:	200004c4 	.word	0x200004c4
 80019a4:	2000059c 	.word	0x2000059c
 80019a8:	40005400 	.word	0x40005400
 80019ac:	00b07cb4 	.word	0x00b07cb4
 80019b0:	20000550 	.word	0x20000550
 80019b4:	40001000 	.word	0x40001000
 80019b8:	2000049c 	.word	0x2000049c
 80019bc:	0800bc60 	.word	0x0800bc60
 80019c0:	200005f8 	.word	0x200005f8
 80019c4:	200004b4 	.word	0x200004b4
 80019c8:	200004b0 	.word	0x200004b0
 80019cc:	200004ac 	.word	0x200004ac
 80019d0:	200004c0 	.word	0x200004c0
 80019d4:	200004bc 	.word	0x200004bc
 80019d8:	200004b8 	.word	0x200004b8

080019dc <HAL_GPIO_EXTI_Callback>:
	xSemaphoreGiveFromISR(btnSemaphore, NULL);
 80019dc:	4b02      	ldr	r3, [pc, #8]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0xc>)
 80019de:	2100      	movs	r1, #0
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	f002 bd51 	b.w	8004488 <xQueueGiveFromISR>
 80019e6:	bf00      	nop
 80019e8:	200005f8 	.word	0x200005f8

080019ec <DHT22_Start>:
{
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80019f0:	2500      	movs	r5, #0
	GPIO_InitStructPrivate.Pin = DHT22_PIN;
 80019f2:	2220      	movs	r2, #32
 80019f4:	2301      	movs	r3, #1
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80019f6:	4669      	mov	r1, sp
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80019fc:	4c2f      	ldr	r4, [pc, #188]	@ (8001abc <DHT22_Start+0xd0>)
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80019fe:	9504      	str	r5, [sp, #16]
	GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8001a00:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001a04:	e9cd 5502 	strd	r5, r5, [sp, #8]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001a08:	f000 fb62 	bl	80020d0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a12:	462a      	mov	r2, r5
 8001a14:	f000 fc4e 	bl	80022b4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001a18:	6821      	ldr	r1, [r4, #0]
	while (__HAL_TIM_GET_COUNTER(&htim6) < delay);
 8001a1a:	f240 5013 	movw	r0, #1299	@ 0x513
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001a1e:	624d      	str	r5, [r1, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < delay);
 8001a20:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8001a22:	4283      	cmp	r3, r0
 8001a24:	d9fc      	bls.n	8001a20 <DHT22_Start+0x34>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001a26:	2201      	movs	r2, #1
 8001a28:	2120      	movs	r1, #32
 8001a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a2e:	f000 fc41 	bl	80022b4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	2300      	movs	r3, #0
 8001a36:	6253      	str	r3, [r2, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < delay);
 8001a38:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001a3a:	2b1d      	cmp	r3, #29
 8001a3c:	d9fc      	bls.n	8001a38 <DHT22_Start+0x4c>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001a3e:	2500      	movs	r5, #0
 8001a40:	2301      	movs	r3, #1
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001a42:	4669      	mov	r1, sp
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001a48:	e9cd 5301 	strd	r5, r3, [sp, #4]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001a4c:	f000 fb40 	bl	80020d0 <HAL_GPIO_Init>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	6255      	str	r5, [r2, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < delay);
 8001a54:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001a56:	2b27      	cmp	r3, #39	@ 0x27
 8001a58:	d9fc      	bls.n	8001a54 <DHT22_Start+0x68>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 8001a5a:	2120      	movs	r1, #32
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a60:	f000 fc22 	bl	80022a8 <HAL_GPIO_ReadPin>
 8001a64:	bb40      	cbnz	r0, 8001ab8 <DHT22_Start+0xcc>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	6250      	str	r0, [r2, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < delay);
 8001a6a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001a6c:	2b4f      	cmp	r3, #79	@ 0x4f
 8001a6e:	d9fc      	bls.n	8001a6a <DHT22_Start+0x7e>
		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 8001a70:	2120      	movs	r1, #32
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a76:	f000 fc17 	bl	80022a8 <HAL_GPIO_ReadPin>
 8001a7a:	1e06      	subs	r6, r0, #0
 8001a7c:	bf18      	it	ne
 8001a7e:	2601      	movne	r6, #1
	pMillis = xTaskGetTickCount();
 8001a80:	f003 f9be 	bl	8004e00 <xTaskGetTickCount>
 8001a84:	4d0e      	ldr	r5, [pc, #56]	@ (8001ac0 <DHT22_Start+0xd4>)
 8001a86:	4c0f      	ldr	r4, [pc, #60]	@ (8001ac4 <DHT22_Start+0xd8>)
 8001a88:	6028      	str	r0, [r5, #0]
	cMillis = xTaskGetTickCount();
 8001a8a:	f003 f9b9 	bl	8004e00 <xTaskGetTickCount>
 8001a8e:	4603      	mov	r3, r0
	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001a90:	e007      	b.n	8001aa2 <DHT22_Start+0xb6>
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	6822      	ldr	r2, [r4, #0]
 8001a96:	3302      	adds	r3, #2
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d90a      	bls.n	8001ab2 <DHT22_Start+0xc6>
		cMillis = xTaskGetTickCount();
 8001a9c:	f003 f9b0 	bl	8004e00 <xTaskGetTickCount>
 8001aa0:	4603      	mov	r3, r0
	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	cMillis = xTaskGetTickCount();
 8001aa8:	6023      	str	r3, [r4, #0]
	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001aaa:	f000 fbfd 	bl	80022a8 <HAL_GPIO_ReadPin>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d1ef      	bne.n	8001a92 <DHT22_Start+0xa6>
}
 8001ab2:	4630      	mov	r0, r6
 8001ab4:	b006      	add	sp, #24
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t Response = 0;
 8001ab8:	2600      	movs	r6, #0
 8001aba:	e7e1      	b.n	8001a80 <DHT22_Start+0x94>
 8001abc:	20000550 	.word	0x20000550
 8001ac0:	200005f4 	.word	0x200005f4
 8001ac4:	200005f0 	.word	0x200005f0

08001ac8 <DHT22_Read>:
{
 8001ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001acc:	2700      	movs	r7, #0
 8001ace:	4d26      	ldr	r5, [pc, #152]	@ (8001b68 <DHT22_Read+0xa0>)
 8001ad0:	4c26      	ldr	r4, [pc, #152]	@ (8001b6c <DHT22_Read+0xa4>)
 8001ad2:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 8001b70 <DHT22_Read+0xa8>
 8001ad6:	2607      	movs	r6, #7
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001ad8:	46b8      	mov	r8, r7
		pMillis = xTaskGetTickCount();
 8001ada:	f003 f991 	bl	8004e00 <xTaskGetTickCount>
 8001ade:	6028      	str	r0, [r5, #0]
		cMillis = xTaskGetTickCount();
 8001ae0:	f003 f98e 	bl	8004e00 <xTaskGetTickCount>
 8001ae4:	4603      	mov	r3, r0
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001ae6:	e007      	b.n	8001af8 <DHT22_Read+0x30>
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	6822      	ldr	r2, [r4, #0]
 8001aec:	3302      	adds	r3, #2
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d90a      	bls.n	8001b08 <DHT22_Read+0x40>
			cMillis = xTaskGetTickCount();
 8001af2:	f003 f985 	bl	8004e00 <xTaskGetTickCount>
 8001af6:	4603      	mov	r3, r0
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001af8:	2120      	movs	r1, #32
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		cMillis = xTaskGetTickCount();
 8001afe:	6023      	str	r3, [r4, #0]
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001b00:	f000 fbd2 	bl	80022a8 <HAL_GPIO_ReadPin>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d0ef      	beq.n	8001ae8 <DHT22_Read+0x20>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001b08:	f8d9 2000 	ldr.w	r2, [r9]
 8001b0c:	f8c2 8024 	str.w	r8, [r2, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < delay);
 8001b10:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001b12:	2b27      	cmp	r3, #39	@ 0x27
 8001b14:	d9fc      	bls.n	8001b10 <DHT22_Read+0x48>
		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001b16:	2120      	movs	r1, #32
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1c:	f000 fbc4 	bl	80022a8 <HAL_GPIO_ReadPin>
			b&= ~(1<<(7-a));
 8001b20:	2301      	movs	r3, #1
 8001b22:	40b3      	lsls	r3, r6
		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001b24:	b9e8      	cbnz	r0, 8001b62 <DHT22_Read+0x9a>
			b&= ~(1<<(7-a));
 8001b26:	ea27 0703 	bic.w	r7, r7, r3
		pMillis = xTaskGetTickCount();
 8001b2a:	f003 f969 	bl	8004e00 <xTaskGetTickCount>
 8001b2e:	6028      	str	r0, [r5, #0]
		cMillis = xTaskGetTickCount();
 8001b30:	f003 f966 	bl	8004e00 <xTaskGetTickCount>
 8001b34:	4603      	mov	r3, r0
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001b36:	e007      	b.n	8001b48 <DHT22_Read+0x80>
 8001b38:	682b      	ldr	r3, [r5, #0]
 8001b3a:	6822      	ldr	r2, [r4, #0]
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d90a      	bls.n	8001b58 <DHT22_Read+0x90>
			cMillis = xTaskGetTickCount();
 8001b42:	f003 f95d 	bl	8004e00 <xTaskGetTickCount>
 8001b46:	4603      	mov	r3, r0
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001b48:	2120      	movs	r1, #32
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		cMillis = xTaskGetTickCount();
 8001b4e:	6023      	str	r3, [r4, #0]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001b50:	f000 fbaa 	bl	80022a8 <HAL_GPIO_ReadPin>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d1ef      	bne.n	8001b38 <DHT22_Read+0x70>
	for (a=0;a<8;a++)
 8001b58:	3e01      	subs	r6, #1
 8001b5a:	d2be      	bcs.n	8001ada <DHT22_Read+0x12>
}
 8001b5c:	4638      	mov	r0, r7
 8001b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			b|= (1<<(7-a));
 8001b62:	433b      	orrs	r3, r7
 8001b64:	b2df      	uxtb	r7, r3
 8001b66:	e7e0      	b.n	8001b2a <DHT22_Read+0x62>
 8001b68:	200005f4 	.word	0x200005f4
 8001b6c:	200005f0 	.word	0x200005f0
 8001b70:	20000550 	.word	0x20000550

08001b74 <StartSensorTask>:
{
 8001b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b78:	ed2d 8b02 	vpush	{d8}
 8001b7c:	b083      	sub	sp, #12
	float tCelsius = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	4f2a      	ldr	r7, [pc, #168]	@ (8001c2c <StartSensorTask+0xb8>)
 8001b82:	4e2b      	ldr	r6, [pc, #172]	@ (8001c30 <StartSensorTask+0xbc>)
 8001b84:	9300      	str	r3, [sp, #0]
	float RH = 0;
 8001b86:	9301      	str	r3, [sp, #4]
				RH = (float) ((RH1<<8)|RH2)/10;
 8001b88:	eeb2 8a04 	vmov.f32	s16, #36	@ 0x41200000  10.0
 8001b8c:	e002      	b.n	8001b94 <StartSensorTask+0x20>
		osDelay(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f002 f8c0 	bl	8003d14 <osDelay>
		if(DHT22_Start())
 8001b94:	f7ff ff2a 	bl	80019ec <DHT22_Start>
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d0f8      	beq.n	8001b8e <StartSensorTask+0x1a>
			RH1 = DHT22_Read(); // First 8bits of humidity
 8001b9c:	f7ff ff94 	bl	8001ac8 <DHT22_Read>
 8001ba0:	4680      	mov	r8, r0
			RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 8001ba2:	f7ff ff91 	bl	8001ac8 <DHT22_Read>
 8001ba6:	4604      	mov	r4, r0
			TC1 = DHT22_Read(); // First 8bits of Celsius
 8001ba8:	f7ff ff8e 	bl	8001ac8 <DHT22_Read>
 8001bac:	4681      	mov	r9, r0
			TC2 = DHT22_Read(); // Second 8bits of Celsius
 8001bae:	f7ff ff8b 	bl	8001ac8 <DHT22_Read>
 8001bb2:	4605      	mov	r5, r0
			SUM = DHT22_Read(); // Check sum
 8001bb4:	f7ff ff88 	bl	8001ac8 <DHT22_Read>
			CHECK = RH1 + RH2 + TC1 + TC2;
 8001bb8:	eb08 0304 	add.w	r3, r8, r4
 8001bbc:	444b      	add	r3, r9
 8001bbe:	442b      	add	r3, r5
			if (CHECK == SUM)
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4298      	cmp	r0, r3
 8001bc4:	d1e3      	bne.n	8001b8e <StartSensorTask+0x1a>
				if (TC1>127) // If TC1=10000000, negative temperature
 8001bc6:	f019 0f80 	tst.w	r9, #128	@ 0x80
					tCelsius = (float)((TC1<<8)|TC2)/10;
 8001bca:	ea45 2309 	orr.w	r3, r5, r9, lsl #8
				if (TC1>127) // If TC1=10000000, negative temperature
 8001bce:	d124      	bne.n	8001c1a <StartSensorTask+0xa6>
					tCelsius = (float)((TC1<<8)|TC2)/10;
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd8:	ee87 7a88 	vdiv.f32	s14, s15, s16
				RH = (float) ((RH1<<8)|RH2)/10;
 8001bdc:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
				xQueueSend(myQueueTempHandle, &tCelsius, portMAX_DELAY);
 8001be0:	4669      	mov	r1, sp
 8001be2:	6838      	ldr	r0, [r7, #0]
 8001be4:	2300      	movs	r3, #0
 8001be6:	f04f 32ff 	mov.w	r2, #4294967295
				RH = (float) ((RH1<<8)|RH2)/10;
 8001bea:	ee07 4a90 	vmov	s15, r4
 8001bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf2:	ed8d 7a00 	vstr	s14, [sp]
 8001bf6:	eec7 6a88 	vdiv.f32	s13, s15, s16
 8001bfa:	edcd 6a01 	vstr	s13, [sp, #4]
				xQueueSend(myQueueTempHandle, &tCelsius, portMAX_DELAY);
 8001bfe:	f002 fa85 	bl	800410c <xQueueGenericSend>
				xQueueSend(myQueueHumHandle, &RH, portMAX_DELAY);
 8001c02:	6830      	ldr	r0, [r6, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0a:	a901      	add	r1, sp, #4
 8001c0c:	f002 fa7e 	bl	800410c <xQueueGenericSend>
				osDelay(3000);
 8001c10:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001c14:	f002 f87e 	bl	8003d14 <osDelay>
 8001c18:	e7b9      	b.n	8001b8e <StartSensorTask+0x1a>
					tCelsius = (float)TC2/10*(-1);
 8001c1a:	ee07 5a90 	vmov	s15, r5
 8001c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c22:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8001c26:	eeb1 7a47 	vneg.f32	s14, s14
 8001c2a:	e7d7      	b.n	8001bdc <StartSensorTask+0x68>
 8001c2c:	200004b4 	.word	0x200004b4
 8001c30:	200004b0 	.word	0x200004b0

08001c34 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM16) {
 8001c34:	4b03      	ldr	r3, [pc, #12]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d000      	beq.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001c3c:	4770      	bx	lr
		HAL_IncTick();
 8001c3e:	f000 b9d9 	b.w	8001ff4 <HAL_IncTick>
 8001c42:	bf00      	nop
 8001c44:	40014400 	.word	0x40014400

08001c48 <Error_Handler>:
 8001c48:	b672      	cpsid	i
	while (1)
 8001c4a:	e7fe      	b.n	8001c4a <Error_Handler+0x2>

08001c4c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_MspInit+0x3c>)
{
 8001c4e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c50:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8001c52:	f040 0001 	orr.w	r0, r0, #1
 8001c56:	6618      	str	r0, [r3, #96]	@ 0x60
 8001c58:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
{
 8001c5a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5c:	f004 0401 	and.w	r4, r4, #1
 8001c60:	9400      	str	r4, [sp, #0]
 8001c62:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8001c66:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 8001c6a:	659c      	str	r4, [r3, #88]	@ 0x58
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	210f      	movs	r1, #15
 8001c7a:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	b003      	add	sp, #12
 8001c80:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c84:	f000 b9da 	b.w	800203c <HAL_NVIC_SetPriority>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	00000000 	.word	0x00000000

08001c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c90:	b510      	push	{r4, lr}
 8001c92:	4604      	mov	r4, r0
 8001c94:	b094      	sub	sp, #80	@ 0x50
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c98:	2234      	movs	r2, #52	@ 0x34
 8001c9a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001ca0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001ca4:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca6:	f006 fba0 	bl	80083ea <memset>
  if(hi2c->Instance==I2C1)
 8001caa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_I2C_MspInit+0x88>)
 8001cac:	6822      	ldr	r2, [r4, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_MspInit+0x26>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cb2:	b014      	add	sp, #80	@ 0x50
 8001cb4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cb6:	2340      	movs	r3, #64	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb8:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cba:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbc:	f001 fad2 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8001cc0:	bb18      	cbnz	r0, 8001d0a <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	4c16      	ldr	r4, [pc, #88]	@ (8001d1c <HAL_I2C_MspInit+0x8c>)
 8001cc4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001ccc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cce:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8001d10 <HAL_I2C_MspInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd8:	2304      	movs	r3, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cdc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	a902      	add	r1, sp, #8
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ce8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cec:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f000 f9ee 	bl	80020d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001cf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cfa:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001cfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001cfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	9b01      	ldr	r3, [sp, #4]
}
 8001d06:	b014      	add	sp, #80	@ 0x50
 8001d08:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001d0a:	f7ff ff9d 	bl	8001c48 <Error_Handler>
 8001d0e:	e7d8      	b.n	8001cc2 <HAL_I2C_MspInit+0x32>
 8001d10:	00000600 	.word	0x00000600
 8001d14:	00000012 	.word	0x00000012
 8001d18:	40005400 	.word	0x40005400
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8001d20:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_TIM_Base_MspInit+0x28>)
 8001d22:	6802      	ldr	r2, [r0, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d000      	beq.n	8001d2a <HAL_TIM_Base_MspInit+0xa>
 8001d28:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d2a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 8001d2e:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d32:	f042 0210 	orr.w	r2, r2, #16
 8001d36:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001d42:	b002      	add	sp, #8
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40001000 	.word	0x40001000

08001d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d4c:	b530      	push	{r4, r5, lr}
 8001d4e:	4604      	mov	r4, r0
 8001d50:	b095      	sub	sp, #84	@ 0x54
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d54:	2234      	movs	r2, #52	@ 0x34
 8001d56:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001d5c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001d60:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d62:	f006 fb42 	bl	80083ea <memset>
  if(huart->Instance==USART2)
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <HAL_UART_MspInit+0xa0>)
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d6e:	b015      	add	sp, #84	@ 0x54
 8001d70:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d72:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d74:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d76:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d78:	f001 fa74 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d131      	bne.n	8001de4 <HAL_UART_MspInit+0x98>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d80:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <HAL_UART_MspInit+0xa4>)
 8001d82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d84:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001d88:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d8c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001d90:	9200      	str	r2, [sp, #0]
 8001d92:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d9e:	2004      	movs	r0, #4
 8001da0:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001dac:	2400      	movs	r4, #0
 8001dae:	2503      	movs	r5, #3
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001db0:	a902      	add	r1, sp, #8
 8001db2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db6:	2307      	movs	r3, #7
 8001db8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001dba:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f000 f986 	bl	80020d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001dc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001dce:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001dd0:	2303      	movs	r3, #3
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001dd6:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001dda:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f000 f978 	bl	80020d0 <HAL_GPIO_Init>
}
 8001de0:	b015      	add	sp, #84	@ 0x54
 8001de2:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001de4:	f7ff ff30 	bl	8001c48 <Error_Handler>
 8001de8:	e7ca      	b.n	8001d80 <HAL_UART_MspInit+0x34>
 8001dea:	bf00      	nop
 8001dec:	40004400 	.word	0x40004400
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001df4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <HAL_InitTick+0x80>)
{
 8001df6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001df8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001dfa:	4c1f      	ldr	r4, [pc, #124]	@ (8001e78 <HAL_InitTick+0x84>)
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001dfc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001e00:	661a      	str	r2, [r3, #96]	@ 0x60
 8001e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
{
 8001e04:	b088      	sub	sp, #32
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e0a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001e0c:	9302      	str	r3, [sp, #8]
{
 8001e0e:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e10:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001e12:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e14:	f001 fa04 	bl	8003220 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e18:	f001 f9f0 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e1c:	4a17      	ldr	r2, [pc, #92]	@ (8001e7c <HAL_InitTick+0x88>)
  htim16.Instance = TIM16;
 8001e1e:	4918      	ldr	r1, [pc, #96]	@ (8001e80 <HAL_InitTick+0x8c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e20:	fba2 2300 	umull	r2, r3, r2, r0
 8001e24:	0c9b      	lsrs	r3, r3, #18
 8001e26:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
  htim16.Init.Prescaler = uwPrescalerValue;
  htim16.Init.ClockDivision = 0;
 8001e28:	2200      	movs	r2, #0
  htim16.Init.Prescaler = uwPrescalerValue;
 8001e2a:	e9c4 1300 	strd	r1, r3, [r4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim16);
 8001e2e:	4620      	mov	r0, r4
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001e30:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim16.Init.ClockDivision = 0;
 8001e34:	6122      	str	r2, [r4, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e36:	60a2      	str	r2, [r4, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	61a2      	str	r2, [r4, #24]
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001e3a:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim16);
 8001e3c:	f001 fc72 	bl	8003724 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001e40:	4605      	mov	r5, r0
 8001e42:	b110      	cbz	r0, 8001e4a <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8001e44:	4628      	mov	r0, r5
 8001e46:	b008      	add	sp, #32
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f001 fb3e 	bl	80034cc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001e50:	4605      	mov	r5, r0
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d1f6      	bne.n	8001e44 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e56:	2019      	movs	r0, #25
 8001e58:	f000 f92c 	bl	80020b4 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5c:	2e0f      	cmp	r6, #15
 8001e5e:	d901      	bls.n	8001e64 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 8001e60:	2501      	movs	r5, #1
 8001e62:	e7ef      	b.n	8001e44 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001e64:	462a      	mov	r2, r5
 8001e66:	4631      	mov	r1, r6
 8001e68:	2019      	movs	r0, #25
 8001e6a:	f000 f8e7 	bl	800203c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e6e:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <HAL_InitTick+0x90>)
 8001e70:	601e      	str	r6, [r3, #0]
 8001e72:	e7e7      	b.n	8001e44 <HAL_InitTick+0x50>
 8001e74:	40021000 	.word	0x40021000
 8001e78:	20000c3c 	.word	0x20000c3c
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	40014400 	.word	0x40014400
 8001e84:	20000008 	.word	0x20000008

08001e88 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e88:	e7fe      	b.n	8001e88 <NMI_Handler>
 8001e8a:	bf00      	nop

08001e8c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <HardFault_Handler>
 8001e8e:	bf00      	nop

08001e90 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <MemManage_Handler>
 8001e92:	bf00      	nop

08001e94 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <BusFault_Handler>
 8001e96:	bf00      	nop

08001e98 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <UsageFault_Handler>
 8001e9a:	bf00      	nop

08001e9c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f000 ba0d 	b.w	80022c0 <HAL_GPIO_EXTI_IRQHandler>
 8001ea6:	bf00      	nop

08001ea8 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001ea8:	4801      	ldr	r0, [pc, #4]	@ (8001eb0 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001eaa:	f001 bb43 	b.w	8003534 <HAL_TIM_IRQHandler>
 8001eae:	bf00      	nop
 8001eb0:	20000c3c 	.word	0x20000c3c

08001eb4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	4770      	bx	lr

08001eb8 <_kill>:

int _kill(int pid, int sig)
{
 8001eb8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eba:	f006 fb3f 	bl	800853c <__errno>
 8001ebe:	2316      	movs	r3, #22
 8001ec0:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec6:	bd08      	pop	{r3, pc}

08001ec8 <_exit>:

void _exit (int status)
{
 8001ec8:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001eca:	f006 fb37 	bl	800853c <__errno>
 8001ece:	2316      	movs	r3, #22
 8001ed0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001ed2:	e7fe      	b.n	8001ed2 <_exit+0xa>

08001ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	1e16      	subs	r6, r2, #0
 8001ed8:	dd07      	ble.n	8001eea <_read+0x16>
 8001eda:	460c      	mov	r4, r1
 8001edc:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001ede:	f3af 8000 	nop.w
 8001ee2:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	42a5      	cmp	r5, r4
 8001ee8:	d1f9      	bne.n	8001ede <_read+0xa>
  }

  return len;
}
 8001eea:	4630      	mov	r0, r6
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
 8001eee:	bf00      	nop

08001ef0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	1e16      	subs	r6, r2, #0
 8001ef4:	dd07      	ble.n	8001f06 <_write+0x16>
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001efa:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001efe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	42a5      	cmp	r5, r4
 8001f04:	d1f9      	bne.n	8001efa <_write+0xa>
  }
  return len;
}
 8001f06:	4630      	mov	r0, r6
 8001f08:	bd70      	pop	{r4, r5, r6, pc}
 8001f0a:	bf00      	nop

08001f0c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001f14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f18:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001f20:	2001      	movs	r0, #1
 8001f22:	4770      	bx	lr

08001f24 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001f24:	2000      	movs	r0, #0
 8001f26:	4770      	bx	lr

08001f28 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	490c      	ldr	r1, [pc, #48]	@ (8001f5c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001f2c:	680b      	ldr	r3, [r1, #0]
{
 8001f2e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4c0c      	ldr	r4, [pc, #48]	@ (8001f64 <_sbrk+0x3c>)
 8001f32:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001f34:	b12b      	cbz	r3, 8001f42 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4418      	add	r0, r3
 8001f38:	4290      	cmp	r0, r2
 8001f3a:	d807      	bhi.n	8001f4c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f3c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <_sbrk+0x40>)
 8001f44:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4418      	add	r0, r3
 8001f48:	4290      	cmp	r0, r2
 8001f4a:	d9f7      	bls.n	8001f3c <_sbrk+0x14>
    errno = ENOMEM;
 8001f4c:	f006 faf6 	bl	800853c <__errno>
 8001f50:	230c      	movs	r3, #12
 8001f52:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd10      	pop	{r4, pc}
 8001f5c:	20000c88 	.word	0x20000c88
 8001f60:	20008000 	.word	0x20008000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	20005d98 	.word	0x20005d98

08001f6c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f6c:	4a03      	ldr	r2, [pc, #12]	@ (8001f7c <SystemInit+0x10>)
 8001f6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001f72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f84:	f7ff fff2 	bl	8001f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8a:	490d      	ldr	r1, [pc, #52]	@ (8001fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <LoopForever+0xe>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fcc <LoopForever+0x16>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fae:	f006 facb 	bl	8008548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb2:	f7ff fbdd 	bl	8001770 <main>

08001fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fb8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001fc4:	0800c3b0 	.word	0x0800c3b0
  ldr r2, =_sbss
 8001fc8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001fcc:	20005d98 	.word	0x20005d98

08001fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC1_2_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	f000 f81e 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fdc:	200f      	movs	r0, #15
 8001fde:	f7ff ff09 	bl	8001df4 <HAL_InitTick>
 8001fe2:	b110      	cbz	r0, 8001fea <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8001fe4:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	bd10      	pop	{r4, pc}
 8001fea:	4604      	mov	r4, r0
    HAL_MspInit();
 8001fec:	f7ff fe2e 	bl	8001c4c <HAL_MspInit>
}
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	bd10      	pop	{r4, pc}

08001ff4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001ff4:	4a03      	ldr	r2, [pc, #12]	@ (8002004 <HAL_IncTick+0x10>)
 8001ff6:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <HAL_IncTick+0x14>)
 8001ff8:	6811      	ldr	r1, [r2, #0]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	440b      	add	r3, r1
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000c8c 	.word	0x20000c8c
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800200c:	4b01      	ldr	r3, [pc, #4]	@ (8002014 <HAL_GetTick+0x8>)
 800200e:	6818      	ldr	r0, [r3, #0]
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000c8c 	.word	0x20000c8c

08002018 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800201a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002022:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800202e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002032:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_NVIC_SetPriority+0x70>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002046:	f1c3 0e07 	rsb	lr, r3, #7
 800204a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002052:	bf28      	it	cs
 8002054:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002058:	f1bc 0f06 	cmp.w	ip, #6
 800205c:	d91c      	bls.n	8002098 <HAL_NVIC_SetPriority+0x5c>
 800205e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	fa03 f30c 	lsl.w	r3, r3, ip
 800206a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	fa03 f30e 	lsl.w	r3, r3, lr
 8002076:	ea21 0303 	bic.w	r3, r1, r3
 800207a:	fa03 f30c 	lsl.w	r3, r3, ip
 800207e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002082:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002086:	db0a      	blt.n	800209e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800208c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002090:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002094:	f85d fb04 	ldr.w	pc, [sp], #4
 8002098:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	4694      	mov	ip, r2
 800209c:	e7e7      	b.n	800206e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <HAL_NVIC_SetPriority+0x74>)
 80020a0:	f000 000f 	and.w	r0, r0, #15
 80020a4:	4402      	add	r2, r0
 80020a6:	7613      	strb	r3, [r2, #24]
 80020a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80020ac:	e000ed00 	.word	0xe000ed00
 80020b0:	e000ecfc 	.word	0xe000ecfc

080020b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020b4:	2800      	cmp	r0, #0
 80020b6:	db07      	blt.n	80020c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b8:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <HAL_NVIC_EnableIRQ+0x18>)
 80020ba:	0941      	lsrs	r1, r0, #5
 80020bc:	2301      	movs	r3, #1
 80020be:	f000 001f 	and.w	r0, r0, #31
 80020c2:	4083      	lsls	r3, r0
 80020c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d4:	680c      	ldr	r4, [r1, #0]
{
 80020d6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d8:	2c00      	cmp	r4, #0
 80020da:	f000 80bd 	beq.w	8002258 <HAL_GPIO_Init+0x188>
  uint32_t position = 0x00u;
 80020de:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e0:	f04f 0b01 	mov.w	fp, #1
 80020e4:	e066      	b.n	80021b4 <HAL_GPIO_Init+0xe4>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e6:	2a03      	cmp	r2, #3
 80020e8:	f040 80b9 	bne.w	800225e <HAL_GPIO_Init+0x18e>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ec:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 80020f0:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020f4:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f8:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020fa:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80020fe:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002100:	d054      	beq.n	80021ac <HAL_GPIO_Init+0xdc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	4f64      	ldr	r7, [pc, #400]	@ (8002294 <HAL_GPIO_Init+0x1c4>)
 8002104:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	663a      	str	r2, [r7, #96]	@ 0x60
 800210c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800210e:	f002 0201 	and.w	r2, r2, #1
 8002112:	9203      	str	r2, [sp, #12]
 8002114:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800211e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002122:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002126:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002128:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800212c:	260f      	movs	r6, #15
 800212e:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002132:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002136:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800213a:	d013      	beq.n	8002164 <HAL_GPIO_Init+0x94>
 800213c:	4e56      	ldr	r6, [pc, #344]	@ (8002298 <HAL_GPIO_Init+0x1c8>)
 800213e:	42b0      	cmp	r0, r6
 8002140:	f000 8099 	beq.w	8002276 <HAL_GPIO_Init+0x1a6>
 8002144:	4e55      	ldr	r6, [pc, #340]	@ (800229c <HAL_GPIO_Init+0x1cc>)
 8002146:	42b0      	cmp	r0, r6
 8002148:	f000 809c 	beq.w	8002284 <HAL_GPIO_Init+0x1b4>
 800214c:	f8df e154 	ldr.w	lr, [pc, #340]	@ 80022a4 <HAL_GPIO_Init+0x1d4>
 8002150:	4570      	cmp	r0, lr
 8002152:	bf0c      	ite	eq
 8002154:	f04f 0e03 	moveq.w	lr, #3
 8002158:	f04f 0e07 	movne.w	lr, #7
 800215c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002160:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002164:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002166:	4a4e      	ldr	r2, [pc, #312]	@ (80022a0 <HAL_GPIO_Init+0x1d0>)
 8002168:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800216a:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800216c:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002170:	4e4b      	ldr	r6, [pc, #300]	@ (80022a0 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 8002172:	bf54      	ite	pl
 8002174:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002176:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 800217a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800217c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800217e:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002180:	4e47      	ldr	r6, [pc, #284]	@ (80022a0 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 8002182:	bf54      	ite	pl
 8002184:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002186:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 800218a:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800218c:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800218e:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002190:	4e43      	ldr	r6, [pc, #268]	@ (80022a0 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 8002192:	bf54      	ite	pl
 8002194:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002196:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 800219a:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 800219c:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800219e:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80021a0:	4d3f      	ldr	r5, [pc, #252]	@ (80022a0 <HAL_GPIO_Init+0x1d0>)
        temp &= ~(iocurrent);
 80021a2:	bf54      	ite	pl
 80021a4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80021a6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80021aa:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80021ac:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	fa34 f203 	lsrs.w	r2, r4, r3
 80021b2:	d051      	beq.n	8002258 <HAL_GPIO_Init+0x188>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b4:	fa0b fe03 	lsl.w	lr, fp, r3
    if (iocurrent != 0x00u)
 80021b8:	ea1e 0a04 	ands.w	sl, lr, r4
 80021bc:	d0f6      	beq.n	80021ac <HAL_GPIO_Init+0xdc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021be:	684d      	ldr	r5, [r1, #4]
 80021c0:	f005 0203 	and.w	r2, r5, #3
 80021c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021c8:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ca:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ce:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d2:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021d6:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021da:	d884      	bhi.n	80020e6 <HAL_GPIO_Init+0x16>
        temp = GPIOx->OSPEEDR;
 80021dc:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e0:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021e2:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e6:	fa06 f80c 	lsl.w	r8, r6, ip
 80021ea:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80021ee:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80021f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f6:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f8:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8002200:	fa0e fe03 	lsl.w	lr, lr, r3
 8002204:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8002208:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800220c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002214:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002218:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800221e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	f47f af63 	bne.w	80020ec <HAL_GPIO_Init+0x1c>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002226:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8002228:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800222c:	f003 0e07 	and.w	lr, r3, #7
 8002230:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002234:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002238:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 800223c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002240:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002242:	260f      	movs	r6, #15
 8002244:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002248:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800224a:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800224e:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8002252:	f8c8 e020 	str.w	lr, [r8, #32]
 8002256:	e749      	b.n	80020ec <HAL_GPIO_Init+0x1c>
  }
}
 8002258:	b005      	add	sp, #20
 800225a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->PUPDR;
 800225e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002262:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002264:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	fa06 fe0c 	lsl.w	lr, r6, ip
 800226c:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8002270:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002274:	e73a      	b.n	80020ec <HAL_GPIO_Init+0x1c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002276:	f04f 0e01 	mov.w	lr, #1
 800227a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800227e:	ea47 070c 	orr.w	r7, r7, ip
 8002282:	e76f      	b.n	8002164 <HAL_GPIO_Init+0x94>
 8002284:	f04f 0e02 	mov.w	lr, #2
 8002288:	fa0e fc0c 	lsl.w	ip, lr, ip
 800228c:	ea47 070c 	orr.w	r7, r7, ip
 8002290:	e768      	b.n	8002164 <HAL_GPIO_Init+0x94>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	48000400 	.word	0x48000400
 800229c:	48000800 	.word	0x48000800
 80022a0:	40010400 	.word	0x40010400
 80022a4:	48000c00 	.word	0x48000c00

080022a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022a8:	6903      	ldr	r3, [r0, #16]
 80022aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80022ac:	bf14      	ite	ne
 80022ae:	2001      	movne	r0, #1
 80022b0:	2000      	moveq	r0, #0
 80022b2:	4770      	bx	lr

080022b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	b10a      	cbz	r2, 80022ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022b6:	6181      	str	r1, [r0, #24]
 80022b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ba:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop

080022c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80022c2:	6951      	ldr	r1, [r2, #20]
 80022c4:	4201      	tst	r1, r0
 80022c6:	d100      	bne.n	80022ca <HAL_GPIO_EXTI_IRQHandler+0xa>
 80022c8:	4770      	bx	lr
{
 80022ca:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022cc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022ce:	f7ff fb85 	bl	80019dc <HAL_GPIO_EXTI_Callback>
  }
}
 80022d2:	bd08      	pop	{r3, pc}
 80022d4:	40010400 	.word	0x40010400

080022d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t itflag   = hi2c->Instance->ISR;
 80022da:	6803      	ldr	r3, [r0, #0]
{
 80022dc:	4605      	mov	r5, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80022de:	6998      	ldr	r0, [r3, #24]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022e0:	f010 0c10 	ands.w	ip, r0, #16
 80022e4:	d041      	beq.n	800236a <I2C_IsErrorOccurred+0x92>
 80022e6:	4616      	mov	r6, r2
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e8:	2210      	movs	r2, #16
 80022ea:	460f      	mov	r7, r1
 80022ec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ee:	699c      	ldr	r4, [r3, #24]
 80022f0:	f014 0420 	ands.w	r4, r4, #32
 80022f4:	d176      	bne.n	80023e4 <I2C_IsErrorOccurred+0x10c>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022f6:	1c7a      	adds	r2, r7, #1
 80022f8:	d14d      	bne.n	8002396 <I2C_IsErrorOccurred+0xbe>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	0696      	lsls	r6, r2, #26
 80022fe:	d5fc      	bpl.n	80022fa <I2C_IsErrorOccurred+0x22>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002300:	2220      	movs	r2, #32
 8002302:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002304:	699a      	ldr	r2, [r3, #24]
    error_code |= HAL_I2C_ERROR_AF;
 8002306:	f044 0c04 	orr.w	ip, r4, #4

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800230a:	05d4      	lsls	r4, r2, #23
    status = HAL_ERROR;
 800230c:	f04f 0001 	mov.w	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002310:	d42f      	bmi.n	8002372 <I2C_IsErrorOccurred+0x9a>

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002312:	0557      	lsls	r7, r2, #21
 8002314:	d53a      	bpl.n	800238c <I2C_IsErrorOccurred+0xb4>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002316:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800231a:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800231c:	f04c 0c08 	orr.w	ip, ip, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002320:	0596      	lsls	r6, r2, #22
 8002322:	d504      	bpl.n	800232e <I2C_IsErrorOccurred+0x56>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002324:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002328:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800232c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002332:	bf44      	itt	mi
 8002334:	2200      	movmi	r2, #0
 8002336:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	07d2      	lsls	r2, r2, #31
 800233c:	d403      	bmi.n	8002346 <I2C_IsErrorOccurred+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4927      	ldr	r1, [pc, #156]	@ (80023e8 <I2C_IsErrorOccurred+0x110>)
 800234a:	400a      	ands	r2, r1
 800234c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800234e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002350:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8002352:	ea43 030c 	orr.w	r3, r3, ip
    hi2c->State = HAL_I2C_STATE_READY;
 8002356:	2120      	movs	r1, #32
    hi2c->ErrorCode |= error_code;
 8002358:	646b      	str	r3, [r5, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235a:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002362:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002366:	2001      	movs	r0, #1
  }

  return status;
}
 8002368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  itflag = hi2c->Instance->ISR;
 800236a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800236c:	05d4      	lsls	r4, r2, #23
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	4660      	mov	r0, ip
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002370:	d5cf      	bpl.n	8002312 <I2C_IsErrorOccurred+0x3a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002372:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002376:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002378:	0551      	lsls	r1, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800237a:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800237e:	d5cf      	bpl.n	8002320 <I2C_IsErrorOccurred+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002380:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002384:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002386:	f04c 0c08 	orr.w	ip, ip, #8
 800238a:	e7c9      	b.n	8002320 <I2C_IsErrorOccurred+0x48>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800238c:	0594      	lsls	r4, r2, #22
 800238e:	d4c9      	bmi.n	8002324 <I2C_IsErrorOccurred+0x4c>
  if (status != HAL_OK)
 8002390:	2800      	cmp	r0, #0
 8002392:	d1cc      	bne.n	800232e <I2C_IsErrorOccurred+0x56>
}
 8002394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff fe39 	bl	800200c <HAL_GetTick>
 800239a:	1b80      	subs	r0, r0, r6
 800239c:	42b8      	cmp	r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800239e:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023a0:	d801      	bhi.n	80023a6 <I2C_IsErrorOccurred+0xce>
 80023a2:	2f00      	cmp	r7, #0
 80023a4:	d1a3      	bne.n	80022ee <I2C_IsErrorOccurred+0x16>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023a6:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80023a8:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023ac:	6999      	ldr	r1, [r3, #24]
 80023ae:	040c      	lsls	r4, r1, #16
          tmp2 = hi2c->Mode;
 80023b0:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023b2:	d50b      	bpl.n	80023cc <I2C_IsErrorOccurred+0xf4>
 80023b4:	0441      	lsls	r1, r0, #17
 80023b6:	d409      	bmi.n	80023cc <I2C_IsErrorOccurred+0xf4>
              (tmp1 != I2C_CR2_STOP) && \
 80023b8:	2a20      	cmp	r2, #32
 80023ba:	d007      	beq.n	80023cc <I2C_IsErrorOccurred+0xf4>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023c2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80023c4:	f7ff fe22 	bl	800200c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c8:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80023ca:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	0692      	lsls	r2, r2, #26
 80023d0:	d48d      	bmi.n	80022ee <I2C_IsErrorOccurred+0x16>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023d2:	f7ff fe1b 	bl	800200c <HAL_GetTick>
 80023d6:	1b83      	subs	r3, r0, r6
 80023d8:	2b19      	cmp	r3, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023da:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023dc:	d9f6      	bls.n	80023cc <I2C_IsErrorOccurred+0xf4>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	2420      	movs	r4, #32
 80023e2:	e78f      	b.n	8002304 <I2C_IsErrorOccurred+0x2c>
 80023e4:	2400      	movs	r4, #0
 80023e6:	e78b      	b.n	8002300 <I2C_IsErrorOccurred+0x28>
 80023e8:	fe00e800 	.word	0xfe00e800

080023ec <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	6803      	ldr	r3, [r0, #0]
 80023f0:	4604      	mov	r4, r0
 80023f2:	460d      	mov	r5, r1
 80023f4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023f6:	e005      	b.n	8002404 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f8:	f7ff ff6e 	bl	80022d8 <I2C_IsErrorOccurred>
 80023fc:	bb00      	cbnz	r0, 8002440 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 80023fe:	1c6a      	adds	r2, r5, #1
 8002400:	d108      	bne.n	8002414 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8002402:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	079b      	lsls	r3, r3, #30
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002408:	4632      	mov	r2, r6
 800240a:	4629      	mov	r1, r5
 800240c:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800240e:	d5f3      	bpl.n	80023f8 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 8002410:	2000      	movs	r0, #0
}
 8002412:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002414:	f7ff fdfa 	bl	800200c <HAL_GetTick>
 8002418:	1b80      	subs	r0, r0, r6
 800241a:	42a8      	cmp	r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800241c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241e:	d801      	bhi.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 8002420:	2d00      	cmp	r5, #0
 8002422:	d1ef      	bne.n	8002404 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	f012 0202 	ands.w	r2, r2, #2
 800242a:	d1eb      	bne.n	8002404 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800242c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800242e:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002432:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002434:	430b      	orrs	r3, r1
 8002436:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002438:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8002440:	2001      	movs	r0, #1
}
 8002442:	bd70      	pop	{r4, r5, r6, pc}

08002444 <I2C_WaitOnFlagUntilTimeout>:
{
 8002444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800244c:	461e      	mov	r6, r3
 800244e:	4605      	mov	r5, r0
 8002450:	6803      	ldr	r3, [r0, #0]
 8002452:	4688      	mov	r8, r1
 8002454:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002456:	e005      	b.n	8002464 <I2C_WaitOnFlagUntilTimeout+0x20>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002458:	f7ff ff3e 	bl	80022d8 <I2C_IsErrorOccurred>
 800245c:	bb68      	cbnz	r0, 80024ba <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800245e:	1c73      	adds	r3, r6, #1
 8002460:	d10e      	bne.n	8002480 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8002462:	682b      	ldr	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002464:	699c      	ldr	r4, [r3, #24]
 8002466:	ea38 0404 	bics.w	r4, r8, r4
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	42bb      	cmp	r3, r7
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002472:	464a      	mov	r2, r9
 8002474:	4631      	mov	r1, r6
 8002476:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002478:	d0ee      	beq.n	8002458 <I2C_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800247a:	2000      	movs	r0, #0
}
 800247c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002480:	f7ff fdc4 	bl	800200c <HAL_GetTick>
 8002484:	eba0 0009 	sub.w	r0, r0, r9
 8002488:	42b0      	cmp	r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800248a:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248c:	d801      	bhi.n	8002492 <I2C_WaitOnFlagUntilTimeout+0x4e>
 800248e:	2e00      	cmp	r6, #0
 8002490:	d1e8      	bne.n	8002464 <I2C_WaitOnFlagUntilTimeout+0x20>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	ea38 0202 	bics.w	r2, r8, r2
 8002498:	bf0c      	ite	eq
 800249a:	2201      	moveq	r2, #1
 800249c:	2200      	movne	r2, #0
 800249e:	42ba      	cmp	r2, r7
 80024a0:	d1e0      	bne.n	8002464 <I2C_WaitOnFlagUntilTimeout+0x20>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a6:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ac:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80024ae:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b6:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
      return HAL_ERROR;
 80024ba:	2001      	movs	r0, #1
 80024bc:	e7de      	b.n	800247c <I2C_WaitOnFlagUntilTimeout+0x38>
 80024be:	bf00      	nop

080024c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c0:	6803      	ldr	r3, [r0, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	069b      	lsls	r3, r3, #26
 80024c6:	d429      	bmi.n	800251c <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
{
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	4605      	mov	r5, r0
 80024cc:	460c      	mov	r4, r1
 80024ce:	4616      	mov	r6, r2
 80024d0:	e00d      	b.n	80024ee <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d2:	f7ff fd9b 	bl	800200c <HAL_GetTick>
 80024d6:	1b80      	subs	r0, r0, r6
 80024d8:	42a0      	cmp	r0, r4
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024da:	6829      	ldr	r1, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024dc:	d800      	bhi.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
 80024de:	b91c      	cbnz	r4, 80024e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024e0:	698b      	ldr	r3, [r1, #24]
 80024e2:	f013 0320 	ands.w	r3, r3, #32
 80024e6:	d00d      	beq.n	8002504 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e8:	698b      	ldr	r3, [r1, #24]
 80024ea:	069b      	lsls	r3, r3, #26
 80024ec:	d408      	bmi.n	8002500 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ee:	4632      	mov	r2, r6
 80024f0:	4621      	mov	r1, r4
 80024f2:	4628      	mov	r0, r5
 80024f4:	f7ff fef0 	bl	80022d8 <I2C_IsErrorOccurred>
 80024f8:	2800      	cmp	r0, #0
 80024fa:	d0ea      	beq.n	80024d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      return HAL_ERROR;
 80024fc:	2001      	movs	r0, #1
}
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002500:	2000      	movs	r0, #0
}
 8002502:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8002506:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800250a:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250c:	430a      	orrs	r2, r1
 800250e:	646a      	str	r2, [r5, #68]	@ 0x44
      return HAL_ERROR;
 8002510:	2001      	movs	r0, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8002512:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002516:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
        return HAL_ERROR;
 800251a:	e7f0      	b.n	80024fe <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
  return HAL_OK;
 800251c:	2000      	movs	r0, #0
}
 800251e:	4770      	bx	lr

08002520 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002520:	2800      	cmp	r0, #0
 8002522:	d054      	beq.n	80025ce <HAL_I2C_Init+0xae>
{
 8002524:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002526:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800252a:	4604      	mov	r4, r0
 800252c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002530:	2b00      	cmp	r3, #0
 8002532:	d047      	beq.n	80025c4 <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 8002534:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002536:	2224      	movs	r2, #36	@ 0x24
 8002538:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800253c:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800253e:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8002540:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002544:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8002548:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800254a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800254c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800254e:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002550:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002554:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002556:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002558:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255a:	d009      	beq.n	8002570 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800255c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002560:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002562:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002564:	d107      	bne.n	8002576 <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	e006      	b.n	800257e <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002570:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002574:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800257e:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002580:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002582:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8002586:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800258a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800258c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800258e:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002590:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002592:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002594:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002598:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800259c:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800259e:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a0:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025a2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a4:	4301      	orrs	r1, r0
 80025a6:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	f041 0101 	orr.w	r1, r1, #1
 80025ae:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b4:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ba:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 80025c0:	4610      	mov	r0, r2
}
 80025c2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80025c4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80025c8:	f7ff fb62 	bl	8001c90 <HAL_I2C_MspInit>
 80025cc:	e7b2      	b.n	8002534 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80025ce:	2001      	movs	r0, #1
}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop

080025d4 <HAL_I2C_Master_Transmit>:
{
 80025d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025d8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025da:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80025de:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e0:	2b20      	cmp	r3, #32
{
 80025e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e4:	f040 8090 	bne.w	8002708 <HAL_I2C_Master_Transmit+0x134>
    __HAL_LOCK(hi2c);
 80025e8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	4604      	mov	r4, r0
 80025f0:	f000 808a 	beq.w	8002708 <HAL_I2C_Master_Transmit+0x134>
 80025f4:	f04f 0a01 	mov.w	sl, #1
 80025f8:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80025fc:	460f      	mov	r7, r1
 80025fe:	4690      	mov	r8, r2
 8002600:	f7ff fd04 	bl	800200c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002604:	4652      	mov	r2, sl
    tickstart = HAL_GetTick();
 8002606:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002608:	9000      	str	r0, [sp, #0]
 800260a:	2319      	movs	r3, #25
 800260c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff ff17 	bl	8002444 <I2C_WaitOnFlagUntilTimeout>
 8002616:	2800      	cmp	r0, #0
 8002618:	d172      	bne.n	8002700 <HAL_I2C_Master_Transmit+0x12c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800261a:	2321      	movs	r3, #33	@ 0x21
 800261c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002620:	2310      	movs	r3, #16
 8002622:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002626:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8002628:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800262e:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr  = pData;
 8002630:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002634:	b29b      	uxth	r3, r3
 8002636:	2bff      	cmp	r3, #255	@ 0xff
    hi2c->XferISR   = NULL;
 8002638:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800263a:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800263e:	d867      	bhi.n	8002710 <HAL_I2C_Master_Transmit+0x13c>
      hi2c->XferSize = hi2c->XferCount;
 8002640:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002642:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 8002644:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 808d 	bne.w	8002766 <HAL_I2C_Master_Transmit+0x192>
  MODIFY_REG(hi2c->Instance->CR2, \
 800264c:	6853      	ldr	r3, [r2, #4]
 800264e:	494a      	ldr	r1, [pc, #296]	@ (8002778 <HAL_I2C_Master_Transmit+0x1a4>)
 8002650:	400b      	ands	r3, r1
 8002652:	433b      	orrs	r3, r7
 8002654:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002658:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800265c:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 800265e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002662:	462a      	mov	r2, r5
 8002664:	4631      	mov	r1, r6
 8002666:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002668:	2b00      	cmp	r3, #0
 800266a:	d038      	beq.n	80026de <HAL_I2C_Master_Transmit+0x10a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	f7ff febe 	bl	80023ec <I2C_WaitOnTXISFlagUntilTimeout>
 8002670:	2800      	cmp	r0, #0
 8002672:	d145      	bne.n	8002700 <HAL_I2C_Master_Transmit+0x12c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002674:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	f811 2b01 	ldrb.w	r2, [r1], #1
 800267c:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800267e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002680:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002682:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002684:	3b01      	subs	r3, #1
 8002686:	b29b      	uxth	r3, r3
 8002688:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800268a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800268c:	3a01      	subs	r2, #1
 800268e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002690:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002692:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0e2      	beq.n	800265e <HAL_I2C_Master_Transmit+0x8a>
 8002698:	2a00      	cmp	r2, #0
 800269a:	d1e0      	bne.n	800265e <HAL_I2C_Master_Transmit+0x8a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	9500      	str	r5, [sp, #0]
 80026a0:	4633      	mov	r3, r6
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7ff fece 	bl	8002444 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a8:	21ff      	movs	r1, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026aa:	bb48      	cbnz	r0, 8002700 <HAL_I2C_Master_Transmit+0x12c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80026ae:	f8df c0d0 	ldr.w	ip, [pc, #208]	@ 8002780 <HAL_I2C_Master_Transmit+0x1ac>
 80026b2:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	428b      	cmp	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80026b8:	4660      	mov	r0, ip
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ba:	d947      	bls.n	800274c <HAL_I2C_Master_Transmit+0x178>
  MODIFY_REG(hi2c->Instance->CR2, \
 80026bc:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026be:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80026c0:	ea03 030c 	and.w	r3, r3, ip
 80026c4:	433b      	orrs	r3, r7
 80026c6:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ce:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 80026d0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026d2:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	462a      	mov	r2, r5
 80026d6:	4631      	mov	r1, r6
 80026d8:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1c6      	bne.n	800266c <HAL_I2C_Master_Transmit+0x98>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026de:	f7ff feef 	bl	80024c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026e2:	b968      	cbnz	r0, 8002700 <HAL_I2C_Master_Transmit+0x12c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80026e6:	4d25      	ldr	r5, [pc, #148]	@ (800277c <HAL_I2C_Master_Transmit+0x1a8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e8:	2120      	movs	r1, #32
 80026ea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	402a      	ands	r2, r5
 80026f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80026f6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026fa:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80026fe:	e000      	b.n	8002702 <HAL_I2C_Master_Transmit+0x12e>
      return HAL_ERROR;
 8002700:	2001      	movs	r0, #1
}
 8002702:	b002      	add	sp, #8
 8002704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002708:	2002      	movs	r0, #2
}
 800270a:	b002      	add	sp, #8
 800270c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002710:	23ff      	movs	r3, #255	@ 0xff
 8002712:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002714:	21fe      	movs	r1, #254	@ 0xfe
 8002716:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
      xfermode = I2C_RELOAD_MODE;
 800271a:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800271e:	f818 cb01 	ldrb.w	ip, [r8], #1
 8002722:	f8c2 c028 	str.w	ip, [r2, #40]	@ 0x28
      hi2c->XferSize--;
 8002726:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002728:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800272a:	f8df c04c 	ldr.w	ip, [pc, #76]	@ 8002778 <HAL_I2C_Master_Transmit+0x1a4>
      hi2c->pBuffPtr++;
 800272e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002732:	3901      	subs	r1, #1
 8002734:	b289      	uxth	r1, r1
 8002736:	8561      	strh	r1, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002738:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800273a:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800273c:	ea01 010c 	and.w	r1, r1, ip
 8002740:	430b      	orrs	r3, r1
 8002742:	4303      	orrs	r3, r0
 8002744:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002748:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800274a:	e788      	b.n	800265e <HAL_I2C_Master_Transmit+0x8a>
          hi2c->XferSize = hi2c->XferCount;
 800274c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800274e:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002750:	b29b      	uxth	r3, r3
 8002752:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002754:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002756:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800275a:	4001      	ands	r1, r0
 800275c:	430b      	orrs	r3, r1
 800275e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002762:	6053      	str	r3, [r2, #4]
}
 8002764:	e77b      	b.n	800265e <HAL_I2C_Master_Transmit+0x8a>
      hi2c->XferSize--;
 8002766:	3b01      	subs	r3, #1
 8002768:	b299      	uxth	r1, r3
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800276a:	1c4b      	adds	r3, r1, #1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800276c:	b2db      	uxtb	r3, r3
 800276e:	041b      	lsls	r3, r3, #16
      xfermode = I2C_AUTOEND_MODE;
 8002770:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8002774:	e7d3      	b.n	800271e <HAL_I2C_Master_Transmit+0x14a>
 8002776:	bf00      	nop
 8002778:	fc009800 	.word	0xfc009800
 800277c:	fe00e800 	.word	0xfe00e800
 8002780:	fc009c00 	.word	0xfc009c00

08002784 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002784:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002788:	2a20      	cmp	r2, #32
 800278a:	d123      	bne.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800278c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002790:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002794:	2a01      	cmp	r2, #1
 8002796:	4603      	mov	r3, r0
 8002798:	d01c      	beq.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	2024      	movs	r0, #36	@ 0x24
{
 800279e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a0:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 80027a4:	6810      	ldr	r0, [r2, #0]
 80027a6:	f020 0001 	bic.w	r0, r0, #1
 80027aa:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027ac:	6810      	ldr	r0, [r2, #0]
 80027ae:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80027b2:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027b4:	6810      	ldr	r0, [r2, #0]
 80027b6:	4301      	orrs	r1, r0
 80027b8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ba:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 80027c0:	f041 0101 	orr.w	r1, r1, #1
 80027c4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80027ca:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 80027ce:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 80027d0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80027d4:	2002      	movs	r0, #2
}
 80027d6:	4770      	bx	lr

080027d8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80027dc:	2a20      	cmp	r2, #32
 80027de:	d122      	bne.n	8002826 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 80027e0:	b500      	push	{lr}
 80027e2:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e6:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80027ea:	2a01      	cmp	r2, #1
 80027ec:	4603      	mov	r3, r0
 80027ee:	d01c      	beq.n	800282a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027f0:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f2:	2024      	movs	r0, #36	@ 0x24
 80027f4:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 80027f8:	6810      	ldr	r0, [r2, #0]
 80027fa:	f020 0001 	bic.w	r0, r0, #1
 80027fe:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002800:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002802:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002806:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800280a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800280c:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280e:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8002812:	f041 0101 	orr.w	r1, r1, #1
 8002816:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002818:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800281c:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8002820:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002822:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002826:	2002      	movs	r0, #2
}
 8002828:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800282a:	2002      	movs	r0, #2
}
 800282c:	f85d fb04 	ldr.w	pc, [sp], #4

08002830 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002830:	4a02      	ldr	r2, [pc, #8]	@ (800283c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002832:	6813      	ldr	r3, [r2, #0]
 8002834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002838:	6013      	str	r3, [r2, #0]
}
 800283a:	4770      	bx	lr
 800283c:	40007000 	.word	0x40007000

08002840 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002840:	4b02      	ldr	r3, [pc, #8]	@ (800284c <HAL_PWREx_GetVoltageRange+0xc>)
 8002842:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002844:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40007000 	.word	0x40007000

08002850 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002850:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002854:	d00e      	beq.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002856:	4a1b      	ldr	r2, [pc, #108]	@ (80028c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002858:	6813      	ldr	r3, [r2, #0]
 800285a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002862:	d005      	beq.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002864:	6813      	ldr	r3, [r2, #0]
 8002866:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800286a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800286e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002870:	2000      	movs	r0, #0
 8002872:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002874:	4913      	ldr	r1, [pc, #76]	@ (80028c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002876:	680b      	ldr	r3, [r1, #0]
 8002878:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800287c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002880:	d0f6      	beq.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002882:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002884:	4a10      	ldr	r2, [pc, #64]	@ (80028c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002886:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800288a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800288e:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	4a0e      	ldr	r2, [pc, #56]	@ (80028cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002894:	2032      	movs	r0, #50	@ 0x32
 8002896:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800289a:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a2:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028a4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a8:	d506      	bpl.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x68>
 80028aa:	e000      	b.n	80028ae <HAL_PWREx_ControlVoltageScaling+0x5e>
 80028ac:	b123      	cbz	r3, 80028b8 <HAL_PWREx_ControlVoltageScaling+0x68>
 80028ae:	694a      	ldr	r2, [r1, #20]
 80028b0:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 80028b2:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028b6:	d4f9      	bmi.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b8:	4b02      	ldr	r3, [pc, #8]	@ (80028c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	055b      	lsls	r3, r3, #21
 80028be:	d5d7      	bpl.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 80028c0:	2003      	movs	r0, #3
}
 80028c2:	4770      	bx	lr
 80028c4:	40007000 	.word	0x40007000
 80028c8:	20000000 	.word	0x20000000
 80028cc:	431bde83 	.word	0x431bde83

080028d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028d0:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028d2:	4d20      	ldr	r5, [pc, #128]	@ (8002954 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 80028d4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80028d6:	00db      	lsls	r3, r3, #3
{
 80028d8:	b083      	sub	sp, #12
 80028da:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028dc:	d51a      	bpl.n	8002914 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028de:	f7ff ffaf 	bl	8002840 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80028e6:	d027      	beq.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028e8:	2c80      	cmp	r4, #128	@ 0x80
 80028ea:	d82c      	bhi.n	8002946 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028ec:	d02f      	beq.n	800294e <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028ee:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 80028f2:	fab4 f484 	clz	r4, r4
 80028f6:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028f8:	4917      	ldr	r1, [pc, #92]	@ (8002958 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80028fa:	680b      	ldr	r3, [r1, #0]
 80028fc:	f023 0307 	bic.w	r3, r3, #7
 8002900:	4323      	orrs	r3, r4
 8002902:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002904:	6808      	ldr	r0, [r1, #0]
 8002906:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800290a:	1b00      	subs	r0, r0, r4
 800290c:	bf18      	it	ne
 800290e:	2001      	movne	r0, #1
 8002910:	b003      	add	sp, #12
 8002912:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002914:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800291c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800291e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002926:	f7ff ff8b 	bl	8002840 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800292c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002934:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002936:	d1d7      	bne.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002938:	2c80      	cmp	r4, #128	@ 0x80
 800293a:	d906      	bls.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800293c:	2ca1      	cmp	r4, #161	@ 0xa1
 800293e:	bf34      	ite	cc
 8002940:	2401      	movcc	r4, #1
 8002942:	2402      	movcs	r4, #2
 8002944:	e7d8      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002946:	2403      	movs	r4, #3
 8002948:	e7d6      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800294a:	2400      	movs	r4, #0
 800294c:	e7d4      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800294e:	2402      	movs	r4, #2
 8002950:	e7d2      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	40022000 	.word	0x40022000

0800295c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295c:	4a28      	ldr	r2, [pc, #160]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 800295e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002960:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002962:	f013 030c 	ands.w	r3, r3, #12
 8002966:	d005      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x18>
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d035      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800296c:	2b04      	cmp	r3, #4
 800296e:	d141      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8002970:	4824      	ldr	r0, [pc, #144]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002972:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002974:	4a22      	ldr	r2, [pc, #136]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002976:	6811      	ldr	r1, [r2, #0]
 8002978:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800297a:	bf54      	ite	pl
 800297c:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002980:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002982:	4921      	ldr	r1, [pc, #132]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002984:	bf54      	ite	pl
 8002986:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800298a:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800298e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002992:	b303      	cbz	r3, 80029d6 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d11d      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d025      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x94>
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	bf08      	it	eq
 80029aa:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029ac:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029ae:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029b0:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029b8:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029bc:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029c0:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029c2:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c6:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029c8:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029ca:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80029ce:	fbb2 f0f3 	udiv	r0, r2, r3
 80029d2:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029d4:	2000      	movs	r0, #0
}
 80029d6:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d8:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029dc:	2a01      	cmp	r2, #1
 80029de:	d0c9      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029e0:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80029e8:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ea:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 80029ee:	d1d9      	bne.n	80029a4 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 80029f0:	4804      	ldr	r0, [pc, #16]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0xa8>)
 80029f2:	e7db      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029f8:	bf18      	it	ne
 80029fa:	2000      	movne	r0, #0
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	00f42400 	.word	0x00f42400
 8002a08:	0800bd3c 	.word	0x0800bd3c
 8002a0c:	007a1200 	.word	0x007a1200

08002a10 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002a10:	2800      	cmp	r0, #0
 8002a12:	f000 821c 	beq.w	8002e4e <HAL_RCC_OscConfig+0x43e>
{
 8002a16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a1a:	4aa3      	ldr	r2, [pc, #652]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a1c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a1e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a20:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a22:	06df      	lsls	r7, r3, #27
{
 8002a24:	b083      	sub	sp, #12
 8002a26:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a28:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a2c:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a30:	d52e      	bpl.n	8002a90 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a32:	2d00      	cmp	r5, #0
 8002a34:	f000 813f 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x2a6>
 8002a38:	2d0c      	cmp	r5, #12
 8002a3a:	f000 8139 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x2a0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a3e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8002a40:	4f99      	ldr	r7, [pc, #612]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 81af 	beq.w	8002da6 <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_MSI_ENABLE();
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002a50:	f7ff fadc 	bl	800200c <HAL_GetTick>
 8002a54:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a56:	e006      	b.n	8002a66 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a58:	f7ff fad8 	bl	800200c <HAL_GetTick>
 8002a5c:	eba0 0008 	sub.w	r0, r0, r8
 8002a60:	2802      	cmp	r0, #2
 8002a62:	f200 81b0 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	079a      	lsls	r2, r3, #30
 8002a6a:	d5f5      	bpl.n	8002a58 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	f043 0308 	orr.w	r3, r3, #8
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002a78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a22      	ldr	r2, [r4, #32]
 8002a84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a8c:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	07d8      	lsls	r0, r3, #31
 8002a92:	f100 80e0 	bmi.w	8002c56 <HAL_RCC_OscConfig+0x246>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	0798      	lsls	r0, r3, #30
 8002a98:	d523      	bpl.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a9a:	2d04      	cmp	r5, #4
 8002a9c:	f000 815f 	beq.w	8002d5e <HAL_RCC_OscConfig+0x34e>
 8002aa0:	2d0c      	cmp	r5, #12
 8002aa2:	f000 8159 	beq.w	8002d58 <HAL_RCC_OscConfig+0x348>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa6:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002aa8:	4e7f      	ldr	r6, [pc, #508]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 81a6 	beq.w	8002dfc <HAL_RCC_OscConfig+0x3ec>
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	6833      	ldr	r3, [r6, #0]
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002ab8:	f7ff faa8 	bl	800200c <HAL_GetTick>
 8002abc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002abe:	e005      	b.n	8002acc <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7ff faa4 	bl	800200c <HAL_GetTick>
 8002ac4:	1bc0      	subs	r0, r0, r7
 8002ac6:	2802      	cmp	r0, #2
 8002ac8:	f200 817d 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002acc:	6833      	ldr	r3, [r6, #0]
 8002ace:	055a      	lsls	r2, r3, #21
 8002ad0:	d5f6      	bpl.n	8002ac0 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	6873      	ldr	r3, [r6, #4]
 8002ad4:	6922      	ldr	r2, [r4, #16]
 8002ad6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002ada:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ade:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	071e      	lsls	r6, r3, #28
 8002ae4:	d531      	bpl.n	8002b4a <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae6:	6963      	ldr	r3, [r4, #20]
      uint32_t csr_temp = RCC->CSR;
 8002ae8:	4e6f      	ldr	r6, [pc, #444]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8147 	beq.w	8002d7e <HAL_RCC_OscConfig+0x36e>
      uint32_t csr_temp = RCC->CSR;
 8002af0:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002af4:	69a2      	ldr	r2, [r4, #24]
 8002af6:	f003 0110 	and.w	r1, r3, #16
 8002afa:	428a      	cmp	r2, r1
 8002afc:	d00f      	beq.n	8002b1e <HAL_RCC_OscConfig+0x10e>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002afe:	f003 0103 	and.w	r1, r3, #3
 8002b02:	2902      	cmp	r1, #2
 8002b04:	f000 8118 	beq.w	8002d38 <HAL_RCC_OscConfig+0x328>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002b08:	07d8      	lsls	r0, r3, #31
 8002b0a:	f100 820b 	bmi.w	8002f24 <HAL_RCC_OscConfig+0x514>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002b0e:	4966      	ldr	r1, [pc, #408]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
 8002b10:	f8d1 3094 	ldr.w	r3, [r1, #148]	@ 0x94
 8002b14:	f023 0310 	bic.w	r3, r3, #16
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4e62      	ldr	r6, [pc, #392]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
 8002b20:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002b2c:	f7ff fa6e 	bl	800200c <HAL_GetTick>
 8002b30:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b32:	e005      	b.n	8002b40 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b34:	f7ff fa6a 	bl	800200c <HAL_GetTick>
 8002b38:	1bc0      	subs	r0, r0, r7
 8002b3a:	2811      	cmp	r0, #17
 8002b3c:	f200 8143 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b40:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002b44:	079a      	lsls	r2, r3, #30
 8002b46:	d5f5      	bpl.n	8002b34 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	075f      	lsls	r7, r3, #29
 8002b4c:	d546      	bpl.n	8002bdc <HAL_RCC_OscConfig+0x1cc>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
 8002b50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b52:	00d6      	lsls	r6, r2, #3
 8002b54:	f100 8150 	bmi.w	8002df8 <HAL_RCC_OscConfig+0x3e8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002b5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b6a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6c:	4f4f      	ldr	r7, [pc, #316]	@ (8002cac <HAL_RCC_OscConfig+0x29c>)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	05d8      	lsls	r0, r3, #23
 8002b72:	f140 81b2 	bpl.w	8002eda <HAL_RCC_OscConfig+0x4ca>
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b76:	68a3      	ldr	r3, [r4, #8]
 8002b78:	07d9      	lsls	r1, r3, #31
 8002b7a:	f140 816a 	bpl.w	8002e52 <HAL_RCC_OscConfig+0x442>
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002b7e:	494a      	ldr	r1, [pc, #296]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
 8002b80:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002b84:	f003 0080 	and.w	r0, r3, #128	@ 0x80
 8002b88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b8c:	4302      	orrs	r2, r0
 8002b8e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002b92:	f013 0f04 	tst.w	r3, #4
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b96:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8002b9a:	bf1e      	ittt	ne
 8002b9c:	f043 0304 	orrne.w	r3, r3, #4
 8002ba0:	f8c1 3090 	strne.w	r3, [r1, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ba4:	f8d1 3090 	ldrne.w	r3, [r1, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8002bb0:	f7ff fa2c 	bl	800200c <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb4:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8002ca8 <HAL_RCC_OscConfig+0x298>
      tickstart = HAL_GetTick();
 8002bb8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bbe:	e005      	b.n	8002bcc <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7ff fa24 	bl	800200c <HAL_GetTick>
 8002bc4:	1bc0      	subs	r0, r0, r7
 8002bc6:	4548      	cmp	r0, r9
 8002bc8:	f200 80fd 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bcc:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8002bd0:	079b      	lsls	r3, r3, #30
 8002bd2:	d5f5      	bpl.n	8002bc0 <HAL_RCC_OscConfig+0x1b0>
    if(pwrclkchanged == SET)
 8002bd4:	2e00      	cmp	r6, #0
 8002bd6:	f040 817a 	bne.w	8002ece <HAL_RCC_OscConfig+0x4be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	0699      	lsls	r1, r3, #26
 8002bde:	d518      	bpl.n	8002c12 <HAL_RCC_OscConfig+0x202>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002be0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      __HAL_RCC_HSI48_ENABLE();
 8002be2:	4e31      	ldr	r6, [pc, #196]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 815e 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x496>
      __HAL_RCC_HSI48_ENABLE();
 8002bea:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8002bf6:	f7ff fa09 	bl	800200c <HAL_GetTick>
 8002bfa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bfc:	e005      	b.n	8002c0a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bfe:	f7ff fa05 	bl	800200c <HAL_GetTick>
 8002c02:	1bc0      	subs	r0, r0, r7
 8002c04:	2802      	cmp	r0, #2
 8002c06:	f200 80de 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c0a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002c0e:	079a      	lsls	r2, r3, #30
 8002c10:	d5f5      	bpl.n	8002bfe <HAL_RCC_OscConfig+0x1ee>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c12:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002c14:	b1eb      	cbz	r3, 8002c52 <HAL_RCC_OscConfig+0x242>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	f000 81a2 	beq.w	8002f60 <HAL_RCC_OscConfig+0x550>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c1c:	2d0c      	cmp	r5, #12
 8002c1e:	f000 808b 	beq.w	8002d38 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4c21      	ldr	r4, [pc, #132]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c2c:	f7ff f9ee 	bl	800200c <HAL_GetTick>
 8002c30:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c32:	e005      	b.n	8002c40 <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7ff f9ea 	bl	800200c <HAL_GetTick>
 8002c38:	1b40      	subs	r0, r0, r5
 8002c3a:	2802      	cmp	r0, #2
 8002c3c:	f200 80c3 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	019b      	lsls	r3, r3, #6
 8002c44:	d4f6      	bmi.n	8002c34 <HAL_RCC_OscConfig+0x224>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002c46:	68e3      	ldr	r3, [r4, #12]
 8002c48:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002c4c:	f023 0303 	bic.w	r3, r3, #3
 8002c50:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8002c52:	2000      	movs	r0, #0
 8002c54:	e071      	b.n	8002d3a <HAL_RCC_OscConfig+0x32a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c56:	2d08      	cmp	r5, #8
 8002c58:	d074      	beq.n	8002d44 <HAL_RCC_OscConfig+0x334>
 8002c5a:	2d0c      	cmp	r5, #12
 8002c5c:	d070      	beq.n	8002d40 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5e:	6863      	ldr	r3, [r4, #4]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c64:	f000 80b3 	beq.w	8002dce <HAL_RCC_OscConfig+0x3be>
 8002c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c6c:	f000 814d 	beq.w	8002f0a <HAL_RCC_OscConfig+0x4fa>
 8002c70:	4f0d      	ldr	r7, [pc, #52]	@ (8002ca8 <HAL_RCC_OscConfig+0x298>)
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c78:	603a      	str	r2, [r7, #0]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c80:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 80a8 	bne.w	8002dd8 <HAL_RCC_OscConfig+0x3c8>
        tickstart = HAL_GetTick();
 8002c88:	f7ff f9c0 	bl	800200c <HAL_GetTick>
 8002c8c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	e006      	b.n	8002c9e <HAL_RCC_OscConfig+0x28e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff f9bc 	bl	800200c <HAL_GetTick>
 8002c94:	eba0 0008 	sub.w	r0, r0, r8
 8002c98:	2864      	cmp	r0, #100	@ 0x64
 8002c9a:	f200 8094 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	039b      	lsls	r3, r3, #14
 8002ca2:	d4f5      	bmi.n	8002c90 <HAL_RCC_OscConfig+0x280>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	e6f6      	b.n	8002a96 <HAL_RCC_OscConfig+0x86>
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cb0:	2e01      	cmp	r6, #1
 8002cb2:	f47f aec4 	bne.w	8002a3e <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cb6:	4ba6      	ldr	r3, [pc, #664]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0798      	lsls	r0, r3, #30
 8002cbc:	d439      	bmi.n	8002d32 <HAL_RCC_OscConfig+0x322>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cbe:	4ba4      	ldr	r3, [pc, #656]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002cc0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	0711      	lsls	r1, r2, #28
 8002cc6:	bf56      	itet	pl
 8002cc8:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8002ccc:	681b      	ldrmi	r3, [r3, #0]
 8002cce:	091b      	lsrpl	r3, r3, #4
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd4:	4298      	cmp	r0, r3
 8002cd6:	f200 80a3 	bhi.w	8002e20 <HAL_RCC_OscConfig+0x410>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cda:	4b9d      	ldr	r3, [pc, #628]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	f042 0208 	orr.w	r2, r2, #8
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002cea:	4302      	orrs	r2, r0
 8002cec:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	6a21      	ldr	r1, [r4, #32]
 8002cf2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002cf6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cfa:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cfc:	2d00      	cmp	r5, #0
 8002cfe:	f000 80fe 	beq.w	8002efe <HAL_RCC_OscConfig+0x4ee>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d02:	f7ff fe2b 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002d06:	4b92      	ldr	r3, [pc, #584]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002d08:	4a92      	ldr	r2, [pc, #584]	@ (8002f54 <HAL_RCC_OscConfig+0x544>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d10:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8002d12:	4a91      	ldr	r2, [pc, #580]	@ (8002f58 <HAL_RCC_OscConfig+0x548>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8002d1c:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d1e:	4a8f      	ldr	r2, [pc, #572]	@ (8002f5c <HAL_RCC_OscConfig+0x54c>)
 8002d20:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002d22:	f7ff f867 	bl	8001df4 <HAL_InitTick>
        if(status != HAL_OK)
 8002d26:	b940      	cbnz	r0, 8002d3a <HAL_RCC_OscConfig+0x32a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	07d8      	lsls	r0, r3, #31
 8002d2c:	f57f aeb3 	bpl.w	8002a96 <HAL_RCC_OscConfig+0x86>
 8002d30:	e791      	b.n	8002c56 <HAL_RCC_OscConfig+0x246>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d32:	69e3      	ldr	r3, [r4, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1c2      	bne.n	8002cbe <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 8002d38:	2001      	movs	r0, #1
}
 8002d3a:	b003      	add	sp, #12
 8002d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d40:	2e03      	cmp	r6, #3
 8002d42:	d18c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x24e>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	4a82      	ldr	r2, [pc, #520]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	0391      	lsls	r1, r2, #14
 8002d4a:	f57f aea4 	bpl.w	8002a96 <HAL_RCC_OscConfig+0x86>
 8002d4e:	6862      	ldr	r2, [r4, #4]
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	f47f aea0 	bne.w	8002a96 <HAL_RCC_OscConfig+0x86>
 8002d56:	e7ef      	b.n	8002d38 <HAL_RCC_OscConfig+0x328>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d58:	2e02      	cmp	r6, #2
 8002d5a:	f47f aea4 	bne.w	8002aa6 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	0551      	lsls	r1, r2, #21
 8002d64:	d502      	bpl.n	8002d6c <HAL_RCC_OscConfig+0x35c>
 8002d66:	68e2      	ldr	r2, [r4, #12]
 8002d68:	2a00      	cmp	r2, #0
 8002d6a:	d0e5      	beq.n	8002d38 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4978      	ldr	r1, [pc, #480]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002d6e:	6920      	ldr	r0, [r4, #16]
 8002d70:	684a      	ldr	r2, [r1, #4]
 8002d72:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 8002d76:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002d7a:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7c:	e6b1      	b.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
      __HAL_RCC_LSI_DISABLE();
 8002d7e:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002d8a:	f7ff f93f 	bl	800200c <HAL_GetTick>
 8002d8e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d90:	e004      	b.n	8002d9c <HAL_RCC_OscConfig+0x38c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d92:	f7ff f93b 	bl	800200c <HAL_GetTick>
 8002d96:	1bc0      	subs	r0, r0, r7
 8002d98:	2811      	cmp	r0, #17
 8002d9a:	d814      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d9c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002da0:	079b      	lsls	r3, r3, #30
 8002da2:	d4f6      	bmi.n	8002d92 <HAL_RCC_OscConfig+0x382>
 8002da4:	e6d0      	b.n	8002b48 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_MSI_DISABLE();
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002dae:	f7ff f92d 	bl	800200c <HAL_GetTick>
 8002db2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	079b      	lsls	r3, r3, #30
 8002db8:	d5b6      	bpl.n	8002d28 <HAL_RCC_OscConfig+0x318>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dba:	f7ff f927 	bl	800200c <HAL_GetTick>
 8002dbe:	eba0 0008 	sub.w	r0, r0, r8
 8002dc2:	2802      	cmp	r0, #2
 8002dc4:	d9f6      	bls.n	8002db4 <HAL_RCC_OscConfig+0x3a4>
            return HAL_TIMEOUT;
 8002dc6:	2003      	movs	r0, #3
}
 8002dc8:	b003      	add	sp, #12
 8002dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dce:	4a60      	ldr	r2, [pc, #384]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002dd8:	f7ff f918 	bl	800200c <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ddc:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8002f50 <HAL_RCC_OscConfig+0x540>
        tickstart = HAL_GetTick();
 8002de0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de2:	e004      	b.n	8002dee <HAL_RCC_OscConfig+0x3de>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7ff f912 	bl	800200c <HAL_GetTick>
 8002de8:	1bc0      	subs	r0, r0, r7
 8002dea:	2864      	cmp	r0, #100	@ 0x64
 8002dec:	d8eb      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dee:	f8d8 3000 	ldr.w	r3, [r8]
 8002df2:	039a      	lsls	r2, r3, #14
 8002df4:	d5f6      	bpl.n	8002de4 <HAL_RCC_OscConfig+0x3d4>
 8002df6:	e755      	b.n	8002ca4 <HAL_RCC_OscConfig+0x294>
    FlagStatus       pwrclkchanged = RESET;
 8002df8:	2600      	movs	r6, #0
 8002dfa:	e6b7      	b.n	8002b6c <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002dfc:	6833      	ldr	r3, [r6, #0]
 8002dfe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e02:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002e04:	f7ff f902 	bl	800200c <HAL_GetTick>
 8002e08:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e0a:	e004      	b.n	8002e16 <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0c:	f7ff f8fe 	bl	800200c <HAL_GetTick>
 8002e10:	1bc0      	subs	r0, r0, r7
 8002e12:	2802      	cmp	r0, #2
 8002e14:	d8d7      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x3b6>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e16:	6833      	ldr	r3, [r6, #0]
 8002e18:	055b      	lsls	r3, r3, #21
 8002e1a:	d4f7      	bmi.n	8002e0c <HAL_RCC_OscConfig+0x3fc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	e660      	b.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e20:	f7ff fd56 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d187      	bne.n	8002d38 <HAL_RCC_OscConfig+0x328>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e28:	4b49      	ldr	r3, [pc, #292]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	f042 0208 	orr.w	r2, r2, #8
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002e36:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	6a21      	ldr	r1, [r4, #32]
 8002e42:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002e46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	e759      	b.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
    return HAL_ERROR;
 8002e4e:	2001      	movs	r0, #1
}
 8002e50:	4770      	bx	lr
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e52:	4f3f      	ldr	r7, [pc, #252]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002e54:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e60:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002e64:	f022 0204 	bic.w	r2, r2, #4
 8002e68:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f47f ae9f 	bne.w	8002bb0 <HAL_RCC_OscConfig+0x1a0>
      tickstart = HAL_GetTick();
 8002e72:	f7ff f8cb 	bl	800200c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002e7a:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e7c:	e005      	b.n	8002e8a <HAL_RCC_OscConfig+0x47a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7ff f8c5 	bl	800200c <HAL_GetTick>
 8002e82:	eba0 0008 	sub.w	r0, r0, r8
 8002e86:	4548      	cmp	r0, r9
 8002e88:	d89d      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e8e:	0798      	lsls	r0, r3, #30
 8002e90:	d4f5      	bmi.n	8002e7e <HAL_RCC_OscConfig+0x46e>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(pwrclkchanged == SET)
 8002e9e:	2e00      	cmp	r6, #0
 8002ea0:	f43f ae9b 	beq.w	8002bda <HAL_RCC_OscConfig+0x1ca>
 8002ea4:	e013      	b.n	8002ece <HAL_RCC_OscConfig+0x4be>
      __HAL_RCC_HSI48_DISABLE();
 8002ea6:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8002eb2:	f7ff f8ab 	bl	800200c <HAL_GetTick>
 8002eb6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb8:	e004      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4b4>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eba:	f7ff f8a7 	bl	800200c <HAL_GetTick>
 8002ebe:	1bc0      	subs	r0, r0, r7
 8002ec0:	2802      	cmp	r0, #2
 8002ec2:	d880      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x3b6>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec4:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8002ec8:	079b      	lsls	r3, r3, #30
 8002eca:	d4f6      	bmi.n	8002eba <HAL_RCC_OscConfig+0x4aa>
 8002ecc:	e6a1      	b.n	8002c12 <HAL_RCC_OscConfig+0x202>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ece:	4a20      	ldr	r2, [pc, #128]	@ (8002f50 <HAL_RCC_OscConfig+0x540>)
 8002ed0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed8:	e67f      	b.n	8002bda <HAL_RCC_OscConfig+0x1ca>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002ee2:	f7ff f893 	bl	800200c <HAL_GetTick>
 8002ee6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	05da      	lsls	r2, r3, #23
 8002eec:	f53f ae43 	bmi.w	8002b76 <HAL_RCC_OscConfig+0x166>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef0:	f7ff f88c 	bl	800200c <HAL_GetTick>
 8002ef4:	eba0 0008 	sub.w	r0, r0, r8
 8002ef8:	2802      	cmp	r0, #2
 8002efa:	d9f5      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x4d8>
 8002efc:	e763      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3b6>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002efe:	f7ff fce7 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	f43f aefd 	beq.w	8002d02 <HAL_RCC_OscConfig+0x2f2>
 8002f08:	e716      	b.n	8002d38 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f0e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f20:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f22:	e759      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3c8>
          __HAL_RCC_LSI_DISABLE();
 8002f24:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8002f30:	f7ff f86c 	bl	800200c <HAL_GetTick>
 8002f34:	4607      	mov	r7, r0
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f36:	e005      	b.n	8002f44 <HAL_RCC_OscConfig+0x534>
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7ff f868 	bl	800200c <HAL_GetTick>
 8002f3c:	1bc0      	subs	r0, r0, r7
 8002f3e:	2811      	cmp	r0, #17
 8002f40:	f63f af41 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f44:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002f48:	0799      	lsls	r1, r3, #30
 8002f4a:	d4f5      	bmi.n	8002f38 <HAL_RCC_OscConfig+0x528>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002f4c:	69a2      	ldr	r2, [r4, #24]
 8002f4e:	e5de      	b.n	8002b0e <HAL_RCC_OscConfig+0xfe>
 8002f50:	40021000 	.word	0x40021000
 8002f54:	0800bd74 	.word	0x0800bd74
 8002f58:	20000008 	.word	0x20000008
 8002f5c:	20000000 	.word	0x20000000
      pll_config = RCC->PLLCFGR;
 8002f60:	4e40      	ldr	r6, [pc, #256]	@ (8003064 <HAL_RCC_OscConfig+0x654>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      pll_config = RCC->PLLCFGR;
 8002f64:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	f003 0103 	and.w	r1, r3, #3
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	d042      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x5e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f6e:	2d0c      	cmp	r5, #12
 8002f70:	f43f aee2 	beq.w	8002d38 <HAL_RCC_OscConfig+0x328>
            __HAL_RCC_PLL_DISABLE();
 8002f74:	4d3b      	ldr	r5, [pc, #236]	@ (8003064 <HAL_RCC_OscConfig+0x654>)
 8002f76:	682b      	ldr	r3, [r5, #0]
 8002f78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f7c:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002f7e:	f7ff f845 	bl	800200c <HAL_GetTick>
 8002f82:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f84:	e005      	b.n	8002f92 <HAL_RCC_OscConfig+0x582>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7ff f841 	bl	800200c <HAL_GetTick>
 8002f8a:	1b80      	subs	r0, r0, r6
 8002f8c:	2802      	cmp	r0, #2
 8002f8e:	f63f af1a 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f92:	682b      	ldr	r3, [r5, #0]
 8002f94:	019f      	lsls	r7, r3, #6
 8002f96:	d4f6      	bmi.n	8002f86 <HAL_RCC_OscConfig+0x576>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f98:	68e9      	ldr	r1, [r5, #12]
 8002f9a:	4b33      	ldr	r3, [pc, #204]	@ (8003068 <HAL_RCC_OscConfig+0x658>)
 8002f9c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9e:	4e31      	ldr	r6, [pc, #196]	@ (8003064 <HAL_RCC_OscConfig+0x654>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	e9d4 210d 	ldrd	r2, r1, [r4, #52]	@ 0x34
 8002fa8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002fac:	3a01      	subs	r2, #1
 8002fae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002fb2:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8002fb6:	0849      	lsrs	r1, r1, #1
 8002fb8:	3901      	subs	r1, #1
 8002fba:	0852      	lsrs	r2, r2, #1
 8002fbc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002fc6:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8002fc8:	682b      	ldr	r3, [r5, #0]
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fce:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd0:	68eb      	ldr	r3, [r5, #12]
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8002fd8:	f7ff f818 	bl	800200c <HAL_GetTick>
 8002fdc:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	e005      	b.n	8002fec <HAL_RCC_OscConfig+0x5dc>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7ff f814 	bl	800200c <HAL_GetTick>
 8002fe4:	1b00      	subs	r0, r0, r4
 8002fe6:	2802      	cmp	r0, #2
 8002fe8:	f63f aeed 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fec:	6833      	ldr	r3, [r6, #0]
 8002fee:	0198      	lsls	r0, r3, #6
 8002ff0:	d5f6      	bpl.n	8002fe0 <HAL_RCC_OscConfig+0x5d0>
 8002ff2:	e62e      	b.n	8002c52 <HAL_RCC_OscConfig+0x242>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ff6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ffa:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003000:	d1b5      	bne.n	8002f6e <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003002:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003004:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003008:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800300c:	d1af      	bne.n	8002f6e <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003010:	0852      	lsrs	r2, r2, #1
 8003012:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8003016:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003018:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800301c:	d1a7      	bne.n	8002f6e <HAL_RCC_OscConfig+0x55e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800301e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003020:	0852      	lsrs	r2, r2, #1
 8003022:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8003026:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003028:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800302c:	d19f      	bne.n	8002f6e <HAL_RCC_OscConfig+0x55e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302e:	6833      	ldr	r3, [r6, #0]
 8003030:	0199      	lsls	r1, r3, #6
 8003032:	f53f ae0e 	bmi.w	8002c52 <HAL_RCC_OscConfig+0x242>
          __HAL_RCC_PLL_ENABLE();
 8003036:	6833      	ldr	r3, [r6, #0]
 8003038:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800303c:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800303e:	68f3      	ldr	r3, [r6, #12]
 8003040:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003044:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8003046:	f7fe ffe1 	bl	800200c <HAL_GetTick>
 800304a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304c:	e005      	b.n	800305a <HAL_RCC_OscConfig+0x64a>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe ffdd 	bl	800200c <HAL_GetTick>
 8003052:	1b03      	subs	r3, r0, r4
 8003054:	2b02      	cmp	r3, #2
 8003056:	f63f aeb6 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x3b6>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305a:	6833      	ldr	r3, [r6, #0]
 800305c:	019a      	lsls	r2, r3, #6
 800305e:	d5f6      	bpl.n	800304e <HAL_RCC_OscConfig+0x63e>
 8003060:	e5f7      	b.n	8002c52 <HAL_RCC_OscConfig+0x242>
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	f99f808c 	.word	0xf99f808c

0800306c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800306c:	2800      	cmp	r0, #0
 800306e:	f000 80a0 	beq.w	80031b2 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003072:	4a54      	ldr	r2, [pc, #336]	@ (80031c4 <HAL_RCC_ClockConfig+0x158>)
 8003074:	6813      	ldr	r3, [r2, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	428b      	cmp	r3, r1
{
 800307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003080:	460d      	mov	r5, r1
 8003082:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	d20c      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	6813      	ldr	r3, [r2, #0]
 8003088:	f023 0307 	bic.w	r3, r3, #7
 800308c:	430b      	orrs	r3, r1
 800308e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	428b      	cmp	r3, r1
 8003098:	d002      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800309a:	2001      	movs	r0, #1
}
 800309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a4:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	d570      	bpl.n	800318c <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030aa:	4e47      	ldr	r6, [pc, #284]	@ (80031c8 <HAL_RCC_ClockConfig+0x15c>)
 80030ac:	68a0      	ldr	r0, [r4, #8]
 80030ae:	68b1      	ldr	r1, [r6, #8]
 80030b0:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 80030b4:	4288      	cmp	r0, r1
 80030b6:	d904      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	68b1      	ldr	r1, [r6, #8]
 80030ba:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 80030be:	4301      	orrs	r1, r0
 80030c0:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c2:	b332      	cbz	r2, 8003112 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c4:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	4b40      	ldr	r3, [pc, #256]	@ (80031c8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ca:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030cc:	d065      	beq.n	800319a <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	2a02      	cmp	r2, #2
 80030d0:	d06c      	beq.n	80031ac <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030d2:	2a00      	cmp	r2, #0
 80030d4:	d171      	bne.n	80031ba <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030d6:	079e      	lsls	r6, r3, #30
 80030d8:	d5df      	bpl.n	800309a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030da:	4e3b      	ldr	r6, [pc, #236]	@ (80031c8 <HAL_RCC_ClockConfig+0x15c>)
 80030dc:	68b3      	ldr	r3, [r6, #8]
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80030e6:	f7fe ff91 	bl	800200c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ea:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80030ee:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f0:	e004      	b.n	80030fc <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f2:	f7fe ff8b 	bl	800200c <HAL_GetTick>
 80030f6:	1bc0      	subs	r0, r0, r7
 80030f8:	4540      	cmp	r0, r8
 80030fa:	d85c      	bhi.n	80031b6 <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fc:	68b3      	ldr	r3, [r6, #8]
 80030fe:	6862      	ldr	r2, [r4, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003108:	d1f3      	bne.n	80030f2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	0799      	lsls	r1, r3, #30
 800310e:	d506      	bpl.n	800311e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003110:	68a0      	ldr	r0, [r4, #8]
 8003112:	492d      	ldr	r1, [pc, #180]	@ (80031c8 <HAL_RCC_ClockConfig+0x15c>)
 8003114:	688a      	ldr	r2, [r1, #8]
 8003116:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800311a:	4282      	cmp	r2, r0
 800311c:	d840      	bhi.n	80031a0 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800311e:	4929      	ldr	r1, [pc, #164]	@ (80031c4 <HAL_RCC_ClockConfig+0x158>)
 8003120:	680a      	ldr	r2, [r1, #0]
 8003122:	f002 0207 	and.w	r2, r2, #7
 8003126:	42aa      	cmp	r2, r5
 8003128:	d909      	bls.n	800313e <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	680a      	ldr	r2, [r1, #0]
 800312c:	f022 0207 	bic.w	r2, r2, #7
 8003130:	432a      	orrs	r2, r5
 8003132:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003134:	680a      	ldr	r2, [r1, #0]
 8003136:	f002 0207 	and.w	r2, r2, #7
 800313a:	42aa      	cmp	r2, r5
 800313c:	d1ad      	bne.n	800309a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313e:	075a      	lsls	r2, r3, #29
 8003140:	d506      	bpl.n	8003150 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003142:	4921      	ldr	r1, [pc, #132]	@ (80031c8 <HAL_RCC_ClockConfig+0x15c>)
 8003144:	68e0      	ldr	r0, [r4, #12]
 8003146:	688a      	ldr	r2, [r1, #8]
 8003148:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800314c:	4302      	orrs	r2, r0
 800314e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	071b      	lsls	r3, r3, #28
 8003152:	d507      	bpl.n	8003164 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003154:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <HAL_RCC_ClockConfig+0x15c>)
 8003156:	6921      	ldr	r1, [r4, #16]
 8003158:	6893      	ldr	r3, [r2, #8]
 800315a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800315e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003162:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003164:	f7ff fbfa 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8003168:	4a17      	ldr	r2, [pc, #92]	@ (80031c8 <HAL_RCC_ClockConfig+0x15c>)
 800316a:	4c18      	ldr	r4, [pc, #96]	@ (80031cc <HAL_RCC_ClockConfig+0x160>)
 800316c:	6892      	ldr	r2, [r2, #8]
 800316e:	4918      	ldr	r1, [pc, #96]	@ (80031d0 <HAL_RCC_ClockConfig+0x164>)
 8003170:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003174:	4603      	mov	r3, r0
 8003176:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8003178:	4816      	ldr	r0, [pc, #88]	@ (80031d4 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800317a:	f002 021f 	and.w	r2, r2, #31
 800317e:	40d3      	lsrs	r3, r2
}
 8003180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8003184:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003186:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8003188:	f7fe be34 	b.w	8001df4 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318c:	2a00      	cmp	r2, #0
 800318e:	d0c6      	beq.n	800311e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003190:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003194:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003196:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003198:	d199      	bne.n	80030ce <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319a:	019b      	lsls	r3, r3, #6
 800319c:	d49d      	bmi.n	80030da <HAL_RCC_ClockConfig+0x6e>
 800319e:	e77c      	b.n	800309a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	688a      	ldr	r2, [r1, #8]
 80031a2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80031a6:	4302      	orrs	r2, r0
 80031a8:	608a      	str	r2, [r1, #8]
 80031aa:	e7b8      	b.n	800311e <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ac:	039f      	lsls	r7, r3, #14
 80031ae:	d494      	bmi.n	80030da <HAL_RCC_ClockConfig+0x6e>
 80031b0:	e773      	b.n	800309a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80031b2:	2001      	movs	r0, #1
}
 80031b4:	4770      	bx	lr
        return HAL_TIMEOUT;
 80031b6:	2003      	movs	r0, #3
 80031b8:	e770      	b.n	800309c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ba:	0558      	lsls	r0, r3, #21
 80031bc:	f57f af6d 	bpl.w	800309a <HAL_RCC_ClockConfig+0x2e>
 80031c0:	e78b      	b.n	80030da <HAL_RCC_ClockConfig+0x6e>
 80031c2:	bf00      	nop
 80031c4:	40022000 	.word	0x40022000
 80031c8:	40021000 	.word	0x40021000
 80031cc:	0800bd74 	.word	0x0800bd74
 80031d0:	20000000 	.word	0x20000000
 80031d4:	20000008 	.word	0x20000008

080031d8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031da:	4a06      	ldr	r2, [pc, #24]	@ (80031f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80031de:	4906      	ldr	r1, [pc, #24]	@ (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80031e4:	6808      	ldr	r0, [r1, #0]
 80031e6:	5cd3      	ldrb	r3, [r2, r3]
 80031e8:	f003 031f 	and.w	r3, r3, #31
}
 80031ec:	40d8      	lsrs	r0, r3
 80031ee:	4770      	bx	lr
 80031f0:	40021000 	.word	0x40021000
 80031f4:	0800bd6c 	.word	0x0800bd6c
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031fc:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <HAL_RCC_GetPCLK2Freq+0x18>)
 80031fe:	4a06      	ldr	r2, [pc, #24]	@ (8003218 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003200:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003202:	4906      	ldr	r1, [pc, #24]	@ (800321c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003204:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003208:	6808      	ldr	r0, [r1, #0]
 800320a:	5cd3      	ldrb	r3, [r2, r3]
 800320c:	f003 031f 	and.w	r3, r3, #31
}
 8003210:	40d8      	lsrs	r0, r3
 8003212:	4770      	bx	lr
 8003214:	40021000 	.word	0x40021000
 8003218:	0800bd6c 	.word	0x0800bd6c
 800321c:	20000000 	.word	0x20000000

08003220 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003220:	4b0e      	ldr	r3, [pc, #56]	@ (800325c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003222:	220f      	movs	r2, #15
 8003224:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	f002 0203 	and.w	r2, r2, #3
 800322c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003234:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800323c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	08db      	lsrs	r3, r3, #3
{
 8003242:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003244:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003248:	4c05      	ldr	r4, [pc, #20]	@ (8003260 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800324a:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800324c:	6823      	ldr	r3, [r4, #0]
}
 800324e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	600b      	str	r3, [r1, #0]
}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	40022000 	.word	0x40022000

08003264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003268:	6803      	ldr	r3, [r0, #0]
{
 800326a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800326c:	f413 3000 	ands.w	r0, r3, #131072	@ 0x20000
{
 8003270:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003272:	d052      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003274:	4b7b      	ldr	r3, [pc, #492]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003276:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003278:	00d5      	lsls	r5, r2, #3
 800327a:	f140 80d0 	bpl.w	800341e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003280:	4d79      	ldr	r5, [pc, #484]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003282:	682b      	ldr	r3, [r5, #0]
 8003284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003288:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800328a:	f7fe febf 	bl	800200c <HAL_GetTick>
 800328e:	4606      	mov	r6, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003290:	e005      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003292:	f7fe febb 	bl	800200c <HAL_GetTick>
 8003296:	1b83      	subs	r3, r0, r6
 8003298:	2b02      	cmp	r3, #2
 800329a:	f200 80cb 	bhi.w	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800329e:	682b      	ldr	r3, [r5, #0]
 80032a0:	05d8      	lsls	r0, r3, #23
 80032a2:	d5f6      	bpl.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032a4:	4d6f      	ldr	r5, [pc, #444]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032a6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032a8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ac:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80032b0:	d026      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d024      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032b6:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ba:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80032be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c2:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032c6:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ce:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d2:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032d6:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80032d8:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032dc:	d510      	bpl.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe fe95 	bl	800200c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80032e6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e8:	e005      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe fe8f 	bl	800200c <HAL_GetTick>
 80032ee:	1b80      	subs	r0, r0, r6
 80032f0:	4540      	cmp	r0, r8
 80032f2:	f200 809f 	bhi.w	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f6:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80032fa:	079b      	lsls	r3, r3, #30
 80032fc:	d5f5      	bpl.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x86>
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032fe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003300:	4958      	ldr	r1, [pc, #352]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003302:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8003306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003310:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003312:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 8003314:	2f00      	cmp	r7, #0
 8003316:	f040 8092 	bne.w	800343e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331a:	07df      	lsls	r7, r3, #31
 800331c:	d508      	bpl.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331e:	4951      	ldr	r1, [pc, #324]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003320:	6865      	ldr	r5, [r4, #4]
 8003322:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003326:	f022 0203 	bic.w	r2, r2, #3
 800332a:	432a      	orrs	r2, r5
 800332c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003330:	079e      	lsls	r6, r3, #30
 8003332:	d508      	bpl.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003334:	494b      	ldr	r1, [pc, #300]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003336:	68a5      	ldr	r5, [r4, #8]
 8003338:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800333c:	f022 020c 	bic.w	r2, r2, #12
 8003340:	432a      	orrs	r2, r5
 8003342:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003346:	075d      	lsls	r5, r3, #29
 8003348:	d508      	bpl.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800334a:	4946      	ldr	r1, [pc, #280]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800334c:	68e5      	ldr	r5, [r4, #12]
 800334e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003352:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003356:	432a      	orrs	r2, r5
 8003358:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800335c:	0699      	lsls	r1, r3, #26
 800335e:	d508      	bpl.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003360:	4940      	ldr	r1, [pc, #256]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003362:	6925      	ldr	r5, [r4, #16]
 8003364:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003368:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800336c:	432a      	orrs	r2, r5
 800336e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003372:	059a      	lsls	r2, r3, #22
 8003374:	d508      	bpl.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003376:	493b      	ldr	r1, [pc, #236]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003378:	6a25      	ldr	r5, [r4, #32]
 800337a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800337e:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003382:	432a      	orrs	r2, r5
 8003384:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003388:	055f      	lsls	r7, r3, #21
 800338a:	d508      	bpl.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800338c:	4935      	ldr	r1, [pc, #212]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800338e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8003390:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003394:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003398:	432a      	orrs	r2, r5
 800339a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800339e:	065e      	lsls	r6, r3, #25
 80033a0:	d508      	bpl.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a2:	4930      	ldr	r1, [pc, #192]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033a4:	6965      	ldr	r5, [r4, #20]
 80033a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80033aa:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80033ae:	432a      	orrs	r2, r5
 80033b0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033b4:	061d      	lsls	r5, r3, #24
 80033b6:	d508      	bpl.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033b8:	492a      	ldr	r1, [pc, #168]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033ba:	69a5      	ldr	r5, [r4, #24]
 80033bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80033c0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80033c4:	432a      	orrs	r2, r5
 80033c6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ca:	05d9      	lsls	r1, r3, #23
 80033cc:	d508      	bpl.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033ce:	4925      	ldr	r1, [pc, #148]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033d0:	69e5      	ldr	r5, [r4, #28]
 80033d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80033d6:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80033da:	432a      	orrs	r2, r5
 80033dc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033e0:	049a      	lsls	r2, r3, #18
 80033e2:	d50b      	bpl.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e4:	491f      	ldr	r1, [pc, #124]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80033e6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80033e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80033ec:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80033f0:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033f2:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033fa:	d026      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033fc:	035b      	lsls	r3, r3, #13
 80033fe:	d50b      	bpl.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003400:	4a18      	ldr	r2, [pc, #96]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003402:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003404:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003408:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800340c:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800340e:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003412:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003416:	d01d      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8003418:	b002      	add	sp, #8
 800341a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003420:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003424:	659a      	str	r2, [r3, #88]	@ 0x58
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003430:	2701      	movs	r7, #1
 8003432:	e725      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003434:	6823      	ldr	r3, [r4, #0]
        status = ret;
 8003436:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 8003438:	2f00      	cmp	r7, #0
 800343a:	f43f af6e 	beq.w	800331a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4909      	ldr	r1, [pc, #36]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003440:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003442:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003446:	658a      	str	r2, [r1, #88]	@ 0x58
 8003448:	e767      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800344a:	68ca      	ldr	r2, [r1, #12]
 800344c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003450:	60ca      	str	r2, [r1, #12]
 8003452:	e7d3      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003454:	68d3      	ldr	r3, [r2, #12]
 8003456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800345a:	60d3      	str	r3, [r2, #12]
}
 800345c:	b002      	add	sp, #8
 800345e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000

0800346c <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800346c:	4a02      	ldr	r2, [pc, #8]	@ (8003478 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800346e:	6813      	ldr	r3, [r2, #0]
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6013      	str	r3, [r2, #0]
}
 8003476:	4770      	bx	lr
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800347c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003480:	2b01      	cmp	r3, #1
 8003482:	d113      	bne.n	80034ac <HAL_TIM_Base_Start+0x30>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003484:	6803      	ldr	r3, [r0, #0]
 8003486:	4a0f      	ldr	r2, [pc, #60]	@ (80034c4 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348a:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003490:	d00e      	beq.n	80034b0 <HAL_TIM_Base_Start+0x34>
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003496:	d00b      	beq.n	80034b0 <HAL_TIM_Base_Start+0x34>
 8003498:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <HAL_TIM_Base_Start+0x34>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    {
      __HAL_TIM_ENABLE(htim);
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80034a8:	2000      	movs	r0, #0
 80034aa:	4770      	bx	lr
    return HAL_ERROR;
 80034ac:	2001      	movs	r0, #1
}
 80034ae:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b0:	6899      	ldr	r1, [r3, #8]
 80034b2:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <HAL_TIM_Base_Start+0x4c>)
 80034b4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b6:	2a06      	cmp	r2, #6
 80034b8:	d0f6      	beq.n	80034a8 <HAL_TIM_Base_Start+0x2c>
 80034ba:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80034be:	d1ef      	bne.n	80034a0 <HAL_TIM_Base_Start+0x24>
 80034c0:	e7f2      	b.n	80034a8 <HAL_TIM_Base_Start+0x2c>
 80034c2:	bf00      	nop
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	00010007 	.word	0x00010007

080034cc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034cc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d116      	bne.n	8003502 <HAL_TIM_Base_Start_IT+0x36>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d6:	4910      	ldr	r1, [pc, #64]	@ (8003518 <HAL_TIM_Base_Start_IT+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	2202      	movs	r2, #2
 80034da:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034de:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e8:	d00d      	beq.n	8003506 <HAL_TIM_Base_Start_IT+0x3a>
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ee:	d00a      	beq.n	8003506 <HAL_TIM_Base_Start_IT+0x3a>
 80034f0:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <HAL_TIM_Base_Start_IT+0x50>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <HAL_TIM_Base_Start_IT+0x3a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    {
      __HAL_TIM_ENABLE(htim);
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80034fe:	2000      	movs	r0, #0
 8003500:	4770      	bx	lr
    return HAL_ERROR;
 8003502:	2001      	movs	r0, #1
}
 8003504:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003506:	6899      	ldr	r1, [r3, #8]
 8003508:	4a05      	ldr	r2, [pc, #20]	@ (8003520 <HAL_TIM_Base_Start_IT+0x54>)
 800350a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	2a06      	cmp	r2, #6
 800350e:	d0f6      	beq.n	80034fe <HAL_TIM_Base_Start_IT+0x32>
 8003510:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003514:	d1ef      	bne.n	80034f6 <HAL_TIM_Base_Start_IT+0x2a>
 8003516:	e7f2      	b.n	80034fe <HAL_TIM_Base_Start_IT+0x32>
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40014000 	.word	0x40014000
 8003520:	00010007 	.word	0x00010007

08003524 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop

0800352c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop

08003530 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop

08003534 <HAL_TIM_IRQHandler>:
{
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800353a:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800353c:	07a1      	lsls	r1, r4, #30
{
 800353e:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003540:	d501      	bpl.n	8003546 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003542:	07b2      	lsls	r2, r6, #30
 8003544:	d457      	bmi.n	80035f6 <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003546:	0767      	lsls	r7, r4, #29
 8003548:	d501      	bpl.n	800354e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800354a:	0770      	lsls	r0, r6, #29
 800354c:	d440      	bmi.n	80035d0 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800354e:	0721      	lsls	r1, r4, #28
 8003550:	d501      	bpl.n	8003556 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003552:	0732      	lsls	r2, r6, #28
 8003554:	d42a      	bmi.n	80035ac <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003556:	06e7      	lsls	r7, r4, #27
 8003558:	d501      	bpl.n	800355e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800355a:	06f0      	lsls	r0, r6, #27
 800355c:	d413      	bmi.n	8003586 <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800355e:	07e1      	lsls	r1, r4, #31
 8003560:	d501      	bpl.n	8003566 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003562:	07f2      	lsls	r2, r6, #31
 8003564:	d465      	bmi.n	8003632 <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003566:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800356a:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800356e:	d052      	beq.n	8003616 <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003570:	0633      	lsls	r3, r6, #24
 8003572:	d466      	bmi.n	8003642 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003574:	0660      	lsls	r0, r4, #25
 8003576:	d501      	bpl.n	800357c <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003578:	0671      	lsls	r1, r6, #25
 800357a:	d473      	bmi.n	8003664 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800357c:	06a2      	lsls	r2, r4, #26
 800357e:	d501      	bpl.n	8003584 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003580:	06b3      	lsls	r3, r6, #26
 8003582:	d44d      	bmi.n	8003620 <HAL_TIM_IRQHandler+0xec>
}
 8003584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003586:	682b      	ldr	r3, [r5, #0]
 8003588:	f06f 0210 	mvn.w	r2, #16
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358e:	2208      	movs	r2, #8
 8003590:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003598:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800359a:	d174      	bne.n	8003686 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359c:	f7ff ffc2 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	4628      	mov	r0, r5
 80035a2:	f7ff ffc3 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	2300      	movs	r3, #0
 80035a8:	772b      	strb	r3, [r5, #28]
 80035aa:	e7d8      	b.n	800355e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	f06f 0208 	mvn.w	r2, #8
 80035b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b4:	2204      	movs	r2, #4
 80035b6:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80035bc:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035be:	d15f      	bne.n	8003680 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c0:	f7ff ffb0 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c4:	4628      	mov	r0, r5
 80035c6:	f7ff ffb1 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	2300      	movs	r3, #0
 80035cc:	772b      	strb	r3, [r5, #28]
 80035ce:	e7c2      	b.n	8003556 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	f06f 0204 	mvn.w	r2, #4
 80035d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d8:	2202      	movs	r2, #2
 80035da:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e4:	d149      	bne.n	800367a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	f7ff ff9d 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ea:	4628      	mov	r0, r5
 80035ec:	f7ff ff9e 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f0:	2300      	movs	r3, #0
 80035f2:	772b      	strb	r3, [r5, #28]
 80035f4:	e7ab      	b.n	800354e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035f6:	f06f 0202 	mvn.w	r2, #2
 80035fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035fc:	2201      	movs	r2, #1
 80035fe:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	079b      	lsls	r3, r3, #30
 8003604:	d136      	bne.n	8003674 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	f7ff ff8d 	bl	8003524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360a:	4628      	mov	r0, r5
 800360c:	f7ff ff8e 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003610:	2300      	movs	r3, #0
 8003612:	772b      	strb	r3, [r5, #28]
 8003614:	e797      	b.n	8003546 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003616:	2f00      	cmp	r7, #0
 8003618:	d0ac      	beq.n	8003574 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800361a:	0637      	lsls	r7, r6, #24
 800361c:	d41a      	bmi.n	8003654 <HAL_TIM_IRQHandler+0x120>
 800361e:	e7a9      	b.n	8003574 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	f06f 0220 	mvn.w	r2, #32
 8003626:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003628:	4628      	mov	r0, r5
}
 800362a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 800362e:	f000 b8e1 	b.w	80037f4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003632:	682b      	ldr	r3, [r5, #0]
 8003634:	f06f 0201 	mvn.w	r2, #1
 8003638:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800363a:	4628      	mov	r0, r5
 800363c:	f7fe fafa 	bl	8001c34 <HAL_TIM_PeriodElapsedCallback>
 8003640:	e791      	b.n	8003566 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003642:	682b      	ldr	r3, [r5, #0]
 8003644:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003648:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800364a:	4628      	mov	r0, r5
 800364c:	f000 f8d4 	bl	80037f8 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003650:	2f00      	cmp	r7, #0
 8003652:	d08f      	beq.n	8003574 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800365a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800365c:	4628      	mov	r0, r5
 800365e:	f000 f8cd 	bl	80037fc <HAL_TIMEx_Break2Callback>
 8003662:	e787      	b.n	8003574 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800366a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800366c:	4628      	mov	r0, r5
 800366e:	f7ff ff5f 	bl	8003530 <HAL_TIM_TriggerCallback>
 8003672:	e783      	b.n	800357c <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8003674:	f7ff ff58 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 8003678:	e7ca      	b.n	8003610 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	f7ff ff55 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 800367e:	e7b7      	b.n	80035f0 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003680:	f7ff ff52 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 8003684:	e7a1      	b.n	80035ca <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	f7ff ff4f 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 800368a:	e78c      	b.n	80035a6 <HAL_TIM_IRQHandler+0x72>

0800368c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800368c:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800368e:	4e23      	ldr	r6, [pc, #140]	@ (800371c <TIM_Base_SetConfig+0x90>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003690:	680a      	ldr	r2, [r1, #0]
  tmpcr1 = TIMx->CR1;
 8003692:	6803      	ldr	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003694:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003696:	694d      	ldr	r5, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003698:	42b0      	cmp	r0, r6
 800369a:	d023      	beq.n	80036e4 <TIM_Base_SetConfig+0x58>
 800369c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80036a0:	d017      	beq.n	80036d2 <TIM_Base_SetConfig+0x46>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a2:	4e1f      	ldr	r6, [pc, #124]	@ (8003720 <TIM_Base_SetConfig+0x94>)
 80036a4:	42b0      	cmp	r0, r6
 80036a6:	d02e      	beq.n	8003706 <TIM_Base_SetConfig+0x7a>
 80036a8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80036ac:	42b0      	cmp	r0, r6
 80036ae:	d01d      	beq.n	80036ec <TIM_Base_SetConfig+0x60>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036b4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80036b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b8:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036ba:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036bc:	2301      	movs	r3, #1
 80036be:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036c0:	6903      	ldr	r3, [r0, #16]
 80036c2:	07db      	lsls	r3, r3, #31
 80036c4:	d503      	bpl.n	80036ce <TIM_Base_SetConfig+0x42>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036c6:	6903      	ldr	r3, [r0, #16]
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6103      	str	r3, [r0, #16]
  }
}
 80036ce:	bc70      	pop	{r4, r5, r6}
 80036d0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80036d2:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d4:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80036da:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80036dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036e0:	430b      	orrs	r3, r1
 80036e2:	e7e5      	b.n	80036b0 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 80036e4:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80036ea:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ec:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036f8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80036fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fc:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036fe:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003700:	690b      	ldr	r3, [r1, #16]
 8003702:	6303      	str	r3, [r0, #48]	@ 0x30
 8003704:	e7da      	b.n	80036bc <TIM_Base_SetConfig+0x30>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003706:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003712:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8003714:	6005      	str	r5, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003716:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003718:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800371a:	e7f1      	b.n	8003700 <TIM_Base_SetConfig+0x74>
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40014000 	.word	0x40014000

08003724 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003724:	b370      	cbz	r0, 8003784 <HAL_TIM_Base_Init+0x60>
{
 8003726:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003728:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800372c:	4604      	mov	r4, r0
 800372e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003732:	b313      	cbz	r3, 800377a <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003736:	2302      	movs	r3, #2
 8003738:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003740:	f7ff ffa4 	bl	800368c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	2301      	movs	r3, #1
 8003746:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800374e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003752:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003756:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800375a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800375e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003762:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003766:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800376a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800376e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003772:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003776:	2000      	movs	r0, #0
}
 8003778:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800377a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800377e:	f7fe facf 	bl	8001d20 <HAL_TIM_Base_MspInit>
 8003782:	e7d7      	b.n	8003734 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003784:	2001      	movs	r0, #1
}
 8003786:	4770      	bx	lr

08003788 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003788:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800378c:	2a01      	cmp	r2, #1
 800378e:	d02b      	beq.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8003790:	b470      	push	{r4, r5, r6}
 8003792:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003794:	4d15      	ldr	r5, [pc, #84]	@ (80037ec <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8003796:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	2202      	movs	r2, #2
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800379e:	42a8      	cmp	r0, r5
  tmpcr2 = htim->Instance->CR2;
 80037a0:	6842      	ldr	r2, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a2:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80037a4:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037a6:	d016      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ac:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ae:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80037b2:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b4:	d002      	beq.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80037b6:	4a0e      	ldr	r2, [pc, #56]	@ (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80037b8:	4290      	cmp	r0, r2
 80037ba:	d104      	bne.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037bc:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037be:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c4:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80037c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80037ce:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80037d2:	bc70      	pop	{r4, r5, r6}
 80037d4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037d6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037d8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037dc:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80037de:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e2:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 80037e4:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e6:	e7e9      	b.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 80037e8:	2002      	movs	r0, #2
}
 80037ea:	4770      	bx	lr
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40014000 	.word	0x40014000

080037f4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop

080037f8 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop

080037fc <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003800:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003806:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	e842 3100 	strex	r1, r3, [r2]
 800380e:	2900      	cmp	r1, #0
 8003810:	d1f7      	bne.n	8003802 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	f102 0308 	add.w	r3, r2, #8
 8003816:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	f102 0c08 	add.w	ip, r2, #8
 8003822:	e84c 3100 	strex	r1, r3, [ip]
 8003826:	2900      	cmp	r1, #0
 8003828:	d1f3      	bne.n	8003812 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800382c:	2b01      	cmp	r3, #1
 800382e:	d006      	beq.n	800383e <UART_EndRxTransfer+0x3e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003830:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003832:	2220      	movs	r2, #32
 8003834:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003838:	6683      	str	r3, [r0, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383a:	6603      	str	r3, [r0, #96]	@ 0x60
}
 800383c:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003842:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	e842 3100 	strex	r1, r3, [r2]
 800384a:	2900      	cmp	r1, #0
 800384c:	d0f0      	beq.n	8003830 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	e852 3f00 	ldrex	r3, [r2]
 8003852:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	e842 3100 	strex	r1, r3, [r2]
 800385a:	2900      	cmp	r1, #0
 800385c:	d1ef      	bne.n	800383e <UART_EndRxTransfer+0x3e>
 800385e:	e7e7      	b.n	8003830 <UART_EndRxTransfer+0x30>

08003860 <UART_SetConfig>:
{
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003864:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003866:	6883      	ldr	r3, [r0, #8]
 8003868:	6900      	ldr	r0, [r0, #16]
 800386a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800386c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800386e:	4303      	orrs	r3, r0
 8003870:	430b      	orrs	r3, r1
 8003872:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003874:	496d      	ldr	r1, [pc, #436]	@ (8003a2c <UART_SetConfig+0x1cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003876:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003878:	4029      	ands	r1, r5
 800387a:	430b      	orrs	r3, r1
 800387c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800387e:	6853      	ldr	r3, [r2, #4]
 8003880:	68e1      	ldr	r1, [r4, #12]
 8003882:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003886:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003888:	4969      	ldr	r1, [pc, #420]	@ (8003a30 <UART_SetConfig+0x1d0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800388a:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800388c:	428a      	cmp	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800388e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003890:	6891      	ldr	r1, [r2, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003892:	d032      	beq.n	80038fa <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 8003894:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003896:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800389a:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800389c:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800389e:	4965      	ldr	r1, [pc, #404]	@ (8003a34 <UART_SetConfig+0x1d4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038a0:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a2:	428a      	cmp	r2, r1
 80038a4:	d115      	bne.n	80038d2 <UART_SetConfig+0x72>
 80038a6:	4b64      	ldr	r3, [pc, #400]	@ (8003a38 <UART_SetConfig+0x1d8>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	f000 8088 	beq.w	80039c6 <UART_SetConfig+0x166>
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d072      	beq.n	80039a0 <UART_SetConfig+0x140>
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d068      	beq.n	8003990 <UART_SetConfig+0x130>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038be:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80038c2:	f000 808d 	beq.w	80039e0 <UART_SetConfig+0x180>
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c6:	f7ff fc99 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d16d      	bne.n	80039aa <UART_SetConfig+0x14a>
        pclk = (uint32_t) HSI_VALUE;
 80038ce:	2000      	movs	r0, #0
 80038d0:	e024      	b.n	800391c <UART_SetConfig+0xbc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038d2:	4b5a      	ldr	r3, [pc, #360]	@ (8003a3c <UART_SetConfig+0x1dc>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d14d      	bne.n	8003974 <UART_SetConfig+0x114>
 80038d8:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d818      	bhi.n	800391a <UART_SetConfig+0xba>
 80038e8:	e8df f003 	tbb	[pc, r3]
 80038ec:	17171774 	.word	0x17171774
 80038f0:	17171752 	.word	0x17171752
 80038f4:	1717176d 	.word	0x1717176d
 80038f8:	5a          	.byte	0x5a
 80038f9:	00          	.byte	0x00
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038fa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80038fe:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003900:	484d      	ldr	r0, [pc, #308]	@ (8003a38 <UART_SetConfig+0x1d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003902:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003904:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8003908:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800390c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003910:	d05e      	beq.n	80039d0 <UART_SetConfig+0x170>
 8003912:	d907      	bls.n	8003924 <UART_SetConfig+0xc4>
 8003914:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003918:	d00c      	beq.n	8003934 <UART_SetConfig+0xd4>
        ret = HAL_ERROR;
 800391a:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8003922:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003924:	b30b      	cbz	r3, 800396a <UART_SetConfig+0x10a>
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800392a:	d1f6      	bne.n	800391a <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 800392c:	f7ff f816 	bl	800295c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003930:	b910      	cbnz	r0, 8003938 <UART_SetConfig+0xd8>
 8003932:	e7cc      	b.n	80038ce <UART_SetConfig+0x6e>
        pclk = (uint32_t) LSE_VALUE;
 8003934:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003938:	6862      	ldr	r2, [r4, #4]
 800393a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800393e:	4283      	cmp	r3, r0
 8003940:	d8eb      	bhi.n	800391a <UART_SetConfig+0xba>
 8003942:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003946:	d8e8      	bhi.n	800391a <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003948:	0851      	lsrs	r1, r2, #1
 800394a:	2300      	movs	r3, #0
 800394c:	468c      	mov	ip, r1
 800394e:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8003952:	4619      	mov	r1, r3
 8003954:	fbe0 c105 	umlal	ip, r1, r0, r5
 8003958:	4660      	mov	r0, ip
 800395a:	f7fd f995 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800395e:	4b38      	ldr	r3, [pc, #224]	@ (8003a40 <UART_SetConfig+0x1e0>)
 8003960:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8003964:	429a      	cmp	r2, r3
 8003966:	d8d8      	bhi.n	800391a <UART_SetConfig+0xba>
 8003968:	e02a      	b.n	80039c0 <UART_SetConfig+0x160>
        pclk = HAL_RCC_GetPCLK1Freq();
 800396a:	f7ff fc35 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800396e:	2800      	cmp	r0, #0
 8003970:	d1e2      	bne.n	8003938 <UART_SetConfig+0xd8>
 8003972:	e7ac      	b.n	80038ce <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003974:	4b33      	ldr	r3, [pc, #204]	@ (8003a44 <UART_SetConfig+0x1e4>)
 8003976:	429a      	cmp	r2, r3
 8003978:	d1cf      	bne.n	800391a <UART_SetConfig+0xba>
 800397a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a38 <UART_SetConfig+0x1d8>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003980:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003984:	2b20      	cmp	r3, #32
 8003986:	d01e      	beq.n	80039c6 <UART_SetConfig+0x166>
 8003988:	d808      	bhi.n	800399c <UART_SetConfig+0x13c>
 800398a:	b31b      	cbz	r3, 80039d4 <UART_SetConfig+0x174>
 800398c:	2b10      	cmp	r3, #16
 800398e:	d1c4      	bne.n	800391a <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003990:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003994:	d043      	beq.n	8003a1e <UART_SetConfig+0x1be>
        pclk = HAL_RCC_GetSysClockFreq();
 8003996:	f7fe ffe1 	bl	800295c <HAL_RCC_GetSysClockFreq>
        break;
 800399a:	e796      	b.n	80038ca <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800399c:	2b30      	cmp	r3, #48	@ 0x30
 800399e:	d1bc      	bne.n	800391a <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039a0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80039a4:	d038      	beq.n	8003a18 <UART_SetConfig+0x1b8>
        pclk = (uint32_t) LSE_VALUE;
 80039a6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039aa:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ac:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039b0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80039b4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b8:	f1a0 0310 	sub.w	r3, r0, #16
 80039bc:	4293      	cmp	r3, r2
 80039be:	d8ac      	bhi.n	800391a <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	60d8      	str	r0, [r3, #12]
 80039c4:	e783      	b.n	80038ce <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80039ca:	d023      	beq.n	8003a14 <UART_SetConfig+0x1b4>
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	481e      	ldr	r0, [pc, #120]	@ (8003a48 <UART_SetConfig+0x1e8>)
 80039ce:	e7ec      	b.n	80039aa <UART_SetConfig+0x14a>
        pclk = (uint32_t) HSI_VALUE;
 80039d0:	481d      	ldr	r0, [pc, #116]	@ (8003a48 <UART_SetConfig+0x1e8>)
 80039d2:	e7b1      	b.n	8003938 <UART_SetConfig+0xd8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80039d8:	d024      	beq.n	8003a24 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80039da:	f7ff fbfd 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
        break;
 80039de:	e774      	b.n	80038ca <UART_SetConfig+0x6a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e0:	f7ff fc0c 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80039e4:	2800      	cmp	r0, #0
 80039e6:	f43f af72 	beq.w	80038ce <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039ea:	0043      	lsls	r3, r0, #1
 80039ec:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ee:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039f2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80039f6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fa:	f1a3 0210 	sub.w	r2, r3, #16
 80039fe:	428a      	cmp	r2, r1
 8003a00:	d88b      	bhi.n	800391a <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a02:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003a06:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a08:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a0a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60cb      	str	r3, [r1, #12]
 8003a12:	e75c      	b.n	80038ce <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a14:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <UART_SetConfig+0x1ec>)
 8003a16:	e7e9      	b.n	80039ec <UART_SetConfig+0x18c>
 8003a18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a1c:	e7e6      	b.n	80039ec <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1e:	f7fe ff9d 	bl	800295c <HAL_RCC_GetSysClockFreq>
        break;
 8003a22:	e7df      	b.n	80039e4 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7ff fbd8 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
        break;
 8003a28:	e7dc      	b.n	80039e4 <UART_SetConfig+0x184>
 8003a2a:	bf00      	nop
 8003a2c:	efff69f3 	.word	0xefff69f3
 8003a30:	40008000 	.word	0x40008000
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40004400 	.word	0x40004400
 8003a40:	000ffcff 	.word	0x000ffcff
 8003a44:	40004800 	.word	0x40004800
 8003a48:	00f42400 	.word	0x00f42400
 8003a4c:	01e84800 	.word	0x01e84800

08003a50 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003a52:	071a      	lsls	r2, r3, #28
{
 8003a54:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a56:	d506      	bpl.n	8003a66 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a58:	6801      	ldr	r1, [r0, #0]
 8003a5a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003a5c:	684a      	ldr	r2, [r1, #4]
 8003a5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a62:	4322      	orrs	r2, r4
 8003a64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a66:	07dc      	lsls	r4, r3, #31
 8003a68:	d506      	bpl.n	8003a78 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a6a:	6801      	ldr	r1, [r0, #0]
 8003a6c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8003a6e:	684a      	ldr	r2, [r1, #4]
 8003a70:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003a74:	4322      	orrs	r2, r4
 8003a76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a78:	0799      	lsls	r1, r3, #30
 8003a7a:	d506      	bpl.n	8003a8a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a7c:	6801      	ldr	r1, [r0, #0]
 8003a7e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8003a80:	684a      	ldr	r2, [r1, #4]
 8003a82:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003a86:	4322      	orrs	r2, r4
 8003a88:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a8a:	075a      	lsls	r2, r3, #29
 8003a8c:	d506      	bpl.n	8003a9c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a8e:	6801      	ldr	r1, [r0, #0]
 8003a90:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8003a92:	684a      	ldr	r2, [r1, #4]
 8003a94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a98:	4322      	orrs	r2, r4
 8003a9a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a9c:	06dc      	lsls	r4, r3, #27
 8003a9e:	d506      	bpl.n	8003aae <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aa0:	6801      	ldr	r1, [r0, #0]
 8003aa2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8003aa4:	688a      	ldr	r2, [r1, #8]
 8003aa6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003aaa:	4322      	orrs	r2, r4
 8003aac:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aae:	0699      	lsls	r1, r3, #26
 8003ab0:	d506      	bpl.n	8003ac0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab2:	6801      	ldr	r1, [r0, #0]
 8003ab4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8003ab6:	688a      	ldr	r2, [r1, #8]
 8003ab8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003abc:	4322      	orrs	r2, r4
 8003abe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac0:	065a      	lsls	r2, r3, #25
 8003ac2:	d509      	bpl.n	8003ad8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ac4:	6801      	ldr	r1, [r0, #0]
 8003ac6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8003ac8:	684a      	ldr	r2, [r1, #4]
 8003aca:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003ace:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ad0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ad6:	d00b      	beq.n	8003af0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	d506      	bpl.n	8003aea <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003adc:	6802      	ldr	r2, [r0, #0]
 8003ade:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003ae0:	6853      	ldr	r3, [r2, #4]
 8003ae2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6053      	str	r3, [r2, #4]
}
 8003aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aee:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af0:	684a      	ldr	r2, [r1, #4]
 8003af2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003af4:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8003af8:	4322      	orrs	r2, r4
 8003afa:	604a      	str	r2, [r1, #4]
 8003afc:	e7ec      	b.n	8003ad8 <UART_AdvFeatureConfig+0x88>
 8003afe:	bf00      	nop

08003b00 <UART_WaitOnFlagUntilTimeout>:
{
 8003b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b04:	9f08      	ldr	r7, [sp, #32]
 8003b06:	460d      	mov	r5, r1
 8003b08:	4680      	mov	r8, r0
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	6801      	ldr	r1, [r0, #0]
{
 8003b0c:	4616      	mov	r6, r2
 8003b0e:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b10:	e001      	b.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	1c78      	adds	r0, r7, #1
 8003b14:	d10a      	bne.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x2c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b16:	69cc      	ldr	r4, [r1, #28]
 8003b18:	ea35 0404 	bics.w	r4, r5, r4
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2401      	moveq	r4, #1
 8003b20:	2400      	movne	r4, #0
 8003b22:	42b4      	cmp	r4, r6
 8003b24:	d0f5      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8003b26:	2000      	movs	r0, #0
}
 8003b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2c:	f7fe fa6e 	bl	800200c <HAL_GetTick>
 8003b30:	eba0 0009 	sub.w	r0, r0, r9
 8003b34:	42b8      	cmp	r0, r7
 8003b36:	d81b      	bhi.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x70>
 8003b38:	b1d7      	cbz	r7, 8003b70 <UART_WaitOnFlagUntilTimeout+0x70>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b3a:	f8d8 1000 	ldr.w	r1, [r8]
 8003b3e:	680b      	ldr	r3, [r1, #0]
 8003b40:	075a      	lsls	r2, r3, #29
 8003b42:	d5e8      	bpl.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x16>
 8003b44:	2d80      	cmp	r5, #128	@ 0x80
 8003b46:	d0e6      	beq.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x16>
 8003b48:	2d40      	cmp	r5, #64	@ 0x40
 8003b4a:	d0e4      	beq.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b4c:	69cc      	ldr	r4, [r1, #28]
 8003b4e:	f014 0408 	ands.w	r4, r4, #8
 8003b52:	d10f      	bne.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b54:	69cb      	ldr	r3, [r1, #28]
 8003b56:	051b      	lsls	r3, r3, #20
 8003b58:	d5dd      	bpl.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b5e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8003b60:	4640      	mov	r0, r8
 8003b62:	f7ff fe4d 	bl	8003800 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b66:	2320      	movs	r3, #32
 8003b68:	f8c8 3084 	str.w	r3, [r8, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003b6c:	f888 4078 	strb.w	r4, [r8, #120]	@ 0x78
        return HAL_TIMEOUT;
 8003b70:	2003      	movs	r0, #3
 8003b72:	e7d9      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b74:	2408      	movs	r4, #8
          UART_EndRxTransfer(huart);
 8003b76:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b78:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 8003b7a:	f7ff fe41 	bl	8003800 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003b7e:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b80:	f8c8 4084 	str.w	r4, [r8, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003b84:	f888 3078 	strb.w	r3, [r8, #120]	@ 0x78
          return HAL_ERROR;
 8003b88:	2001      	movs	r0, #1
 8003b8a:	e7cd      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x28>

08003b8c <UART_CheckIdleState>:
{
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	2600      	movs	r6, #0
{
 8003b92:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b94:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8003b98:	f7fe fa38 	bl	800200c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8003ba2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ba4:	d40f      	bmi.n	8003bc6 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	075b      	lsls	r3, r3, #29
 8003baa:	d425      	bmi.n	8003bf8 <UART_CheckIdleState+0x6c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bac:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003bae:	2220      	movs	r2, #32
 8003bb0:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8003bb2:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb8:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bba:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	4632      	mov	r2, r6
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7ff ff93 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d0e2      	beq.n	8003ba6 <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	e843 2100 	strex	r1, r2, [r3]
 8003bec:	2900      	cmp	r1, #0
 8003bee:	d1f7      	bne.n	8003be0 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8003bf4:	2003      	movs	r0, #3
 8003bf6:	e7e1      	b.n	8003bbc <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	462b      	mov	r3, r5
 8003c02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c06:	4620      	mov	r0, r4
 8003c08:	f7ff ff7a 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d0cd      	beq.n	8003bac <UART_CheckIdleState+0x20>
 8003c10:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c16:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	e843 2100 	strex	r1, r2, [r3]
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	d1f7      	bne.n	8003c12 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	f103 0208 	add.w	r2, r3, #8
 8003c26:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	f103 0008 	add.w	r0, r3, #8
 8003c32:	e840 2100 	strex	r1, r2, [r0]
 8003c36:	2900      	cmp	r1, #0
 8003c38:	d1f3      	bne.n	8003c22 <UART_CheckIdleState+0x96>
      huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	2320      	movs	r3, #32
 8003c3c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8003c40:	e7d8      	b.n	8003bf4 <UART_CheckIdleState+0x68>
 8003c42:	bf00      	nop

08003c44 <HAL_UART_Init>:
  if (huart == NULL)
 8003c44:	b370      	cbz	r0, 8003ca4 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c46:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8003c48:	b510      	push	{r4, lr}
 8003c4a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4c:	b32b      	cbz	r3, 8003c9a <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8003c4e:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c50:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8003c52:	2324      	movs	r3, #36	@ 0x24
 8003c54:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003c56:	6813      	ldr	r3, [r2, #0]
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c5e:	b9c1      	cbnz	r1, 8003c92 <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c60:	4620      	mov	r0, r4
 8003c62:	f7ff fdfd 	bl	8003860 <UART_SetConfig>
 8003c66:	2801      	cmp	r0, #1
 8003c68:	d011      	beq.n	8003c8e <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c7a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003c82:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003c8a:	f7ff bf7f 	b.w	8003b8c <UART_CheckIdleState>
}
 8003c8e:	2001      	movs	r0, #1
 8003c90:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8003c92:	4620      	mov	r0, r4
 8003c94:	f7ff fedc 	bl	8003a50 <UART_AdvFeatureConfig>
 8003c98:	e7e2      	b.n	8003c60 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8003c9a:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8003c9e:	f7fe f855 	bl	8001d4c <HAL_UART_MspInit>
 8003ca2:	e7d4      	b.n	8003c4e <HAL_UART_Init+0xa>
}
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	4770      	bx	lr

08003ca8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ca8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003caa:	f001 f85b 	bl	8004d64 <vTaskStartScheduler>
  
  return osOK;
}
 8003cae:	2000      	movs	r0, #0
 8003cb0:	bd08      	pop	{r3, pc}
 8003cb2:	bf00      	nop

08003cb4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4684      	mov	ip, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cb8:	6945      	ldr	r5, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cba:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cbe:	6840      	ldr	r0, [r0, #4]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cc0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
{
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cc8:	f8dc 1000 	ldr.w	r1, [ip]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ccc:	b17d      	cbz	r5, 8003cee <osThreadCreate+0x3a>
 8003cce:	f8dc 6018 	ldr.w	r6, [ip, #24]
 8003cd2:	b166      	cbz	r6, 8003cee <osThreadCreate+0x3a>
  if (priority != osPriorityError) {
 8003cd4:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8003cd8:	bf14      	ite	ne
 8003cda:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cde:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ce0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8003ce4:	9400      	str	r4, [sp, #0]
 8003ce6:	f000 ffd3 	bl	8004c90 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8003cea:	b006      	add	sp, #24
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8003cee:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8003cf2:	bf14      	ite	ne
 8003cf4:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cf8:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cfa:	9400      	str	r4, [sp, #0]
 8003cfc:	ac05      	add	r4, sp, #20
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	9401      	str	r4, [sp, #4]
 8003d02:	f000 ffff 	bl	8004d04 <xTaskCreate>
 8003d06:	2801      	cmp	r0, #1
  return handle;
 8003d08:	bf0c      	ite	eq
 8003d0a:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8003d0c:	2000      	movne	r0, #0
}
 8003d0e:	b006      	add	sp, #24
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
 8003d12:	bf00      	nop

08003d14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d14:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d16:	2801      	cmp	r0, #1
 8003d18:	bf38      	it	cc
 8003d1a:	2001      	movcc	r0, #1
 8003d1c:	f001 f9f2 	bl	8005104 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d20:	2000      	movs	r0, #0
 8003d22:	bd08      	pop	{r3, pc}

08003d24 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003d24:	4603      	mov	r3, r0
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003d26:	6882      	ldr	r2, [r0, #8]
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	6800      	ldr	r0, [r0, #0]
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003d2c:	b14a      	cbz	r2, 8003d42 <osMessageCreate+0x1e>
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	b13b      	cbz	r3, 8003d42 <osMessageCreate+0x1e>
{
 8003d32:	b510      	push	{r4, lr}
 8003d34:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003d36:	2400      	movs	r4, #0
 8003d38:	9400      	str	r4, [sp, #0]
 8003d3a:	f000 f991 	bl	8004060 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003d42:	2200      	movs	r2, #0
 8003d44:	f000 b9d6 	b.w	80040f4 <xQueueGenericCreate>

08003d48 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d48:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d4c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d50:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d52:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d56:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d5a:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop

08003d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop

08003d68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d68:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003d6a:	6803      	ldr	r3, [r0, #0]
{
 8003d6c:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d6e:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 8003d70:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d72:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d76:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d78:	6091      	str	r1, [r2, #8]
}
 8003d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8003d7e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003d80:	6003      	str	r3, [r0, #0]
}
 8003d82:	4770      	bx	lr

08003d84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d84:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d86:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d88:	1c6b      	adds	r3, r5, #1
 8003d8a:	d010      	beq.n	8003dae <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d8c:	f100 0308 	add.w	r3, r0, #8
 8003d90:	461c      	mov	r4, r3
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	42aa      	cmp	r2, r5
 8003d98:	d9fa      	bls.n	8003d90 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003d9a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d9c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8003d9e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003da0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003da2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003da4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8003da6:	6108      	str	r0, [r1, #16]
}
 8003da8:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8003daa:	6002      	str	r2, [r0, #0]
}
 8003dac:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dae:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	e7f2      	b.n	8003d9a <vListInsert+0x16>

08003db4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003db4:	6903      	ldr	r3, [r0, #16]
{
 8003db6:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003db8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dbc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dbe:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8003dc0:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dc2:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dc4:	bf08      	it	eq
 8003dc6:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003dc8:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003dca:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8003dce:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8003dd0:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8003dd2:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003dd4:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8003dd6:	6818      	ldr	r0, [r3, #0]
}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop

08003ddc <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ddc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8003dde:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003de0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8003de2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003de4:	b92b      	cbnz	r3, 8003df2 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003de6:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003de8:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dea:	b35e      	cbz	r6, 8003e44 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 8003dec:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dee:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8003df0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003df2:	4616      	mov	r6, r2
 8003df4:	b982      	cbnz	r2, 8003e18 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003df6:	461a      	mov	r2, r3
 8003df8:	6840      	ldr	r0, [r0, #4]
 8003dfa:	f004 fbcc 	bl	8008596 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dfe:	6863      	ldr	r3, [r4, #4]
 8003e00:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e02:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e04:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e06:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e08:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e0a:	bf24      	itt	cs
 8003e0c:	6823      	ldrcs	r3, [r4, #0]
 8003e0e:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e10:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8003e12:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e14:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68c0      	ldr	r0, [r0, #12]
 8003e1c:	f004 fbbb 	bl	8008596 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e20:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003e22:	68e3      	ldr	r3, [r4, #12]
 8003e24:	4251      	negs	r1, r2
 8003e26:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e28:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e2a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d202      	bcs.n	8003e36 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e30:	68a3      	ldr	r3, [r4, #8]
 8003e32:	440b      	add	r3, r1
 8003e34:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003e36:	2e02      	cmp	r6, #2
 8003e38:	d1ea      	bne.n	8003e10 <prvCopyDataToQueue+0x34>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e3a:	2d01      	cmp	r5, #1
 8003e3c:	bf38      	it	cc
 8003e3e:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 8003e40:	2000      	movs	r0, #0
 8003e42:	e7d4      	b.n	8003dee <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e44:	6880      	ldr	r0, [r0, #8]
 8003e46:	f001 fafb 	bl	8005440 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e4a:	60a6      	str	r6, [r4, #8]
 8003e4c:	e7cf      	b.n	8003dee <prvCopyDataToQueue+0x12>
 8003e4e:	bf00      	nop

08003e50 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e54:	f001 fc2e 	bl	80056b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e58:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8003e5c:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e5e:	2c00      	cmp	r4, #0
 8003e60:	dd14      	ble.n	8003e8c <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e62:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8003e66:	e003      	b.n	8003e70 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e68:	1e63      	subs	r3, r4, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e6e:	b16a      	cbz	r2, 8003e8c <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e70:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e72:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e74:	b153      	cbz	r3, 8003e8c <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e76:	f001 f9dd 	bl	8005234 <xTaskRemoveFromEventList>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d0f4      	beq.n	8003e68 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8003e7e:	f001 fa71 	bl	8005364 <vTaskMissedYield>
			--cTxLock;
 8003e82:	1e63      	subs	r3, r4, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e88:	2a00      	cmp	r2, #0
 8003e8a:	d1f1      	bne.n	8003e70 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e8c:	23ff      	movs	r3, #255	@ 0xff
 8003e8e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003e92:	f001 fc31 	bl	80056f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e96:	f001 fc0d 	bl	80056b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e9a:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8003e9e:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ea0:	2c00      	cmp	r4, #0
 8003ea2:	dd14      	ble.n	8003ece <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea4:	f105 0610 	add.w	r6, r5, #16
 8003ea8:	e003      	b.n	8003eb2 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003eaa:	1e63      	subs	r3, r4, #1
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eb0:	b16a      	cbz	r2, 8003ece <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb2:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb4:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb6:	b153      	cbz	r3, 8003ece <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb8:	f001 f9bc 	bl	8005234 <xTaskRemoveFromEventList>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d0f4      	beq.n	8003eaa <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8003ec0:	f001 fa50 	bl	8005364 <vTaskMissedYield>
				--cRxLock;
 8003ec4:	1e63      	subs	r3, r4, #1
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	d1f1      	bne.n	8003eb2 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ece:	23ff      	movs	r3, #255	@ 0xff
 8003ed0:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8003ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003ed8:	f001 bc0e 	b.w	80056f8 <vPortExitCritical>

08003edc <xQueueGenericReset>:
{
 8003edc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003ede:	b1e0      	cbz	r0, 8003f1a <xQueueGenericReset+0x3e>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8003ee4:	f001 fbe6 	bl	80056b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ee8:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 8003eec:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eee:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef0:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef4:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef6:	440a      	add	r2, r1
 8003ef8:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003efa:	2200      	movs	r2, #0
 8003efc:	63a2      	str	r2, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003efe:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8003f00:	22ff      	movs	r2, #255	@ 0xff
 8003f02:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f06:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8003f08:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8003f0c:	b975      	cbnz	r5, 8003f2c <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	b9c3      	cbnz	r3, 8003f44 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8003f12:	f001 fbf1 	bl	80056f8 <vPortExitCritical>
}
 8003f16:	2001      	movs	r0, #1
 8003f18:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003f2a:	e7fe      	b.n	8003f2a <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f2c:	f104 0010 	add.w	r0, r4, #16
 8003f30:	f7ff ff0a 	bl	8003d48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f34:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003f38:	f7ff ff06 	bl	8003d48 <vListInitialise>
	taskEXIT_CRITICAL();
 8003f3c:	f001 fbdc 	bl	80056f8 <vPortExitCritical>
}
 8003f40:	2001      	movs	r0, #1
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f44:	f104 0010 	add.w	r0, r4, #16
 8003f48:	f001 f974 	bl	8005234 <xTaskRemoveFromEventList>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d0e0      	beq.n	8003f12 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003f50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f58:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	e7d5      	b.n	8003f12 <xQueueGenericReset+0x36>
 8003f66:	bf00      	nop

08003f68 <prvInitialiseNewQueue>:
{
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	9c04      	ldr	r4, [sp, #16]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f6c:	2900      	cmp	r1, #0
 8003f6e:	bf08      	it	eq
 8003f70:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8003f72:	e9c4 010f 	strd	r0, r1, [r4, #60]	@ 0x3c
{
 8003f76:	461d      	mov	r5, r3
 8003f78:	4606      	mov	r6, r0
 8003f7a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4620      	mov	r0, r4
 8003f80:	f7ff ffac 	bl	8003edc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003f84:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 8003f88:	2d04      	cmp	r5, #4
 8003f8a:	d824      	bhi.n	8003fd6 <prvInitialiseNewQueue+0x6e>
 8003f8c:	e8df f005 	tbb	[pc, r5]
 8003f90:	0b23131b 	.word	0x0b23131b
 8003f94:	03          	.byte	0x03
 8003f95:	00          	.byte	0x00
 8003f96:	4621      	mov	r1, r4
 8003f98:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd8 <prvInitialiseNewQueue+0x70>)
}
 8003f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	traceQUEUE_CREATE( pxNewQueue );
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2017      	movs	r0, #23
 8003fa2:	f002 bfb9 	b.w	8006f18 <xTraceObjectRegisterWithoutHandle>
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd8 <prvInitialiseNewQueue+0x70>)
}
 8003faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	traceQUEUE_CREATE( pxNewQueue );
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2012      	movs	r0, #18
 8003fb2:	f002 bfb1 	b.w	8006f18 <xTraceObjectRegisterWithoutHandle>
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	4a07      	ldr	r2, [pc, #28]	@ (8003fd8 <prvInitialiseNewQueue+0x70>)
}
 8003fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	traceQUEUE_CREATE( pxNewQueue );
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2013      	movs	r0, #19
 8003fc2:	f002 bfa9 	b.w	8006f18 <xTraceObjectRegisterWithoutHandle>
 8003fc6:	4633      	mov	r3, r6
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4a03      	ldr	r2, [pc, #12]	@ (8003fd8 <prvInitialiseNewQueue+0x70>)
}
 8003fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	traceQUEUE_CREATE( pxNewQueue );
 8003fd0:	2011      	movs	r0, #17
 8003fd2:	f002 bfa1 	b.w	8006f18 <xTraceObjectRegisterWithoutHandle>
}
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	0800bcf0 	.word	0x0800bcf0

08003fdc <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe0:	fb01 f000 	mul.w	r0, r1, r0
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 8003fe4:	b083      	sub	sp, #12
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fe6:	3050      	adds	r0, #80	@ 0x50
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 8003fe8:	460e      	mov	r6, r1
 8003fea:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fec:	f001 fcd6 	bl	800599c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	b168      	cbz	r0, 8004010 <xQueueGenericCreate.part.0+0x34>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ffa:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8003ffe:	9000      	str	r0, [sp, #0]
 8004000:	463b      	mov	r3, r7
 8004002:	4631      	mov	r1, r6
 8004004:	4628      	mov	r0, r5
 8004006:	f7ff ffaf 	bl	8003f68 <prvInitialiseNewQueue>
	}
 800400a:	4620      	mov	r0, r4
 800400c:	b003      	add	sp, #12
 800400e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8004010:	2f04      	cmp	r7, #4
 8004012:	d8fa      	bhi.n	800400a <xQueueGenericCreate.part.0+0x2e>
 8004014:	a301      	add	r3, pc, #4	@ (adr r3, 800401c <xQueueGenericCreate.part.0+0x40>)
 8004016:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004055 	.word	0x08004055
 8004020:	08004049 	.word	0x08004049
 8004024:	0800400b 	.word	0x0800400b
 8004028:	0800403d 	.word	0x0800403d
 800402c:	08004031 	.word	0x08004031
 8004030:	2200      	movs	r2, #0
 8004032:	4611      	mov	r1, r2
 8004034:	2047      	movs	r0, #71	@ 0x47
 8004036:	f002 f87f 	bl	8006138 <xTraceEventCreate2>
		return pxNewQueue;
 800403a:	e7e6      	b.n	800400a <xQueueGenericCreate.part.0+0x2e>
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800403c:	2200      	movs	r2, #0
 800403e:	4611      	mov	r1, r2
 8004040:	2042      	movs	r0, #66	@ 0x42
 8004042:	f002 f879 	bl	8006138 <xTraceEventCreate2>
 8004046:	e7e0      	b.n	800400a <xQueueGenericCreate.part.0+0x2e>
 8004048:	2200      	movs	r2, #0
 800404a:	4611      	mov	r1, r2
 800404c:	2043      	movs	r0, #67	@ 0x43
 800404e:	f002 f873 	bl	8006138 <xTraceEventCreate2>
 8004052:	e7da      	b.n	800400a <xQueueGenericCreate.part.0+0x2e>
 8004054:	462a      	mov	r2, r5
 8004056:	2100      	movs	r1, #0
 8004058:	2041      	movs	r0, #65	@ 0x41
 800405a:	f002 f86d 	bl	8006138 <xTraceEventCreate2>
 800405e:	e7d4      	b.n	800400a <xQueueGenericCreate.part.0+0x2e>

08004060 <xQueueGenericCreateStatic>:
	{
 8004060:	b530      	push	{r4, r5, lr}
 8004062:	b085      	sub	sp, #20
 8004064:	f89d c020 	ldrb.w	ip, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004068:	b940      	cbnz	r0, 800407c <xQueueGenericCreateStatic+0x1c>
 800406a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	e7fe      	b.n	800407a <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800407c:	461c      	mov	r4, r3
 800407e:	b17b      	cbz	r3, 80040a0 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004080:	b302      	cbz	r2, 80040c4 <xQueueGenericCreateStatic+0x64>
 8004082:	b1b1      	cbz	r1, 80040b2 <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004084:	2350      	movs	r3, #80	@ 0x50
 8004086:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004088:	9b03      	ldr	r3, [sp, #12]
 800408a:	2b50      	cmp	r3, #80	@ 0x50
 800408c:	d025      	beq.n	80040da <xQueueGenericCreateStatic+0x7a>
 800408e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	e7fe      	b.n	800409e <xQueueGenericCreateStatic+0x3e>
 80040a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80040b0:	e7fe      	b.n	80040b0 <xQueueGenericCreateStatic+0x50>
 80040b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040c2:	e7fe      	b.n	80040c2 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d0dd      	beq.n	8004084 <xQueueGenericCreateStatic+0x24>
 80040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	e7fe      	b.n	80040d8 <xQueueGenericCreateStatic+0x78>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040da:	4663      	mov	r3, ip
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040dc:	f04f 0c01 	mov.w	ip, #1
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040e0:	9400      	str	r4, [sp, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040e2:	f884 c046 	strb.w	ip, [r4, #70]	@ 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040e6:	9d03      	ldr	r5, [sp, #12]
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040e8:	f7ff ff3e 	bl	8003f68 <prvInitialiseNewQueue>
	}
 80040ec:	4620      	mov	r0, r4
 80040ee:	b005      	add	sp, #20
 80040f0:	bd30      	pop	{r4, r5, pc}
 80040f2:	bf00      	nop

080040f4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040f4:	b940      	cbnz	r0, 8004108 <xQueueGenericCreate+0x14>
 80040f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	e7fe      	b.n	8004106 <xQueueGenericCreate+0x12>
 8004108:	f7ff bf68 	b.w	8003fdc <xQueueGenericCreate.part.0>

0800410c <xQueueGenericSend>:
{
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410e:	b085      	sub	sp, #20
 8004110:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004112:	2800      	cmp	r0, #0
 8004114:	d035      	beq.n	8004182 <xQueueGenericSend+0x76>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004116:	460e      	mov	r6, r1
 8004118:	461d      	mov	r5, r3
 800411a:	4604      	mov	r4, r0
 800411c:	b329      	cbz	r1, 800416a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800411e:	2d02      	cmp	r5, #2
 8004120:	d10b      	bne.n	800413a <xQueueGenericSend+0x2e>
 8004122:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d008      	beq.n	800413a <xQueueGenericSend+0x2e>
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	e7fe      	b.n	8004138 <xQueueGenericSend+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800413a:	f001 f919 	bl	8005370 <xTaskGetSchedulerState>
 800413e:	b348      	cbz	r0, 8004194 <xQueueGenericSend+0x88>
		taskENTER_CRITICAL();
 8004140:	f001 fab8 	bl	80056b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004144:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004146:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004148:	429a      	cmp	r2, r3
 800414a:	f0c0 8092 	bcc.w	8004272 <xQueueGenericSend+0x166>
 800414e:	2d02      	cmp	r5, #2
 8004150:	d12c      	bne.n	80041ac <xQueueGenericSend+0xa0>
				traceQUEUE_SEND( pxQueue );
 8004152:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8004156:	2b04      	cmp	r3, #4
 8004158:	f200 80ae 	bhi.w	80042b8 <xQueueGenericSend+0x1ac>
 800415c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004160:	01040109 	.word	0x01040109
 8004164:	00ef00ef 	.word	0x00ef00ef
 8004168:	00ff      	.short	0x00ff
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800416a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0d6      	beq.n	800411e <xQueueGenericSend+0x12>
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	e7fe      	b.n	8004180 <xQueueGenericSend+0x74>
 8004182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004192:	e7fe      	b.n	8004192 <xQueueGenericSend+0x86>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004194:	9b01      	ldr	r3, [sp, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0d2      	beq.n	8004140 <xQueueGenericSend+0x34>
 800419a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	e7fe      	b.n	80041aa <xQueueGenericSend+0x9e>
 80041ac:	2000      	movs	r0, #0
		prvLockQueue( pxQueue );
 80041ae:	4607      	mov	r7, r0
 80041b0:	e00d      	b.n	80041ce <xQueueGenericSend+0xc2>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80041b2:	f001 faa1 	bl	80056f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80041b6:	4620      	mov	r0, r4
 80041b8:	f7ff fe4a 	bl	8003e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041bc:	f000 ff92 	bl	80050e4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80041c0:	f001 fa78 	bl	80056b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80041c6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d852      	bhi.n	8004272 <xQueueGenericSend+0x166>
				traceQUEUE_SEND( pxQueue );
 80041cc:	2001      	movs	r0, #1
				if( xTicksToWait == ( TickType_t ) 0 )
 80041ce:	9a01      	ldr	r2, [sp, #4]
 80041d0:	2a00      	cmp	r2, #0
 80041d2:	f000 8088 	beq.w	80042e6 <xQueueGenericSend+0x1da>
				else if( xEntryTimeSet == pdFALSE )
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d062      	beq.n	80042a0 <xQueueGenericSend+0x194>
		taskEXIT_CRITICAL();
 80041da:	f001 fa8d 	bl	80056f8 <vPortExitCritical>
		vTaskSuspendAll();
 80041de:	f000 fe07 	bl	8004df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041e2:	f001 fa67 	bl	80056b4 <vPortEnterCritical>
 80041e6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80041ea:	2bff      	cmp	r3, #255	@ 0xff
 80041ec:	bf08      	it	eq
 80041ee:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 80041f2:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80041f6:	2aff      	cmp	r2, #255	@ 0xff
 80041f8:	bf08      	it	eq
 80041fa:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 80041fe:	f001 fa7b 	bl	80056f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004202:	a901      	add	r1, sp, #4
 8004204:	a802      	add	r0, sp, #8
 8004206:	f001 f86b 	bl	80052e0 <xTaskCheckForTimeOut>
 800420a:	2800      	cmp	r0, #0
 800420c:	d176      	bne.n	80042fc <xQueueGenericSend+0x1f0>
	taskENTER_CRITICAL();
 800420e:	f001 fa51 	bl	80056b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004212:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004214:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004216:	429a      	cmp	r2, r3
 8004218:	d1cb      	bne.n	80041b2 <xQueueGenericSend+0xa6>
	taskEXIT_CRITICAL();
 800421a:	f001 fa6d 	bl	80056f8 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800421e:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8004222:	2b04      	cmp	r3, #4
 8004224:	d809      	bhi.n	800423a <xQueueGenericSend+0x12e>
 8004226:	e8df f003 	tbb	[pc, r3]
 800422a:	2d32      	.short	0x2d32
 800422c:	0303      	.short	0x0303
 800422e:	2d          	.byte	0x2d
 800422f:	00          	.byte	0x00
 8004230:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004232:	4621      	mov	r1, r4
 8004234:	2057      	movs	r0, #87	@ 0x57
 8004236:	f001 ff7f 	bl	8006138 <xTraceEventCreate2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800423a:	9901      	ldr	r1, [sp, #4]
 800423c:	f104 0010 	add.w	r0, r4, #16
 8004240:	f000 ffde 	bl	8005200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004244:	4620      	mov	r0, r4
 8004246:	f7ff fe03 	bl	8003e50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800424a:	f000 ff4b 	bl	80050e4 <xTaskResumeAll>
 800424e:	2800      	cmp	r0, #0
 8004250:	d1b6      	bne.n	80041c0 <xQueueGenericSend+0xb4>
					portYIELD_WITHIN_API();
 8004252:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800425a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8004266:	f001 fa25 	bl	80056b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800426a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800426c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800426e:	429a      	cmp	r2, r3
 8004270:	d2ac      	bcs.n	80041cc <xQueueGenericSend+0xc0>
				traceQUEUE_SEND( pxQueue );
 8004272:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8004276:	2b04      	cmp	r3, #4
 8004278:	d81e      	bhi.n	80042b8 <xQueueGenericSend+0x1ac>
 800427a:	e8df f003 	tbb	[pc, r3]
 800427e:	7515      	.short	0x7515
 8004280:	6060      	.short	0x6060
 8004282:	70          	.byte	0x70
 8004283:	00          	.byte	0x00
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8004284:	4621      	mov	r1, r4
 8004286:	2058      	movs	r0, #88	@ 0x58
 8004288:	f001 fefe 	bl	8006088 <xTraceEventCreate1>
 800428c:	e7d5      	b.n	800423a <xQueueGenericSend+0x12e>
 800428e:	2d00      	cmp	r5, #0
 8004290:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004292:	4621      	mov	r1, r4
 8004294:	bf14      	ite	ne
 8004296:	20c2      	movne	r0, #194	@ 0xc2
 8004298:	2056      	moveq	r0, #86	@ 0x56
 800429a:	f001 ff4d 	bl	8006138 <xTraceEventCreate2>
 800429e:	e7cc      	b.n	800423a <xQueueGenericSend+0x12e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042a0:	a802      	add	r0, sp, #8
 80042a2:	f001 f811 	bl	80052c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042a6:	e798      	b.n	80041da <xQueueGenericSend+0xce>
				traceQUEUE_SEND( pxQueue );
 80042a8:	2050      	movs	r0, #80	@ 0x50
 80042aa:	2d00      	cmp	r5, #0
 80042ac:	d161      	bne.n	8004372 <xQueueGenericSend+0x266>
 80042ae:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80042b0:	4621      	mov	r1, r4
 80042b2:	3201      	adds	r2, #1
 80042b4:	f001 ff40 	bl	8006138 <xTraceEventCreate2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042b8:	462a      	mov	r2, r5
 80042ba:	4631      	mov	r1, r6
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff fd8d 	bl	8003ddc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042c4:	bb43      	cbnz	r3, 8004318 <xQueueGenericSend+0x20c>
					else if( xYieldRequired != pdFALSE )
 80042c6:	b148      	cbz	r0, 80042dc <xQueueGenericSend+0x1d0>
						queueYIELD_IF_USING_PREEMPTION();
 80042c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80042cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80042dc:	f001 fa0c 	bl	80056f8 <vPortExitCritical>
				return pdPASS;
 80042e0:	2001      	movs	r0, #1
}
 80042e2:	b005      	add	sp, #20
 80042e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80042e6:	f001 fa07 	bl	80056f8 <vPortExitCritical>
					traceQUEUE_SEND_FAILED( pxQueue );
 80042ea:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d81e      	bhi.n	8004330 <xQueueGenericSend+0x224>
 80042f2:	e8df f003 	tbb	[pc, r3]
 80042f6:	1f2b      	.short	0x1f2b
 80042f8:	1818      	.short	0x1818
 80042fa:	1f          	.byte	0x1f
 80042fb:	00          	.byte	0x00
			prvUnlockQueue( pxQueue );
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7ff fda7 	bl	8003e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004302:	f000 feef 	bl	80050e4 <xTaskResumeAll>
			traceQUEUE_SEND_FAILED( pxQueue );
 8004306:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 800430a:	2b04      	cmp	r3, #4
 800430c:	d810      	bhi.n	8004330 <xQueueGenericSend+0x224>
 800430e:	e8df f003 	tbb	[pc, r3]
 8004312:	111d      	.short	0x111d
 8004314:	0a0a      	.short	0x0a0a
 8004316:	11          	.byte	0x11
 8004317:	00          	.byte	0x00
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004318:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800431c:	f000 ff8a 	bl	8005234 <xTaskRemoveFromEventList>
 8004320:	2800      	cmp	r0, #0
 8004322:	d0db      	beq.n	80042dc <xQueueGenericSend+0x1d0>
 8004324:	e7d0      	b.n	80042c8 <xQueueGenericSend+0x1bc>
			traceQUEUE_SEND_FAILED( pxQueue );
 8004326:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004328:	4621      	mov	r1, r4
 800432a:	2054      	movs	r0, #84	@ 0x54
 800432c:	f001 ff04 	bl	8006138 <xTraceEventCreate2>
					return errQUEUE_FULL;
 8004330:	2000      	movs	r0, #0
 8004332:	e7d6      	b.n	80042e2 <xQueueGenericSend+0x1d6>
					traceQUEUE_SEND_FAILED( pxQueue );
 8004334:	4621      	mov	r1, r4
 8004336:	2055      	movs	r0, #85	@ 0x55
 8004338:	f001 fea6 	bl	8006088 <xTraceEventCreate1>
 800433c:	e7f8      	b.n	8004330 <xQueueGenericSend+0x224>
				traceQUEUE_SEND( pxQueue );
 800433e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004340:	4621      	mov	r1, r4
 8004342:	3201      	adds	r2, #1
 8004344:	2051      	movs	r0, #81	@ 0x51
 8004346:	f001 fef7 	bl	8006138 <xTraceEventCreate2>
 800434a:	e7b5      	b.n	80042b8 <xQueueGenericSend+0x1ac>
			traceQUEUE_SEND_FAILED( pxQueue );
 800434c:	2d00      	cmp	r5, #0
 800434e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004350:	4621      	mov	r1, r4
 8004352:	bf14      	ite	ne
 8004354:	20c1      	movne	r0, #193	@ 0xc1
 8004356:	2053      	moveq	r0, #83	@ 0x53
 8004358:	f001 feee 	bl	8006138 <xTraceEventCreate2>
 800435c:	e7e8      	b.n	8004330 <xQueueGenericSend+0x224>
				traceQUEUE_SEND( pxQueue );
 800435e:	4621      	mov	r1, r4
 8004360:	20c5      	movs	r0, #197	@ 0xc5
 8004362:	f001 fe91 	bl	8006088 <xTraceEventCreate1>
 8004366:	e7a7      	b.n	80042b8 <xQueueGenericSend+0x1ac>
 8004368:	4621      	mov	r1, r4
 800436a:	2052      	movs	r0, #82	@ 0x52
 800436c:	f001 fe8c 	bl	8006088 <xTraceEventCreate1>
 8004370:	e7a2      	b.n	80042b8 <xQueueGenericSend+0x1ac>
 8004372:	20c0      	movs	r0, #192	@ 0xc0
 8004374:	e79b      	b.n	80042ae <xQueueGenericSend+0x1a2>
 8004376:	bf00      	nop

08004378 <MyWrapper_xQueueGiveFromISR>:
{
 8004378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800437c:	2800      	cmp	r0, #0
 800437e:	d03f      	beq.n	8004400 <MyWrapper_xQueueGiveFromISR+0x88>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004380:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004382:	4604      	mov	r4, r0
 8004384:	b143      	cbz	r3, 8004398 <MyWrapper_xQueueGiveFromISR+0x20>
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	e7fe      	b.n	8004396 <MyWrapper_xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004398:	6803      	ldr	r3, [r0, #0]
 800439a:	460e      	mov	r6, r1
 800439c:	4615      	mov	r5, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d037      	beq.n	8004412 <MyWrapper_xQueueGiveFromISR+0x9a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043a2:	f001 faa3 	bl	80058ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043a6:	f3ef 8911 	mrs	r9, BASEPRI
 80043aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043ba:	f8d4 8038 	ldr.w	r8, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80043be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80043c0:	4598      	cmp	r8, r3
 80043c2:	d232      	bcs.n	800442a <MyWrapper_xQueueGiveFromISR+0xb2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80043c4:	f894 7045 	ldrb.w	r7, [r4, #69]	@ 0x45
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80043c8:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
			const int8_t cTxLock = pxQueue->cTxLock;
 80043cc:	b27f      	sxtb	r7, r7
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d04f      	beq.n	8004472 <MyWrapper_xQueueGiveFromISR+0xfa>
 80043d2:	3b02      	subs	r3, #2
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d805      	bhi.n	80043e4 <MyWrapper_xQueueGiveFromISR+0x6c>
 80043d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80043da:	4621      	mov	r1, r4
 80043dc:	3201      	adds	r2, #1
 80043de:	205a      	movs	r0, #90	@ 0x5a
 80043e0:	f001 feaa 	bl	8006138 <xTraceEventCreate2>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043e4:	f108 0301 	add.w	r3, r8, #1
 80043e8:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 80043ea:	1c7b      	adds	r3, r7, #1
 80043ec:	d033      	beq.n	8004456 <MyWrapper_xQueueGiveFromISR+0xde>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043ee:	1c7b      	adds	r3, r7, #1
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 80043f6:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043f8:	f389 8811 	msr	BASEPRI, r9
}
 80043fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004410:	e7fe      	b.n	8004410 <MyWrapper_xQueueGiveFromISR+0x98>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004412:	6883      	ldr	r3, [r0, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0c4      	beq.n	80043a2 <MyWrapper_xQueueGiveFromISR+0x2a>
 8004418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	e7fe      	b.n	8004428 <MyWrapper_xQueueGiveFromISR+0xb0>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800442a:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 800442e:	b14b      	cbz	r3, 8004444 <MyWrapper_xQueueGiveFromISR+0xcc>
 8004430:	3b02      	subs	r3, #2
 8004432:	2b01      	cmp	r3, #1
 8004434:	d804      	bhi.n	8004440 <MyWrapper_xQueueGiveFromISR+0xc8>
 8004436:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004438:	4621      	mov	r1, r4
 800443a:	205d      	movs	r0, #93	@ 0x5d
 800443c:	f001 fe7c 	bl	8006138 <xTraceEventCreate2>
			xReturn = errQUEUE_FULL;
 8004440:	2000      	movs	r0, #0
 8004442:	e7d9      	b.n	80043f8 <MyWrapper_xQueueGiveFromISR+0x80>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004444:	2d00      	cmp	r5, #0
 8004446:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004448:	4621      	mov	r1, r4
 800444a:	bf14      	ite	ne
 800444c:	20c4      	movne	r0, #196	@ 0xc4
 800444e:	205c      	moveq	r0, #92	@ 0x5c
 8004450:	f001 fe72 	bl	8006138 <xTraceEventCreate2>
 8004454:	e7f4      	b.n	8004440 <MyWrapper_xQueueGiveFromISR+0xc8>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004456:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0cc      	beq.n	80043f6 <MyWrapper_xQueueGiveFromISR+0x7e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800445c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004460:	f000 fee8 	bl	8005234 <xTaskRemoveFromEventList>
 8004464:	2800      	cmp	r0, #0
 8004466:	d0c6      	beq.n	80043f6 <MyWrapper_xQueueGiveFromISR+0x7e>
							if( pxHigherPriorityTaskWoken != NULL )
 8004468:	2e00      	cmp	r6, #0
 800446a:	d0c4      	beq.n	80043f6 <MyWrapper_xQueueGiveFromISR+0x7e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800446c:	2301      	movs	r3, #1
 800446e:	6033      	str	r3, [r6, #0]
 8004470:	e7c1      	b.n	80043f6 <MyWrapper_xQueueGiveFromISR+0x7e>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004472:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004474:	2d00      	cmp	r5, #0
 8004476:	f102 0201 	add.w	r2, r2, #1
 800447a:	4621      	mov	r1, r4
 800447c:	bf14      	ite	ne
 800447e:	20c3      	movne	r0, #195	@ 0xc3
 8004480:	2059      	moveq	r0, #89	@ 0x59
 8004482:	f001 fe59 	bl	8006138 <xTraceEventCreate2>
 8004486:	e7ad      	b.n	80043e4 <MyWrapper_xQueueGiveFromISR+0x6c>

08004488 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8004488:	2200      	movs	r2, #0
 800448a:	f7ff bf75 	b.w	8004378 <MyWrapper_xQueueGiveFromISR>
 800448e:	bf00      	nop

08004490 <xQueueReceive>:
{
 8004490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004492:	b085      	sub	sp, #20
 8004494:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004496:	2800      	cmp	r0, #0
 8004498:	f000 80b2 	beq.w	8004600 <xQueueReceive+0x170>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800449c:	460e      	mov	r6, r1
 800449e:	4604      	mov	r4, r0
 80044a0:	2900      	cmp	r1, #0
 80044a2:	d047      	beq.n	8004534 <xQueueReceive+0xa4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044a4:	f000 ff64 	bl	8005370 <xTaskGetSchedulerState>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d04f      	beq.n	800454c <xQueueReceive+0xbc>
		taskENTER_CRITICAL();
 80044ac:	f001 f902 	bl	80056b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044b0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044b2:	2d00      	cmp	r5, #0
 80044b4:	d167      	bne.n	8004586 <xQueueReceive+0xf6>
				if( xTicksToWait == ( TickType_t ) 0 )
 80044b6:	9b01      	ldr	r3, [sp, #4]
 80044b8:	b38b      	cbz	r3, 800451e <xQueueReceive+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044ba:	a802      	add	r0, sp, #8
 80044bc:	f000 ff04 	bl	80052c8 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 80044c0:	462f      	mov	r7, r5
		taskEXIT_CRITICAL();
 80044c2:	f001 f919 	bl	80056f8 <vPortExitCritical>
		vTaskSuspendAll();
 80044c6:	f000 fc93 	bl	8004df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ca:	f001 f8f3 	bl	80056b4 <vPortEnterCritical>
 80044ce:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80044d2:	2bff      	cmp	r3, #255	@ 0xff
 80044d4:	bf08      	it	eq
 80044d6:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 80044da:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80044de:	2bff      	cmp	r3, #255	@ 0xff
 80044e0:	bf08      	it	eq
 80044e2:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 80044e6:	f001 f907 	bl	80056f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ea:	a901      	add	r1, sp, #4
 80044ec:	a802      	add	r0, sp, #8
 80044ee:	f000 fef7 	bl	80052e0 <xTaskCheckForTimeOut>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d136      	bne.n	8004564 <xQueueReceive+0xd4>
	taskENTER_CRITICAL();
 80044f6:	f001 f8dd 	bl	80056b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d058      	beq.n	80045b2 <xQueueReceive+0x122>
	taskEXIT_CRITICAL();
 8004500:	f001 f8fa 	bl	80056f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004504:	4620      	mov	r0, r4
 8004506:	f7ff fca3 	bl	8003e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800450a:	f000 fdeb 	bl	80050e4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800450e:	f001 f8d1 	bl	80056b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004512:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004514:	2d00      	cmp	r5, #0
 8004516:	d136      	bne.n	8004586 <xQueueReceive+0xf6>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004518:	9b01      	ldr	r3, [sp, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1d1      	bne.n	80044c2 <xQueueReceive+0x32>
	taskEXIT_CRITICAL();
 800451e:	f001 f8eb 	bl	80056f8 <vPortExitCritical>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004522:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8004526:	2b04      	cmp	r3, #4
 8004528:	d879      	bhi.n	800461e <xQueueReceive+0x18e>
 800452a:	e8df f003 	tbb	[pc, r3]
 800452e:	8982      	.short	0x8982
 8004530:	7272      	.short	0x7272
 8004532:	8f          	.byte	0x8f
 8004533:	00          	.byte	0x00
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004534:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0b4      	beq.n	80044a4 <xQueueReceive+0x14>
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	e7fe      	b.n	800454a <xQueueReceive+0xba>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800454c:	9b01      	ldr	r3, [sp, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ac      	beq.n	80044ac <xQueueReceive+0x1c>
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	e7fe      	b.n	8004562 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 8004564:	4620      	mov	r0, r4
 8004566:	f7ff fc73 	bl	8003e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800456a:	f000 fdbb 	bl	80050e4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800456e:	f001 f8a1 	bl	80056b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004572:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0d2      	beq.n	800451e <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 8004578:	f001 f8be 	bl	80056f8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800457c:	f001 f89a 	bl	80056b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004580:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004582:	2d00      	cmp	r5, #0
 8004584:	d0c8      	beq.n	8004518 <xQueueReceive+0x88>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004586:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004588:	b152      	cbz	r2, 80045a0 <xQueueReceive+0x110>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800458a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800458c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800458e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004590:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004592:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004594:	bf24      	itt	cs
 8004596:	6821      	ldrcs	r1, [r4, #0]
 8004598:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800459a:	4630      	mov	r0, r6
 800459c:	f003 fffb 	bl	8008596 <memcpy>
				traceQUEUE_RECEIVE( pxQueue );
 80045a0:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d86b      	bhi.n	8004680 <xQueueReceive+0x1f0>
 80045a8:	e8df f003 	tbb	[pc, r3]
 80045ac:	6363727e 	.word	0x6363727e
 80045b0:	78          	.byte	0x78
 80045b1:	00          	.byte	0x00
	taskEXIT_CRITICAL();
 80045b2:	f001 f8a1 	bl	80056f8 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80045b6:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d809      	bhi.n	80045d2 <xQueueReceive+0x142>
 80045be:	e8df f003 	tbb	[pc, r3]
 80045c2:	0351      	.short	0x0351
 80045c4:	3131      	.short	0x3131
 80045c6:	4b          	.byte	0x4b
 80045c7:	00          	.byte	0x00
 80045c8:	9a01      	ldr	r2, [sp, #4]
 80045ca:	4621      	mov	r1, r4
 80045cc:	2068      	movs	r0, #104	@ 0x68
 80045ce:	f001 fdb3 	bl	8006138 <xTraceEventCreate2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045d2:	9901      	ldr	r1, [sp, #4]
 80045d4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80045d8:	f000 fe12 	bl	8005200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045dc:	4620      	mov	r0, r4
 80045de:	f7ff fc37 	bl	8003e50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045e2:	f000 fd7f 	bl	80050e4 <xTaskResumeAll>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d1c8      	bne.n	800457c <xQueueReceive+0xec>
					portYIELD_WITHIN_API();
 80045ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80045ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80045fe:	e7bd      	b.n	800457c <xQueueReceive+0xec>
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004610:	e7fe      	b.n	8004610 <xQueueReceive+0x180>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004612:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004614:	9a01      	ldr	r2, [sp, #4]
 8004616:	4621      	mov	r1, r4
 8004618:	2064      	movs	r0, #100	@ 0x64
 800461a:	f001 fdeb 	bl	80061f4 <xTraceEventCreate3>
					return errQUEUE_EMPTY;
 800461e:	2000      	movs	r0, #0
}
 8004620:	b005      	add	sp, #20
 8004622:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8004624:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004626:	9a01      	ldr	r2, [sp, #4]
 8004628:	4621      	mov	r1, r4
 800462a:	2067      	movs	r0, #103	@ 0x67
 800462c:	f001 fde2 	bl	80061f4 <xTraceEventCreate3>
 8004630:	e7cf      	b.n	80045d2 <xQueueReceive+0x142>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004632:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004634:	9a01      	ldr	r2, [sp, #4]
 8004636:	4621      	mov	r1, r4
 8004638:	2063      	movs	r0, #99	@ 0x63
 800463a:	f001 fddb 	bl	80061f4 <xTraceEventCreate3>
 800463e:	e7ee      	b.n	800461e <xQueueReceive+0x18e>
 8004640:	9a01      	ldr	r2, [sp, #4]
 8004642:	4621      	mov	r1, r4
 8004644:	2065      	movs	r0, #101	@ 0x65
 8004646:	f001 fd77 	bl	8006138 <xTraceEventCreate2>
 800464a:	e7e8      	b.n	800461e <xQueueReceive+0x18e>
 800464c:	9a01      	ldr	r2, [sp, #4]
 800464e:	4621      	mov	r1, r4
 8004650:	20c8      	movs	r0, #200	@ 0xc8
 8004652:	f001 fd71 	bl	8006138 <xTraceEventCreate2>
 8004656:	e7e2      	b.n	800461e <xQueueReceive+0x18e>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8004658:	9a01      	ldr	r2, [sp, #4]
 800465a:	4621      	mov	r1, r4
 800465c:	20f6      	movs	r0, #246	@ 0xf6
 800465e:	f001 fd6b 	bl	8006138 <xTraceEventCreate2>
 8004662:	e7b6      	b.n	80045d2 <xQueueReceive+0x142>
 8004664:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004666:	9a01      	ldr	r2, [sp, #4]
 8004668:	4621      	mov	r1, r4
 800466a:	2066      	movs	r0, #102	@ 0x66
 800466c:	f001 fdc2 	bl	80061f4 <xTraceEventCreate3>
 8004670:	e7af      	b.n	80045d2 <xQueueReceive+0x142>
				traceQUEUE_RECEIVE( pxQueue );
 8004672:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004674:	9a01      	ldr	r2, [sp, #4]
 8004676:	3b01      	subs	r3, #1
 8004678:	4621      	mov	r1, r4
 800467a:	2061      	movs	r0, #97	@ 0x61
 800467c:	f001 fdba 	bl	80061f4 <xTraceEventCreate3>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004680:	3d01      	subs	r5, #1
 8004682:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004684:	6923      	ldr	r3, [r4, #16]
 8004686:	b9bb      	cbnz	r3, 80046b8 <xQueueReceive+0x228>
				taskEXIT_CRITICAL();
 8004688:	f001 f836 	bl	80056f8 <vPortExitCritical>
				return pdPASS;
 800468c:	2001      	movs	r0, #1
 800468e:	e7c7      	b.n	8004620 <xQueueReceive+0x190>
				traceQUEUE_RECEIVE( pxQueue );
 8004690:	9a01      	ldr	r2, [sp, #4]
 8004692:	4621      	mov	r1, r4
 8004694:	2062      	movs	r0, #98	@ 0x62
 8004696:	f001 fd4f 	bl	8006138 <xTraceEventCreate2>
 800469a:	e7f1      	b.n	8004680 <xQueueReceive+0x1f0>
 800469c:	9a01      	ldr	r2, [sp, #4]
 800469e:	4621      	mov	r1, r4
 80046a0:	20c7      	movs	r0, #199	@ 0xc7
 80046a2:	f001 fd49 	bl	8006138 <xTraceEventCreate2>
 80046a6:	e7eb      	b.n	8004680 <xQueueReceive+0x1f0>
 80046a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80046aa:	9a01      	ldr	r2, [sp, #4]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	4621      	mov	r1, r4
 80046b0:	2060      	movs	r0, #96	@ 0x60
 80046b2:	f001 fd9f 	bl	80061f4 <xTraceEventCreate3>
 80046b6:	e7e3      	b.n	8004680 <xQueueReceive+0x1f0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b8:	f104 0010 	add.w	r0, r4, #16
 80046bc:	f000 fdba 	bl	8005234 <xTaskRemoveFromEventList>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d0e1      	beq.n	8004688 <xQueueReceive+0x1f8>
						queueYIELD_IF_USING_PREEMPTION();
 80046c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80046c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	e7d6      	b.n	8004688 <xQueueReceive+0x1f8>
 80046da:	bf00      	nop

080046dc <xQueueSemaphoreTake>:
{
 80046dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d053      	beq.n	8004790 <xQueueSemaphoreTake+0xb4>
	configASSERT( pxQueue->uxItemSize == 0 );
 80046e8:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 80046ea:	4604      	mov	r4, r0
 80046ec:	b146      	cbz	r6, 8004700 <xQueueSemaphoreTake+0x24>
 80046ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	e7fe      	b.n	80046fe <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004700:	f000 fe36 	bl	8005370 <xTaskGetSchedulerState>
 8004704:	4605      	mov	r5, r0
 8004706:	2800      	cmp	r0, #0
 8004708:	d04b      	beq.n	80047a2 <xQueueSemaphoreTake+0xc6>
 800470a:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 800470c:	f000 ffd2 	bl	80056b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004710:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
		prvLockQueue( pxQueue );
 8004712:	f04f 0800 	mov.w	r8, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004716:	bb8f      	cbnz	r7, 800477c <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004718:	9b01      	ldr	r3, [sp, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8106 	beq.w	800492c <xQueueSemaphoreTake+0x250>
				else if( xEntryTimeSet == pdFALSE )
 8004720:	2d00      	cmp	r5, #0
 8004722:	d061      	beq.n	80047e8 <xQueueSemaphoreTake+0x10c>
		taskEXIT_CRITICAL();
 8004724:	f000 ffe8 	bl	80056f8 <vPortExitCritical>
		vTaskSuspendAll();
 8004728:	f000 fb62 	bl	8004df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800472c:	f000 ffc2 	bl	80056b4 <vPortEnterCritical>
 8004730:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004734:	2bff      	cmp	r3, #255	@ 0xff
 8004736:	bf08      	it	eq
 8004738:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800473c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004740:	2bff      	cmp	r3, #255	@ 0xff
 8004742:	bf08      	it	eq
 8004744:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8004748:	f000 ffd6 	bl	80056f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800474c:	a901      	add	r1, sp, #4
 800474e:	a802      	add	r0, sp, #8
 8004750:	f000 fdc6 	bl	80052e0 <xTaskCheckForTimeOut>
 8004754:	2800      	cmp	r0, #0
 8004756:	d130      	bne.n	80047ba <xQueueSemaphoreTake+0xde>
	taskENTER_CRITICAL();
 8004758:	f000 ffac 	bl	80056b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800475c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800475e:	2b00      	cmp	r3, #0
 8004760:	d049      	beq.n	80047f6 <xQueueSemaphoreTake+0x11a>
	taskEXIT_CRITICAL();
 8004762:	f000 ffc9 	bl	80056f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004766:	4620      	mov	r0, r4
 8004768:	f7ff fb72 	bl	8003e50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800476c:	f000 fcba 	bl	80050e4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004770:	f000 ffa0 	bl	80056b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004774:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8004776:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004778:	2f00      	cmp	r7, #0
 800477a:	d0cd      	beq.n	8004718 <xQueueSemaphoreTake+0x3c>
				traceQUEUE_RECEIVE( pxQueue );
 800477c:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8004780:	2b04      	cmp	r3, #4
 8004782:	f200 809c 	bhi.w	80048be <xQueueSemaphoreTake+0x1e2>
 8004786:	e8df f003 	tbb	[pc, r3]
 800478a:	aea6      	.short	0xaea6
 800478c:	9393      	.short	0x9393
 800478e:	b4          	.byte	0xb4
 800478f:	00          	.byte	0x00
 8004790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80047a0:	e7fe      	b.n	80047a0 <xQueueSemaphoreTake+0xc4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047a2:	9b01      	ldr	r3, [sp, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d050      	beq.n	800484a <xQueueSemaphoreTake+0x16e>
 80047a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	e7fe      	b.n	80047b8 <xQueueSemaphoreTake+0xdc>
			prvUnlockQueue( pxQueue );
 80047ba:	4620      	mov	r0, r4
 80047bc:	f7ff fb48 	bl	8003e50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047c0:	f000 fc90 	bl	80050e4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80047c4:	f000 ff76 	bl	80056b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80047ca:	b98b      	cbnz	r3, 80047f0 <xQueueSemaphoreTake+0x114>
	taskEXIT_CRITICAL();
 80047cc:	f000 ff94 	bl	80056f8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80047d0:	2e00      	cmp	r6, #0
 80047d2:	f040 8094 	bne.w	80048fe <xQueueSemaphoreTake+0x222>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80047d6:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d83d      	bhi.n	800485a <xQueueSemaphoreTake+0x17e>
 80047de:	e8df f003 	tbb	[pc, r3]
 80047e2:	545a      	.short	0x545a
 80047e4:	3636      	.short	0x3636
 80047e6:	4e          	.byte	0x4e
 80047e7:	00          	.byte	0x00
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047e8:	a802      	add	r0, sp, #8
 80047ea:	f000 fd6d 	bl	80052c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047ee:	e799      	b.n	8004724 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 80047f0:	f000 ff82 	bl	80056f8 <vPortExitCritical>
	return xReturn;
 80047f4:	e7bc      	b.n	8004770 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 80047f6:	f000 ff7f 	bl	80056f8 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80047fa:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d809      	bhi.n	8004816 <xQueueSemaphoreTake+0x13a>
 8004802:	e8df f003 	tbb	[pc, r3]
 8004806:	0335      	.short	0x0335
 8004808:	2e2e      	.short	0x2e2e
 800480a:	4f          	.byte	0x4f
 800480b:	00          	.byte	0x00
 800480c:	9a01      	ldr	r2, [sp, #4]
 800480e:	4621      	mov	r1, r4
 8004810:	2068      	movs	r0, #104	@ 0x68
 8004812:	f001 fc91 	bl	8006138 <xTraceEventCreate2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d07e      	beq.n	800491a <xQueueSemaphoreTake+0x23e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800481c:	9901      	ldr	r1, [sp, #4]
 800481e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004822:	f000 fced 	bl	8005200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff fb12 	bl	8003e50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800482c:	f000 fc5a 	bl	80050e4 <xTaskResumeAll>
 8004830:	2800      	cmp	r0, #0
 8004832:	d19d      	bne.n	8004770 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 8004834:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800483c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	e792      	b.n	8004770 <xQueueSemaphoreTake+0x94>
 800484a:	462e      	mov	r6, r5
 800484c:	e75e      	b.n	800470c <xQueueSemaphoreTake+0x30>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800484e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004850:	9a01      	ldr	r2, [sp, #4]
 8004852:	4621      	mov	r1, r4
 8004854:	2064      	movs	r0, #100	@ 0x64
 8004856:	f001 fccd 	bl	80061f4 <xTraceEventCreate3>
					return errQUEUE_EMPTY;
 800485a:	2000      	movs	r0, #0
}
 800485c:	b004      	add	sp, #16
 800485e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8004862:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004864:	9a01      	ldr	r2, [sp, #4]
 8004866:	4621      	mov	r1, r4
 8004868:	2067      	movs	r0, #103	@ 0x67
 800486a:	f001 fcc3 	bl	80061f4 <xTraceEventCreate3>
 800486e:	e7d2      	b.n	8004816 <xQueueSemaphoreTake+0x13a>
 8004870:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004872:	9a01      	ldr	r2, [sp, #4]
 8004874:	4621      	mov	r1, r4
 8004876:	2066      	movs	r0, #102	@ 0x66
 8004878:	f001 fcbc 	bl	80061f4 <xTraceEventCreate3>
 800487c:	e7cb      	b.n	8004816 <xQueueSemaphoreTake+0x13a>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800487e:	9a01      	ldr	r2, [sp, #4]
 8004880:	4621      	mov	r1, r4
 8004882:	20c8      	movs	r0, #200	@ 0xc8
 8004884:	f001 fc58 	bl	8006138 <xTraceEventCreate2>
 8004888:	e7e7      	b.n	800485a <xQueueSemaphoreTake+0x17e>
 800488a:	9a01      	ldr	r2, [sp, #4]
 800488c:	4621      	mov	r1, r4
 800488e:	2065      	movs	r0, #101	@ 0x65
 8004890:	f001 fc52 	bl	8006138 <xTraceEventCreate2>
 8004894:	e7e1      	b.n	800485a <xQueueSemaphoreTake+0x17e>
 8004896:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004898:	9a01      	ldr	r2, [sp, #4]
 800489a:	4621      	mov	r1, r4
 800489c:	2063      	movs	r0, #99	@ 0x63
 800489e:	f001 fca9 	bl	80061f4 <xTraceEventCreate3>
 80048a2:	e7da      	b.n	800485a <xQueueSemaphoreTake+0x17e>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80048a4:	9a01      	ldr	r2, [sp, #4]
 80048a6:	4621      	mov	r1, r4
 80048a8:	20f6      	movs	r0, #246	@ 0xf6
 80048aa:	f001 fc45 	bl	8006138 <xTraceEventCreate2>
 80048ae:	e7b2      	b.n	8004816 <xQueueSemaphoreTake+0x13a>
				traceQUEUE_RECEIVE( pxQueue );
 80048b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048b2:	9a01      	ldr	r2, [sp, #4]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	4621      	mov	r1, r4
 80048b8:	2061      	movs	r0, #97	@ 0x61
 80048ba:	f001 fc9b 	bl	80061f4 <xTraceEventCreate3>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048be:	6823      	ldr	r3, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048c0:	3f01      	subs	r7, #1
 80048c2:	63a7      	str	r7, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d04d      	beq.n	8004964 <xQueueSemaphoreTake+0x288>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d139      	bne.n	8004942 <xQueueSemaphoreTake+0x266>
				taskEXIT_CRITICAL();
 80048ce:	f000 ff13 	bl	80056f8 <vPortExitCritical>
				return pdPASS;
 80048d2:	2001      	movs	r0, #1
 80048d4:	e7c2      	b.n	800485c <xQueueSemaphoreTake+0x180>
				traceQUEUE_RECEIVE( pxQueue );
 80048d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048d8:	9a01      	ldr	r2, [sp, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	4621      	mov	r1, r4
 80048de:	2060      	movs	r0, #96	@ 0x60
 80048e0:	f001 fc88 	bl	80061f4 <xTraceEventCreate3>
 80048e4:	e7eb      	b.n	80048be <xQueueSemaphoreTake+0x1e2>
 80048e6:	9a01      	ldr	r2, [sp, #4]
 80048e8:	4621      	mov	r1, r4
 80048ea:	2062      	movs	r0, #98	@ 0x62
 80048ec:	f001 fc24 	bl	8006138 <xTraceEventCreate2>
 80048f0:	e7e5      	b.n	80048be <xQueueSemaphoreTake+0x1e2>
 80048f2:	9a01      	ldr	r2, [sp, #4]
 80048f4:	4621      	mov	r1, r4
 80048f6:	20c7      	movs	r0, #199	@ 0xc7
 80048f8:	f001 fc1e 	bl	8006138 <xTraceEventCreate2>
 80048fc:	e7df      	b.n	80048be <xQueueSemaphoreTake+0x1e2>
						taskENTER_CRITICAL();
 80048fe:	f000 fed9 	bl	80056b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004902:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004904:	b119      	cbz	r1, 800490e <xQueueSemaphoreTake+0x232>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004906:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004908:	6819      	ldr	r1, [r3, #0]
 800490a:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800490e:	68a0      	ldr	r0, [r4, #8]
 8004910:	f000 fdf8 	bl	8005504 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8004914:	f000 fef0 	bl	80056f8 <vPortExitCritical>
 8004918:	e75d      	b.n	80047d6 <xQueueSemaphoreTake+0xfa>
						taskENTER_CRITICAL();
 800491a:	f000 fecb 	bl	80056b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800491e:	68a0      	ldr	r0, [r4, #8]
 8004920:	f000 fd36 	bl	8005390 <xTaskPriorityInherit>
 8004924:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8004926:	f000 fee7 	bl	80056f8 <vPortExitCritical>
 800492a:	e777      	b.n	800481c <xQueueSemaphoreTake+0x140>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800492c:	2e00      	cmp	r6, #0
 800492e:	d0f1      	beq.n	8004914 <xQueueSemaphoreTake+0x238>
 8004930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	e7fe      	b.n	8004940 <xQueueSemaphoreTake+0x264>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004942:	f104 0010 	add.w	r0, r4, #16
 8004946:	f000 fc75 	bl	8005234 <xTaskRemoveFromEventList>
 800494a:	2800      	cmp	r0, #0
 800494c:	d0bf      	beq.n	80048ce <xQueueSemaphoreTake+0x1f2>
						queueYIELD_IF_USING_PREEMPTION();
 800494e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004956:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	e7b4      	b.n	80048ce <xQueueSemaphoreTake+0x1f2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004964:	f000 fe32 	bl	80055cc <pvTaskIncrementMutexHeldCount>
 8004968:	60a0      	str	r0, [r4, #8]
 800496a:	e7ad      	b.n	80048c8 <xQueueSemaphoreTake+0x1ec>

0800496c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004970:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004972:	f000 fe9f 	bl	80056b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004976:	4a3a      	ldr	r2, [pc, #232]	@ (8004a60 <prvAddNewTaskToReadyList+0xf4>)
		if( pxCurrentTCB == NULL )
 8004978:	4d3a      	ldr	r5, [pc, #232]	@ (8004a64 <prvAddNewTaskToReadyList+0xf8>)
		uxCurrentNumberOfTasks++;
 800497a:	6813      	ldr	r3, [r2, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d03d      	beq.n	8004a02 <prvAddNewTaskToReadyList+0x96>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004986:	4e38      	ldr	r6, [pc, #224]	@ (8004a68 <prvAddNewTaskToReadyList+0xfc>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004988:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800498a:	6832      	ldr	r2, [r6, #0]
 800498c:	b392      	cbz	r2, 80049f4 <prvAddNewTaskToReadyList+0x88>
 800498e:	4f37      	ldr	r7, [pc, #220]	@ (8004a6c <prvAddNewTaskToReadyList+0x100>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004990:	4837      	ldr	r0, [pc, #220]	@ (8004a70 <prvAddNewTaskToReadyList+0x104>)
 8004992:	6801      	ldr	r1, [r0, #0]
 8004994:	3101      	adds	r1, #1
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8004996:	f104 0234 	add.w	r2, r4, #52	@ 0x34
		uxTaskNumber++;
 800499a:	6001      	str	r1, [r0, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800499c:	6461      	str	r1, [r4, #68]	@ 0x44
		traceTASK_CREATE( pxNewTCB );
 800499e:	2010      	movs	r0, #16
 80049a0:	4621      	mov	r1, r4
 80049a2:	f002 fab9 	bl	8006f18 <xTraceObjectRegisterWithoutHandle>

		prvAddTaskToReadyList( pxNewTCB );
 80049a6:	4621      	mov	r1, r4
 80049a8:	2030      	movs	r0, #48	@ 0x30
 80049aa:	f001 fb6d 	bl	8006088 <xTraceEventCreate1>
 80049ae:	4a31      	ldr	r2, [pc, #196]	@ (8004a74 <prvAddNewTaskToReadyList+0x108>)
 80049b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80049b2:	6811      	ldr	r1, [r2, #0]
 80049b4:	2301      	movs	r3, #1
 80049b6:	4083      	lsls	r3, r0
 80049b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049bc:	430b      	orrs	r3, r1
 80049be:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80049c2:	1d21      	adds	r1, r4, #4
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	f7ff f9cf 	bl	8003d68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049ca:	f000 fe95 	bl	80056f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049ce:	6833      	ldr	r3, [r6, #0]
 80049d0:	b173      	cbz	r3, 80049f0 <prvAddNewTaskToReadyList+0x84>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049d2:	682a      	ldr	r2, [r5, #0]
 80049d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80049d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049d8:	429a      	cmp	r2, r3
 80049da:	d209      	bcs.n	80049f0 <prvAddNewTaskToReadyList+0x84>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80049e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049f4:	682a      	ldr	r2, [r5, #0]
 80049f6:	4f1d      	ldr	r7, [pc, #116]	@ (8004a6c <prvAddNewTaskToReadyList+0x100>)
 80049f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049fa:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80049fc:	bf98      	it	ls
 80049fe:	602c      	strls	r4, [r5, #0]
 8004a00:	e7c6      	b.n	8004990 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8004a02:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a04:	6813      	ldr	r3, [r2, #0]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d003      	beq.n	8004a12 <prvAddNewTaskToReadyList+0xa6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a0a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004a0c:	4f17      	ldr	r7, [pc, #92]	@ (8004a6c <prvAddNewTaskToReadyList+0x100>)
 8004a0e:	4e16      	ldr	r6, [pc, #88]	@ (8004a68 <prvAddNewTaskToReadyList+0xfc>)
 8004a10:	e7be      	b.n	8004990 <prvAddNewTaskToReadyList+0x24>
 8004a12:	4f16      	ldr	r7, [pc, #88]	@ (8004a6c <prvAddNewTaskToReadyList+0x100>)
 8004a14:	463e      	mov	r6, r7
 8004a16:	f107 088c 	add.w	r8, r7, #140	@ 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a1a:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a1c:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a1e:	f7ff f993 	bl	8003d48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a22:	45b0      	cmp	r8, r6
 8004a24:	d1f9      	bne.n	8004a1a <prvAddNewTaskToReadyList+0xae>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a26:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8004a8c <prvAddNewTaskToReadyList+0x120>
	vListInitialise( &xDelayedTaskList2 );
 8004a2a:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8004a90 <prvAddNewTaskToReadyList+0x124>
 8004a2e:	4e0e      	ldr	r6, [pc, #56]	@ (8004a68 <prvAddNewTaskToReadyList+0xfc>)
	vListInitialise( &xDelayedTaskList1 );
 8004a30:	4648      	mov	r0, r9
 8004a32:	f7ff f989 	bl	8003d48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a36:	4640      	mov	r0, r8
 8004a38:	f7ff f986 	bl	8003d48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a3c:	480e      	ldr	r0, [pc, #56]	@ (8004a78 <prvAddNewTaskToReadyList+0x10c>)
 8004a3e:	f7ff f983 	bl	8003d48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a42:	480e      	ldr	r0, [pc, #56]	@ (8004a7c <prvAddNewTaskToReadyList+0x110>)
 8004a44:	f7ff f980 	bl	8003d48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a48:	480d      	ldr	r0, [pc, #52]	@ (8004a80 <prvAddNewTaskToReadyList+0x114>)
 8004a4a:	f7ff f97d 	bl	8003d48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <prvAddNewTaskToReadyList+0x118>)
 8004a50:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a54:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <prvAddNewTaskToReadyList+0x11c>)
 8004a56:	f8c3 8000 	str.w	r8, [r3]
		traceTASK_CREATE( pxNewTCB );
 8004a5a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
}
 8004a5c:	e798      	b.n	8004990 <prvAddNewTaskToReadyList+0x24>
 8004a5e:	bf00      	nop
 8004a60:	20000cb4 	.word	0x20000cb4
 8004a64:	20000db4 	.word	0x20000db4
 8004a68:	20000ca8 	.word	0x20000ca8
 8004a6c:	20000d28 	.word	0x20000d28
 8004a70:	20000c98 	.word	0x20000c98
 8004a74:	20000cac 	.word	0x20000cac
 8004a78:	20000ce4 	.word	0x20000ce4
 8004a7c:	20000cd0 	.word	0x20000cd0
 8004a80:	20000cb8 	.word	0x20000cb8
 8004a84:	20000cfc 	.word	0x20000cfc
 8004a88:	20000cf8 	.word	0x20000cf8
 8004a8c:	20000d14 	.word	0x20000d14
 8004a90:	20000d00 	.word	0x20000d00

08004a94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a96:	4b1b      	ldr	r3, [pc, #108]	@ (8004b04 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a98:	4e1b      	ldr	r6, [pc, #108]	@ (8004b08 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8004a9a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a9c:	6833      	ldr	r3, [r6, #0]
{
 8004a9e:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aa0:	1d18      	adds	r0, r3, #4
{
 8004aa2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aa4:	f7ff f986 	bl	8003db4 <uxListRemove>
 8004aa8:	b940      	cbnz	r0, 8004abc <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004aaa:	6833      	ldr	r3, [r6, #0]
 8004aac:	4917      	ldr	r1, [pc, #92]	@ (8004b0c <prvAddCurrentTaskToDelayedList+0x78>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	680b      	ldr	r3, [r1, #0]
 8004ab6:	ea23 0302 	bic.w	r3, r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004abc:	1c6b      	adds	r3, r5, #1
 8004abe:	d017      	beq.n	8004af0 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ac0:	6833      	ldr	r3, [r6, #0]
 8004ac2:	1964      	adds	r4, r4, r5
 8004ac4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004ac6:	d307      	bcc.n	8004ad8 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac8:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ad2:	3104      	adds	r1, #4
 8004ad4:	f7ff b956 	b.w	8003d84 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0x80>)
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	6831      	ldr	r1, [r6, #0]
 8004ade:	3104      	adds	r1, #4
 8004ae0:	f7ff f950 	bl	8003d84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0x84>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004aea:	bf88      	it	hi
 8004aec:	601c      	strhi	r4, [r3, #0]
}
 8004aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004af0:	2f00      	cmp	r7, #0
 8004af2:	d0e5      	beq.n	8004ac0 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af4:	6831      	ldr	r1, [r6, #0]
 8004af6:	4809      	ldr	r0, [pc, #36]	@ (8004b1c <prvAddCurrentTaskToDelayedList+0x88>)
}
 8004af8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004afc:	3104      	adds	r1, #4
 8004afe:	f7ff b933 	b.w	8003d68 <vListInsertEnd>
 8004b02:	bf00      	nop
 8004b04:	20000cb0 	.word	0x20000cb0
 8004b08:	20000db4 	.word	0x20000db4
 8004b0c:	20000cac 	.word	0x20000cac
 8004b10:	20000cf8 	.word	0x20000cf8
 8004b14:	20000cfc 	.word	0x20000cfc
 8004b18:	20000c94 	.word	0x20000c94
 8004b1c:	20000cb8 	.word	0x20000cb8

08004b20 <prvDeleteTCB>:
	{
 8004b20:	b510      	push	{r4, lr}
 8004b22:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b24:	3054      	adds	r0, #84	@ 0x54
 8004b26:	f003 fc7d 	bl	8008424 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b2a:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8004b2e:	b163      	cbz	r3, 8004b4a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d013      	beq.n	8004b5c <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d010      	beq.n	8004b5a <prvDeleteTCB+0x3a>
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	e7fe      	b.n	8004b48 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8004b4a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004b4c:	f000 ffd8 	bl	8005b00 <vPortFree>
				vPortFree( pxTCB );
 8004b50:	4620      	mov	r0, r4
	}
 8004b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004b56:	f000 bfd3 	b.w	8005b00 <vPortFree>
	}
 8004b5a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004b5c:	4620      	mov	r0, r4
	}
 8004b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004b62:	f000 bfcd 	b.w	8005b00 <vPortFree>
 8004b66:	bf00      	nop

08004b68 <prvIdleTask>:
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	4c15      	ldr	r4, [pc, #84]	@ (8004bc0 <prvIdleTask+0x58>)
 8004b6c:	4e15      	ldr	r6, [pc, #84]	@ (8004bc4 <prvIdleTask+0x5c>)
 8004b6e:	4d16      	ldr	r5, [pc, #88]	@ (8004bc8 <prvIdleTask+0x60>)
 8004b70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004bcc <prvIdleTask+0x64>
				taskYIELD();
 8004b74:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8004b78:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 8004b7c:	e011      	b.n	8004ba2 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8004b7e:	f000 fd99 	bl	80056b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b82:	68f3      	ldr	r3, [r6, #12]
 8004b84:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b86:	1d38      	adds	r0, r7, #4
 8004b88:	f7ff f914 	bl	8003db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004b98:	f000 fdae 	bl	80056f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	f7ff ffbf 	bl	8004b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ea      	bne.n	8004b7e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ba8:	f8da 3000 	ldr.w	r3, [sl]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d9f8      	bls.n	8004ba2 <prvIdleTask+0x3a>
				taskYIELD();
 8004bb0:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	e7f1      	b.n	8004ba2 <prvIdleTask+0x3a>
 8004bbe:	bf00      	nop
 8004bc0:	20000ccc 	.word	0x20000ccc
 8004bc4:	20000cd0 	.word	0x20000cd0
 8004bc8:	20000cb4 	.word	0x20000cb4
 8004bcc:	20000d28 	.word	0x20000d28

08004bd0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004bd6:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004bda:	0095      	lsls	r5, r2, #2
 8004bdc:	462a      	mov	r2, r5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004bde:	4606      	mov	r6, r0
 8004be0:	4689      	mov	r9, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004be2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004be4:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004be6:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004be8:	f003 fbff 	bl	80083ea <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004bee:	3d04      	subs	r5, #4
 8004bf0:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bf2:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8004bf6:	f1b9 0f00 	cmp.w	r9, #0
 8004bfa:	d044      	beq.n	8004c86 <prvInitialiseNewTask.constprop.0+0xb6>
 8004bfc:	f109 3cff 	add.w	ip, r9, #4294967295
 8004c00:	f109 010f 	add.w	r1, r9, #15
 8004c04:	f104 0333 	add.w	r3, r4, #51	@ 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c08:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8004c0c:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8004c10:	b10a      	cbz	r2, 8004c16 <prvInitialiseNewTask.constprop.0+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c12:	458c      	cmp	ip, r1
 8004c14:	d1f8      	bne.n	8004c08 <prvInitialiseNewTask.constprop.0+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c16:	2300      	movs	r3, #0
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c1c:	9b08      	ldr	r3, [sp, #32]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	bf28      	it	cs
 8004c22:	2306      	movcs	r3, #6
		pxNewTCB->uxMutexesHeld = 0;
 8004c24:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8004c28:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004c2a:	64e3      	str	r3, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c2c:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8004c2e:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c32:	4699      	mov	r9, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c34:	f7ff f894 	bl	8003d60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c38:	f104 0018 	add.w	r0, r4, #24
 8004c3c:	f7ff f890 	bl	8003d60 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c40:	f1c9 0307 	rsb	r3, r9, #7
 8004c44:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8004c46:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c4e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c50:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c52:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c56:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8004c5a:	f003 fbc6 	bl	80083ea <memset>
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <prvInitialiseNewTask.constprop.0+0xbc>)
 8004c60:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c62:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c64:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 8004c68:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c6a:	463a      	mov	r2, r7
 8004c6c:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c6e:	65e5      	str	r5, [r4, #92]	@ 0x5c
 8004c70:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c72:	f000 fcf5 	bl	8005660 <pxPortInitialiseStack>
 8004c76:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004c78:	f1b8 0f00 	cmp.w	r8, #0
 8004c7c:	d001      	beq.n	8004c82 <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c7e:	f8c8 4000 	str.w	r4, [r8]
}
 8004c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c86:	f884 9034 	strb.w	r9, [r4, #52]	@ 0x34
 8004c8a:	e7c7      	b.n	8004c1c <prvInitialiseNewTask.constprop.0+0x4c>
 8004c8c:	20005c4c 	.word	0x20005c4c

08004c90 <xTaskCreateStatic>:
	{
 8004c90:	b530      	push	{r4, r5, lr}
 8004c92:	b087      	sub	sp, #28
 8004c94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004c96:	b1c4      	cbz	r4, 8004cca <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8004c98:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004c9a:	b16d      	cbz	r5, 8004cb8 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c9c:	25a8      	movs	r5, #168	@ 0xa8
 8004c9e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ca0:	9d05      	ldr	r5, [sp, #20]
 8004ca2:	2da8      	cmp	r5, #168	@ 0xa8
 8004ca4:	d01a      	beq.n	8004cdc <xTaskCreateStatic+0x4c>
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	e7fe      	b.n	8004cb6 <xTaskCreateStatic+0x26>
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004cc8:	e7fe      	b.n	8004cc8 <xTaskCreateStatic+0x38>
 8004cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004cda:	e7fe      	b.n	8004cda <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cdc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004cde:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ce0:	2402      	movs	r4, #2
 8004ce2:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ce6:	ac04      	add	r4, sp, #16
 8004ce8:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004cec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004cee:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cf0:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cf2:	f7ff ff6d 	bl	8004bd0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cf6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004cf8:	f7ff fe38 	bl	800496c <prvAddNewTaskToReadyList>
	}
 8004cfc:	9804      	ldr	r0, [sp, #16]
 8004cfe:	b007      	add	sp, #28
 8004d00:	bd30      	pop	{r4, r5, pc}
 8004d02:	bf00      	nop

08004d04 <xTaskCreate>:
	{
 8004d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d08:	4607      	mov	r7, r0
 8004d0a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d0c:	0090      	lsls	r0, r2, #2
	{
 8004d0e:	4615      	mov	r5, r2
 8004d10:	4688      	mov	r8, r1
 8004d12:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d14:	f000 fe42 	bl	800599c <pvPortMalloc>
			if( pxStack != NULL )
 8004d18:	b1f0      	cbz	r0, 8004d58 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	20a8      	movs	r0, #168	@ 0xa8
 8004d1e:	f000 fe3d 	bl	800599c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004d22:	4606      	mov	r6, r0
 8004d24:	b1a8      	cbz	r0, 8004d52 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8004d26:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d28:	2400      	movs	r4, #0
 8004d2a:	f886 40a5 	strb.w	r4, [r6, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d2e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8004d30:	9401      	str	r4, [sp, #4]
 8004d32:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8004d34:	9602      	str	r6, [sp, #8]
 8004d36:	464b      	mov	r3, r9
 8004d38:	462a      	mov	r2, r5
 8004d3a:	4641      	mov	r1, r8
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	9400      	str	r4, [sp, #0]
 8004d40:	f7ff ff46 	bl	8004bd0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d44:	4630      	mov	r0, r6
 8004d46:	f7ff fe11 	bl	800496c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d4a:	2001      	movs	r0, #1
	}
 8004d4c:	b005      	add	sp, #20
 8004d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 fed4 	bl	8005b00 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004d5c:	b005      	add	sp, #20
 8004d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d62:	bf00      	nop

08004d64 <vTaskStartScheduler>:
{
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d68:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d6a:	aa07      	add	r2, sp, #28
 8004d6c:	a906      	add	r1, sp, #24
 8004d6e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d70:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d74:	f7fc f936 	bl	8000fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d78:	e9dd 0305 	ldrd	r0, r3, [sp, #20]
 8004d7c:	9a07      	ldr	r2, [sp, #28]
 8004d7e:	4915      	ldr	r1, [pc, #84]	@ (8004dd4 <vTaskStartScheduler+0x70>)
 8004d80:	9400      	str	r4, [sp, #0]
 8004d82:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8004d86:	4814      	ldr	r0, [pc, #80]	@ (8004dd8 <vTaskStartScheduler+0x74>)
 8004d88:	4623      	mov	r3, r4
 8004d8a:	f7ff ff81 	bl	8004c90 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004d8e:	b1f8      	cbz	r0, 8004dd0 <vTaskStartScheduler+0x6c>
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004da0:	4a0e      	ldr	r2, [pc, #56]	@ (8004ddc <vTaskStartScheduler+0x78>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8004da2:	4d0f      	ldr	r5, [pc, #60]	@ (8004de0 <vTaskStartScheduler+0x7c>)
		xSchedulerRunning = pdTRUE;
 8004da4:	480f      	ldr	r0, [pc, #60]	@ (8004de4 <vTaskStartScheduler+0x80>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004da6:	4910      	ldr	r1, [pc, #64]	@ (8004de8 <vTaskStartScheduler+0x84>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004da8:	6813      	ldr	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004daa:	f04f 36ff 	mov.w	r6, #4294967295
 8004dae:	602e      	str	r6, [r5, #0]
		xSchedulerRunning = pdTRUE;
 8004db0:	2501      	movs	r5, #1
 8004db2:	6005      	str	r5, [r0, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004db4:	600c      	str	r4, [r1, #0]
		traceTASK_SWITCHED_IN();
 8004db6:	6810      	ldr	r0, [r2, #0]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8004dec <vTaskStartScheduler+0x88>)
 8004dbe:	3354      	adds	r3, #84	@ 0x54
 8004dc0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8004dc2:	f002 fb3d 	bl	8007440 <xTraceTaskSwitch>
}
 8004dc6:	b008      	add	sp, #32
 8004dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004dcc:	f000 bd04 	b.w	80057d8 <xPortStartScheduler>
}
 8004dd0:	b008      	add	sp, #32
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	0800bd84 	.word	0x0800bd84
 8004dd8:	08004b69 	.word	0x08004b69
 8004ddc:	20000db4 	.word	0x20000db4
 8004de0:	20000c94 	.word	0x20000c94
 8004de4:	20000ca8 	.word	0x20000ca8
 8004de8:	20000cb0 	.word	0x20000cb0
 8004dec:	2000001c 	.word	0x2000001c

08004df0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004df0:	4a02      	ldr	r2, [pc, #8]	@ (8004dfc <vTaskSuspendAll+0xc>)
 8004df2:	6813      	ldr	r3, [r2, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	6013      	str	r3, [r2, #0]
}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000c90 	.word	0x20000c90

08004e00 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004e00:	4b01      	ldr	r3, [pc, #4]	@ (8004e08 <xTaskGetTickCount+0x8>)
 8004e02:	6818      	ldr	r0, [r3, #0]
}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000cb0 	.word	0x20000cb0

08004e0c <xTaskIncrementTick>:
{
 8004e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 8004e10:	4c60      	ldr	r4, [pc, #384]	@ (8004f94 <xTaskIncrementTick+0x188>)
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	2b01      	cmp	r3, #1
{
 8004e16:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
 8004e18:	d05b      	beq.n	8004ed2 <xTaskIncrementTick+0xc6>
 8004e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004f98 <xTaskIncrementTick+0x18c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d057      	beq.n	8004ed2 <xTaskIncrementTick+0xc6>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05d      	beq.n	8004ee4 <xTaskIncrementTick+0xd8>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d163      	bne.n	8004ef6 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f9c <xTaskIncrementTick+0x190>)
 8004e30:	681e      	ldr	r6, [r3, #0]
 8004e32:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8004e34:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e36:	2e00      	cmp	r6, #0
 8004e38:	d066      	beq.n	8004f08 <xTaskIncrementTick+0xfc>
 8004e3a:	4b59      	ldr	r3, [pc, #356]	@ (8004fa0 <xTaskIncrementTick+0x194>)
 8004e3c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	42b3      	cmp	r3, r6
 8004e44:	d86d      	bhi.n	8004f22 <xTaskIncrementTick+0x116>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e46:	4f57      	ldr	r7, [pc, #348]	@ (8004fa4 <xTaskIncrementTick+0x198>)
 8004e48:	f8df 916c 	ldr.w	r9, [pc, #364]	@ 8004fb8 <xTaskIncrementTick+0x1ac>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f8df a16c 	ldr.w	sl, [pc, #364]	@ 8004fbc <xTaskIncrementTick+0x1b0>
 8004e52:	681c      	ldr	r4, [r3, #0]
 8004e54:	2c00      	cmp	r4, #0
 8004e56:	f000 8090 	beq.w	8004f7a <xTaskIncrementTick+0x16e>
					prvAddTaskToReadyList( pxTCB );
 8004e5a:	f8df 8164 	ldr.w	r8, [pc, #356]	@ 8004fc0 <xTaskIncrementTick+0x1b4>
BaseType_t xSwitchRequired = pdFALSE;
 8004e5e:	2400      	movs	r4, #0
 8004e60:	e029      	b.n	8004eb6 <xTaskIncrementTick+0xaa>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e62:	f7fe ffa7 	bl	8003db4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e66:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e6a:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e6e:	b10a      	cbz	r2, 8004e74 <xTaskIncrementTick+0x68>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e70:	f7fe ffa0 	bl	8003db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e74:	4659      	mov	r1, fp
 8004e76:	2030      	movs	r0, #48	@ 0x30
 8004e78:	f001 f906 	bl	8006088 <xTraceEventCreate1>
 8004e7c:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8004e80:	2301      	movs	r3, #1
 8004e82:	4629      	mov	r1, r5
 8004e84:	f8d8 5000 	ldr.w	r5, [r8]
 8004e88:	fa03 f200 	lsl.w	r2, r3, r0
 8004e8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e90:	432a      	orrs	r2, r5
 8004e92:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8004e96:	f8c8 2000 	str.w	r2, [r8]
 8004e9a:	f7fe ff65 	bl	8003d68 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e9e:	f8da 3000 	ldr.w	r3, [sl]
 8004ea2:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	bf28      	it	cs
 8004eac:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d061      	beq.n	8004f7a <xTaskIncrementTick+0x16e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ebe:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ec2:	f10b 0504 	add.w	r5, fp, #4
					if( xConstTickCount < xItemValue )
 8004ec6:	4296      	cmp	r6, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ec8:	4628      	mov	r0, r5
					if( xConstTickCount < xItemValue )
 8004eca:	d2ca      	bcs.n	8004e62 <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
 8004ecc:	9b01      	ldr	r3, [sp, #4]
 8004ece:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ed0:	e02c      	b.n	8004f2c <xTaskIncrementTick+0x120>
	traceTASK_INCREMENT_TICK( xTickCount );
 8004ed2:	4b32      	ldr	r3, [pc, #200]	@ (8004f9c <xTaskIncrementTick+0x190>)
 8004ed4:	4a34      	ldr	r2, [pc, #208]	@ (8004fa8 <xTaskIncrementTick+0x19c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	3301      	adds	r3, #1
 8004edc:	6193      	str	r3, [r2, #24]
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1a1      	bne.n	8004e28 <xTaskIncrementTick+0x1c>
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f9c <xTaskIncrementTick+0x190>)
 8004ee6:	6819      	ldr	r1, [r3, #0]
 8004ee8:	2031      	movs	r0, #49	@ 0x31
 8004eea:	3101      	adds	r1, #1
 8004eec:	f001 f8cc 	bl	8006088 <xTraceEventCreate1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d09b      	beq.n	8004e2e <xTaskIncrementTick+0x22>
		++xPendedTicks;
 8004ef6:	4a28      	ldr	r2, [pc, #160]	@ (8004f98 <xTaskIncrementTick+0x18c>)
 8004ef8:	6813      	ldr	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004efa:	2400      	movs	r4, #0
		++xPendedTicks;
 8004efc:	3301      	adds	r3, #1
}
 8004efe:	4620      	mov	r0, r4
		++xPendedTicks;
 8004f00:	6013      	str	r3, [r2, #0]
}
 8004f02:	b003      	add	sp, #12
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8004f08:	4b26      	ldr	r3, [pc, #152]	@ (8004fa4 <xTaskIncrementTick+0x198>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	b30a      	cbz	r2, 8004f54 <xTaskIncrementTick+0x148>
 8004f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	e7fe      	b.n	8004f20 <xTaskIncrementTick+0x114>
 8004f22:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8004fb8 <xTaskIncrementTick+0x1ac>
 8004f26:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8004fbc <xTaskIncrementTick+0x1b0>
BaseType_t xSwitchRequired = pdFALSE;
 8004f2a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f2c:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8004f30:	491e      	ldr	r1, [pc, #120]	@ (8004fac <xTaskIncrementTick+0x1a0>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8004f3e:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8004f40:	2a02      	cmp	r2, #2
 8004f42:	bf28      	it	cs
 8004f44:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bf18      	it	ne
 8004f4a:	2401      	movne	r4, #1
}
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	b003      	add	sp, #12
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8004f54:	4a16      	ldr	r2, [pc, #88]	@ (8004fb0 <xTaskIncrementTick+0x1a4>)
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	6811      	ldr	r1, [r2, #0]
 8004f5a:	6019      	str	r1, [r3, #0]
 8004f5c:	4915      	ldr	r1, [pc, #84]	@ (8004fb4 <xTaskIncrementTick+0x1a8>)
 8004f5e:	6010      	str	r0, [r2, #0]
 8004f60:	680a      	ldr	r2, [r1, #0]
 8004f62:	3201      	adds	r2, #1
 8004f64:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	b95a      	cbnz	r2, 8004f84 <xTaskIncrementTick+0x178>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <xTaskIncrementTick+0x194>)
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	461a      	mov	r2, r3
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	e761      	b.n	8004e3e <xTaskIncrementTick+0x32>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f7a:	9a01      	ldr	r2, [sp, #4]
 8004f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f80:	6013      	str	r3, [r2, #0]
					break;
 8004f82:	e7d3      	b.n	8004f2c <xTaskIncrementTick+0x120>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f84:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f86:	4a06      	ldr	r2, [pc, #24]	@ (8004fa0 <xTaskIncrementTick+0x194>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f88:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f8a:	9201      	str	r2, [sp, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	6013      	str	r3, [r2, #0]
}
 8004f92:	e754      	b.n	8004e3e <xTaskIncrementTick+0x32>
 8004f94:	20000c90 	.word	0x20000c90
 8004f98:	20000ca4 	.word	0x20000ca4
 8004f9c:	20000cb0 	.word	0x20000cb0
 8004fa0:	20000c94 	.word	0x20000c94
 8004fa4:	20000cfc 	.word	0x20000cfc
 8004fa8:	20005c48 	.word	0x20005c48
 8004fac:	20000ca0 	.word	0x20000ca0
 8004fb0:	20000cf8 	.word	0x20000cf8
 8004fb4:	20000c9c 	.word	0x20000c9c
 8004fb8:	20000d28 	.word	0x20000d28
 8004fbc:	20000db4 	.word	0x20000db4
 8004fc0:	20000cac 	.word	0x20000cac

08004fc4 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8004fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 8004fc8:	f000 fb74 	bl	80056b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80050bc <xTaskResumeAll.part.0+0xf8>)
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	3a01      	subs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d162      	bne.n	80050a0 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fda:	4b39      	ldr	r3, [pc, #228]	@ (80050c0 <xTaskResumeAll.part.0+0xfc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d05e      	beq.n	80050a0 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe2:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 80050d4 <xTaskResumeAll.part.0+0x110>
 8004fe6:	f8db 3000 	ldr.w	r3, [fp]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d063      	beq.n	80050b6 <xTaskResumeAll.part.0+0xf2>
 8004fee:	4e35      	ldr	r6, [pc, #212]	@ (80050c4 <xTaskResumeAll.part.0+0x100>)
 8004ff0:	f8df 90e4 	ldr.w	r9, [pc, #228]	@ 80050d8 <xTaskResumeAll.part.0+0x114>
 8004ff4:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 80050dc <xTaskResumeAll.part.0+0x118>
 8004ff8:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 80050e0 <xTaskResumeAll.part.0+0x11c>
					prvAddTaskToReadyList( pxTCB );
 8004ffc:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ffe:	f8db 300c 	ldr.w	r3, [fp, #12]
 8005002:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005004:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005006:	f104 0018 	add.w	r0, r4, #24
 800500a:	f7fe fed3 	bl	8003db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800500e:	4628      	mov	r0, r5
 8005010:	f7fe fed0 	bl	8003db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005014:	4621      	mov	r1, r4
 8005016:	2030      	movs	r0, #48	@ 0x30
 8005018:	f001 f836 	bl	8006088 <xTraceEventCreate1>
 800501c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800501e:	6832      	ldr	r2, [r6, #0]
 8005020:	fa07 f300 	lsl.w	r3, r7, r0
 8005024:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005028:	4313      	orrs	r3, r2
 800502a:	4629      	mov	r1, r5
 800502c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	f7fe fe99 	bl	8003d68 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005036:	f8d8 3000 	ldr.w	r3, [r8]
 800503a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8005040:	bf28      	it	cs
 8005042:	f8ca 7000 	strcs.w	r7, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005046:	f8db 3000 	ldr.w	r3, [fp]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1d7      	bne.n	8004ffe <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800504e:	4b1e      	ldr	r3, [pc, #120]	@ (80050c8 <xTaskResumeAll.part.0+0x104>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	b352      	cbz	r2, 80050ac <xTaskResumeAll.part.0+0xe8>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005056:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005058:	4b1c      	ldr	r3, [pc, #112]	@ (80050cc <xTaskResumeAll.part.0+0x108>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800505c:	68d2      	ldr	r2, [r2, #12]
 800505e:	6852      	ldr	r2, [r2, #4]
 8005060:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005062:	4e1b      	ldr	r6, [pc, #108]	@ (80050d0 <xTaskResumeAll.part.0+0x10c>)
 8005064:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005066:	b144      	cbz	r4, 800507a <xTaskResumeAll.part.0+0xb6>
								xYieldPending = pdTRUE;
 8005068:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800506a:	f7ff fecf 	bl	8004e0c <xTaskIncrementTick>
 800506e:	b108      	cbz	r0, 8005074 <xTaskResumeAll.part.0+0xb0>
								xYieldPending = pdTRUE;
 8005070:	f8ca 5000 	str.w	r5, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005074:	3c01      	subs	r4, #1
 8005076:	d1f8      	bne.n	800506a <xTaskResumeAll.part.0+0xa6>
						xPendedTicks = 0;
 8005078:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800507a:	f8da 3000 	ldr.w	r3, [sl]
 800507e:	b17b      	cbz	r3, 80050a0 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8005080:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005088:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005094:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005096:	f000 fb2f 	bl	80056f8 <vPortExitCritical>
}
 800509a:	4620      	mov	r0, r4
 800509c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 80050a0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80050a2:	f000 fb29 	bl	80056f8 <vPortExitCritical>
}
 80050a6:	4620      	mov	r0, r4
 80050a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 80050ac:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <xTaskResumeAll.part.0+0x108>)
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e7d5      	b.n	8005062 <xTaskResumeAll.part.0+0x9e>
 80050b6:	f8df a028 	ldr.w	sl, [pc, #40]	@ 80050e0 <xTaskResumeAll.part.0+0x11c>
 80050ba:	e7d2      	b.n	8005062 <xTaskResumeAll.part.0+0x9e>
 80050bc:	20000c90 	.word	0x20000c90
 80050c0:	20000cb4 	.word	0x20000cb4
 80050c4:	20000cac 	.word	0x20000cac
 80050c8:	20000cfc 	.word	0x20000cfc
 80050cc:	20000c94 	.word	0x20000c94
 80050d0:	20000ca4 	.word	0x20000ca4
 80050d4:	20000ce4 	.word	0x20000ce4
 80050d8:	20000d28 	.word	0x20000d28
 80050dc:	20000db4 	.word	0x20000db4
 80050e0:	20000ca0 	.word	0x20000ca0

080050e4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80050e4:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <xTaskResumeAll+0x1c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	b943      	cbnz	r3, 80050fc <xTaskResumeAll+0x18>
 80050ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	e7fe      	b.n	80050fa <xTaskResumeAll+0x16>
 80050fc:	f7ff bf62 	b.w	8004fc4 <xTaskResumeAll.part.0>
 8005100:	20000c90 	.word	0x20000c90

08005104 <vTaskDelay>:
	{
 8005104:	b570      	push	{r4, r5, r6, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005106:	b950      	cbnz	r0, 800511e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005108:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800510c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005110:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	f3bf 8f6f 	isb	sy
	}
 800511c:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800511e:	4d14      	ldr	r5, [pc, #80]	@ (8005170 <vTaskDelay+0x6c>)
 8005120:	682e      	ldr	r6, [r5, #0]
 8005122:	b146      	cbz	r6, 8005136 <vTaskDelay+0x32>
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	e7fe      	b.n	8005134 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	4604      	mov	r4, r0
 800513c:	602b      	str	r3, [r5, #0]
				traceTASK_DELAY();
 800513e:	207a      	movs	r0, #122	@ 0x7a
 8005140:	4621      	mov	r1, r4
 8005142:	f000 ffa1 	bl	8006088 <xTraceEventCreate1>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005146:	4631      	mov	r1, r6
 8005148:	4620      	mov	r0, r4
 800514a:	f7ff fca3 	bl	8004a94 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	b943      	cbnz	r3, 8005164 <vTaskDelay+0x60>
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	e7fe      	b.n	8005162 <vTaskDelay+0x5e>
 8005164:	f7ff ff2e 	bl	8004fc4 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005168:	2800      	cmp	r0, #0
 800516a:	d0cd      	beq.n	8005108 <vTaskDelay+0x4>
	}
 800516c:	bd70      	pop	{r4, r5, r6, pc}
 800516e:	bf00      	nop
 8005170:	20000c90 	.word	0x20000c90

08005174 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005174:	4b1c      	ldr	r3, [pc, #112]	@ (80051e8 <vTaskSwitchContext+0x74>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	b11b      	cbz	r3, 8005182 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800517a:	4b1c      	ldr	r3, [pc, #112]	@ (80051ec <vTaskSwitchContext+0x78>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005182:	491a      	ldr	r1, [pc, #104]	@ (80051ec <vTaskSwitchContext+0x78>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005184:	4a1a      	ldr	r2, [pc, #104]	@ (80051f0 <vTaskSwitchContext+0x7c>)
		xYieldPending = pdFALSE;
 8005186:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005188:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800518a:	fab3 f383 	clz	r3, r3
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f1c3 031f 	rsb	r3, r3, #31
 8005194:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005198:	4916      	ldr	r1, [pc, #88]	@ (80051f4 <vTaskSwitchContext+0x80>)
 800519a:	009a      	lsls	r2, r3, #2
 800519c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80051a0:	5888      	ldr	r0, [r1, r2]
 80051a2:	b940      	cbnz	r0, 80051b6 <vTaskSwitchContext+0x42>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	e7fe      	b.n	80051b4 <vTaskSwitchContext+0x40>
 80051b6:	6858      	ldr	r0, [r3, #4]
 80051b8:	3208      	adds	r2, #8
 80051ba:	6840      	ldr	r0, [r0, #4]
 80051bc:	440a      	add	r2, r1
 80051be:	4290      	cmp	r0, r2
{
 80051c0:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c2:	6058      	str	r0, [r3, #4]
 80051c4:	bf08      	it	eq
 80051c6:	6840      	ldreq	r0, [r0, #4]
 80051c8:	4c0b      	ldr	r4, [pc, #44]	@ (80051f8 <vTaskSwitchContext+0x84>)
 80051ca:	bf08      	it	eq
 80051cc:	6058      	streq	r0, [r3, #4]
 80051ce:	68c3      	ldr	r3, [r0, #12]
 80051d0:	6023      	str	r3, [r4, #0]
		traceTASK_SWITCHED_IN();
 80051d2:	6820      	ldr	r0, [r4, #0]
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051d8:	f002 f932 	bl	8007440 <xTraceTaskSwitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	4a07      	ldr	r2, [pc, #28]	@ (80051fc <vTaskSwitchContext+0x88>)
 80051e0:	3354      	adds	r3, #84	@ 0x54
 80051e2:	6013      	str	r3, [r2, #0]
}
 80051e4:	bd10      	pop	{r4, pc}
 80051e6:	bf00      	nop
 80051e8:	20000c90 	.word	0x20000c90
 80051ec:	20000ca0 	.word	0x20000ca0
 80051f0:	20000cac 	.word	0x20000cac
 80051f4:	20000d28 	.word	0x20000d28
 80051f8:	20000db4 	.word	0x20000db4
 80051fc:	2000001c 	.word	0x2000001c

08005200 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005200:	b160      	cbz	r0, 800521c <vTaskPlaceOnEventList+0x1c>
{
 8005202:	b510      	push	{r4, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005204:	4b0a      	ldr	r3, [pc, #40]	@ (8005230 <vTaskPlaceOnEventList+0x30>)
 8005206:	460c      	mov	r4, r1
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	3118      	adds	r1, #24
 800520c:	f7fe fdba 	bl	8003d84 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005210:	4620      	mov	r0, r4
 8005212:	2101      	movs	r1, #1
}
 8005214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005218:	f7ff bc3c 	b.w	8004a94 <prvAddCurrentTaskToDelayedList>
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800522c:	e7fe      	b.n	800522c <vTaskPlaceOnEventList+0x2c>
 800522e:	bf00      	nop
 8005230:	20000db4 	.word	0x20000db4

08005234 <xTaskRemoveFromEventList>:
{
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005236:	68c3      	ldr	r3, [r0, #12]
 8005238:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800523a:	2c00      	cmp	r4, #0
 800523c:	d02e      	beq.n	800529c <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800523e:	f104 0518 	add.w	r5, r4, #24
 8005242:	4628      	mov	r0, r5
 8005244:	f7fe fdb6 	bl	8003db4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005248:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <xTaskRemoveFromEventList+0x7c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	b173      	cbz	r3, 800526c <xTaskRemoveFromEventList+0x38>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800524e:	4819      	ldr	r0, [pc, #100]	@ (80052b4 <xTaskRemoveFromEventList+0x80>)
 8005250:	4629      	mov	r1, r5
 8005252:	f7fe fd89 	bl	8003d68 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005256:	4b18      	ldr	r3, [pc, #96]	@ (80052b8 <xTaskRemoveFromEventList+0x84>)
 8005258:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8005260:	bf83      	ittte	hi
 8005262:	4b16      	ldrhi	r3, [pc, #88]	@ (80052bc <xTaskRemoveFromEventList+0x88>)
 8005264:	2001      	movhi	r0, #1
 8005266:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8005268:	2000      	movls	r0, #0
}
 800526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800526c:	1d26      	adds	r6, r4, #4
 800526e:	4630      	mov	r0, r6
 8005270:	f7fe fda0 	bl	8003db4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005274:	4d12      	ldr	r5, [pc, #72]	@ (80052c0 <xTaskRemoveFromEventList+0x8c>)
 8005276:	4621      	mov	r1, r4
 8005278:	2030      	movs	r0, #48	@ 0x30
 800527a:	f000 ff05 	bl	8006088 <xTraceEventCreate1>
 800527e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005280:	682f      	ldr	r7, [r5, #0]
 8005282:	4810      	ldr	r0, [pc, #64]	@ (80052c4 <xTaskRemoveFromEventList+0x90>)
 8005284:	2201      	movs	r2, #1
 8005286:	409a      	lsls	r2, r3
 8005288:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800528c:	433a      	orrs	r2, r7
 800528e:	4631      	mov	r1, r6
 8005290:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005294:	602a      	str	r2, [r5, #0]
 8005296:	f7fe fd67 	bl	8003d68 <vListInsertEnd>
 800529a:	e7dc      	b.n	8005256 <xTaskRemoveFromEventList+0x22>
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80052ac:	e7fe      	b.n	80052ac <xTaskRemoveFromEventList+0x78>
 80052ae:	bf00      	nop
 80052b0:	20000c90 	.word	0x20000c90
 80052b4:	20000ce4 	.word	0x20000ce4
 80052b8:	20000db4 	.word	0x20000db4
 80052bc:	20000ca0 	.word	0x20000ca0
 80052c0:	20000cac 	.word	0x20000cac
 80052c4:	20000d28 	.word	0x20000d28

080052c8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052c8:	4a03      	ldr	r2, [pc, #12]	@ (80052d8 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052ca:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052cc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	e9c0 2300 	strd	r2, r3, [r0]
}
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20000c9c 	.word	0x20000c9c
 80052dc:	20000cb0 	.word	0x20000cb0

080052e0 <xTaskCheckForTimeOut>:
{
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80052e2:	b308      	cbz	r0, 8005328 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 80052e4:	460d      	mov	r5, r1
 80052e6:	b1b1      	cbz	r1, 8005316 <xTaskCheckForTimeOut+0x36>
 80052e8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80052ea:	f000 f9e3 	bl	80056b4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 80052ee:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80052f0:	4a1a      	ldr	r2, [pc, #104]	@ (800535c <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 80052f2:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 80052f4:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80052f6:	d02c      	beq.n	8005352 <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052f8:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8005360 <xTaskCheckForTimeOut+0x80>
 80052fc:	e9d4 6000 	ldrd	r6, r0, [r4]
 8005300:	f8dc 7000 	ldr.w	r7, [ip]
 8005304:	42be      	cmp	r6, r7
 8005306:	d018      	beq.n	800533a <xTaskCheckForTimeOut+0x5a>
 8005308:	4288      	cmp	r0, r1
 800530a:	d816      	bhi.n	800533a <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 800530c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800530e:	f000 f9f3 	bl	80056f8 <vPortExitCritical>
}
 8005312:	4620      	mov	r0, r4
 8005314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005326:	e7fe      	b.n	8005326 <xTaskCheckForTimeOut+0x46>
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005338:	e7fe      	b.n	8005338 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800533a:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800533e:	4573      	cmp	r3, lr
 8005340:	d909      	bls.n	8005356 <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8005342:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005344:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005348:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 800534a:	4403      	add	r3, r0
 800534c:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800534e:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8005352:	2400      	movs	r4, #0
 8005354:	e7db      	b.n	800530e <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800535a:	e7d7      	b.n	800530c <xTaskCheckForTimeOut+0x2c>
 800535c:	20000cb0 	.word	0x20000cb0
 8005360:	20000c9c 	.word	0x20000c9c

08005364 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005364:	4b01      	ldr	r3, [pc, #4]	@ (800536c <vTaskMissedYield+0x8>)
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
}
 800536a:	4770      	bx	lr
 800536c:	20000ca0 	.word	0x20000ca0

08005370 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005370:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <xTaskGetSchedulerState+0x18>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b133      	cbz	r3, 8005384 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005376:	4b05      	ldr	r3, [pc, #20]	@ (800538c <xTaskGetSchedulerState+0x1c>)
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	fab0 f080 	clz	r0, r0
 800537e:	0940      	lsrs	r0, r0, #5
 8005380:	0040      	lsls	r0, r0, #1
 8005382:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005384:	2001      	movs	r0, #1
	}
 8005386:	4770      	bx	lr
 8005388:	20000ca8 	.word	0x20000ca8
 800538c:	20000c90 	.word	0x20000c90

08005390 <xTaskPriorityInherit>:
	{
 8005390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8005394:	4604      	mov	r4, r0
 8005396:	b1f8      	cbz	r0, 80053d8 <xTaskPriorityInherit+0x48>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005398:	4d26      	ldr	r5, [pc, #152]	@ (8005434 <xTaskPriorityInherit+0xa4>)
 800539a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800539c:	682a      	ldr	r2, [r5, #0]
 800539e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d21b      	bcs.n	80053dc <xTaskPriorityInherit+0x4c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053a4:	6982      	ldr	r2, [r0, #24]
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	db04      	blt.n	80053b4 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053aa:	682a      	ldr	r2, [r5, #0]
 80053ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053ae:	f1c2 0207 	rsb	r2, r2, #7
 80053b2:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80053b4:	4e20      	ldr	r6, [pc, #128]	@ (8005438 <xTaskPriorityInherit+0xa8>)
 80053b6:	6962      	ldr	r2, [r4, #20]
 80053b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80053bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d014      	beq.n	80053ee <xTaskPriorityInherit+0x5e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80053ca:	682b      	ldr	r3, [r5, #0]
 80053cc:	4621      	mov	r1, r4
 80053ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d0:	2005      	movs	r0, #5
 80053d2:	f000 feb1 	bl	8006138 <xTraceEventCreate2>
				xReturn = pdTRUE;
 80053d6:	2001      	movs	r0, #1
	}
 80053d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	4298      	cmp	r0, r3
 80053e4:	bf2c      	ite	cs
 80053e6:	2000      	movcs	r0, #0
 80053e8:	2001      	movcc	r0, #1
	}
 80053ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ee:	f104 0804 	add.w	r8, r4, #4
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7fe fcde 	bl	8003db4 <uxListRemove>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80053f8:	4f10      	ldr	r7, [pc, #64]	@ (800543c <xTaskPriorityInherit+0xac>)
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053fa:	b930      	cbnz	r0, 800540a <xTaskPriorityInherit+0x7a>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80053fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	408a      	lsls	r2, r1
 8005404:	ea23 0302 	bic.w	r3, r3, r2
 8005408:	603b      	str	r3, [r7, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800540a:	682b      	ldr	r3, [r5, #0]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005410:	4621      	mov	r1, r4
 8005412:	2030      	movs	r0, #48	@ 0x30
 8005414:	f000 fe38 	bl	8006088 <xTraceEventCreate1>
 8005418:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	2301      	movs	r3, #1
 800541e:	4083      	lsls	r3, r0
 8005420:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005424:	4313      	orrs	r3, r2
 8005426:	4641      	mov	r1, r8
 8005428:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	f7fe fc9b 	bl	8003d68 <vListInsertEnd>
 8005432:	e7ca      	b.n	80053ca <xTaskPriorityInherit+0x3a>
 8005434:	20000db4 	.word	0x20000db4
 8005438:	20000d28 	.word	0x20000d28
 800543c:	20000cac 	.word	0x20000cac

08005440 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005440:	b310      	cbz	r0, 8005488 <xTaskPriorityDisinherit+0x48>
	{
 8005442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8005444:	4b2c      	ldr	r3, [pc, #176]	@ (80054f8 <xTaskPriorityDisinherit+0xb8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4283      	cmp	r3, r0
 800544a:	4604      	mov	r4, r0
 800544c:	d008      	beq.n	8005460 <xTaskPriorityDisinherit+0x20>
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	e7fe      	b.n	800545e <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8005460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005462:	b143      	cbz	r3, 8005476 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005464:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005466:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8005468:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800546a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800546c:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800546e:	d000      	beq.n	8005472 <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005470:	b163      	cbz	r3, 800548c <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 8005472:	2000      	movs	r0, #0
	}
 8005474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005486:	e7fe      	b.n	8005486 <xTaskPriorityDisinherit+0x46>
	BaseType_t xReturn = pdFALSE;
 8005488:	2000      	movs	r0, #0
	}
 800548a:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800548c:	1d07      	adds	r7, r0, #4
 800548e:	4638      	mov	r0, r7
 8005490:	f7fe fc90 	bl	8003db4 <uxListRemove>
 8005494:	b1f8      	cbz	r0, 80054d6 <xTaskPriorityDisinherit+0x96>
 8005496:	4e19      	ldr	r6, [pc, #100]	@ (80054fc <xTaskPriorityDisinherit+0xbc>)
 8005498:	4d19      	ldr	r5, [pc, #100]	@ (8005500 <xTaskPriorityDisinherit+0xc0>)
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800549a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800549c:	4621      	mov	r1, r4
 800549e:	2006      	movs	r0, #6
 80054a0:	f000 fe4a 	bl	8006138 <xTraceEventCreate2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054a4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80054a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a8:	f1c3 0307 	rsb	r3, r3, #7
 80054ac:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80054ae:	4621      	mov	r1, r4
 80054b0:	2030      	movs	r0, #48	@ 0x30
 80054b2:	f000 fde9 	bl	8006088 <xTraceEventCreate1>
 80054b6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80054b8:	682a      	ldr	r2, [r5, #0]
 80054ba:	2401      	movs	r4, #1
 80054bc:	fa04 f300 	lsl.w	r3, r4, r0
 80054c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80054c4:	4313      	orrs	r3, r2
 80054c6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80054ca:	4639      	mov	r1, r7
 80054cc:	602b      	str	r3, [r5, #0]
 80054ce:	f7fe fc4b 	bl	8003d68 <vListInsertEnd>
					xReturn = pdTRUE;
 80054d2:	4620      	mov	r0, r4
	}
 80054d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80054d8:	4e08      	ldr	r6, [pc, #32]	@ (80054fc <xTaskPriorityDisinherit+0xbc>)
 80054da:	4d09      	ldr	r5, [pc, #36]	@ (8005500 <xTaskPriorityDisinherit+0xc0>)
 80054dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80054e0:	0092      	lsls	r2, r2, #2
 80054e2:	58b2      	ldr	r2, [r6, r2]
 80054e4:	2a00      	cmp	r2, #0
 80054e6:	d1d8      	bne.n	800549a <xTaskPriorityDisinherit+0x5a>
 80054e8:	2201      	movs	r2, #1
 80054ea:	409a      	lsls	r2, r3
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	ea23 0302 	bic.w	r3, r3, r2
 80054f2:	602b      	str	r3, [r5, #0]
 80054f4:	e7d1      	b.n	800549a <xTaskPriorityDisinherit+0x5a>
 80054f6:	bf00      	nop
 80054f8:	20000db4 	.word	0x20000db4
 80054fc:	20000d28 	.word	0x20000d28
 8005500:	20000cac 	.word	0x20000cac

08005504 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8005504:	2800      	cmp	r0, #0
 8005506:	d050      	beq.n	80055aa <vTaskPriorityDisinheritAfterTimeout+0xa6>
	{
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800550a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800550c:	4604      	mov	r4, r0
 800550e:	b153      	cbz	r3, 8005526 <vTaskPriorityDisinheritAfterTimeout+0x22>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005510:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005512:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8005514:	4291      	cmp	r1, r2
 8005516:	bf38      	it	cc
 8005518:	4611      	movcc	r1, r2
 800551a:	4288      	cmp	r0, r1
 800551c:	460d      	mov	r5, r1
 800551e:	d001      	beq.n	8005524 <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005520:	2b01      	cmp	r3, #1
 8005522:	d009      	beq.n	8005538 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 8005524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005536:	e7fe      	b.n	8005536 <vTaskPriorityDisinheritAfterTimeout+0x32>
					configASSERT( pxTCB != pxCurrentTCB );
 8005538:	4b21      	ldr	r3, [pc, #132]	@ (80055c0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	42a3      	cmp	r3, r4
 800553e:	d035      	beq.n	80055ac <vTaskPriorityDisinheritAfterTimeout+0xa8>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005540:	4621      	mov	r1, r4
 8005542:	2006      	movs	r0, #6
 8005544:	f000 fdf8 	bl	8006138 <xTraceEventCreate2>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005548:	69a2      	ldr	r2, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800554a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800554c:	4e1d      	ldr	r6, [pc, #116]	@ (80055c4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
					pxTCB->uxPriority = uxPriorityToUse;
 800554e:	62e5      	str	r5, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005550:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005552:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005556:	6962      	ldr	r2, [r4, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005558:	bfa8      	it	ge
 800555a:	f1c5 0507 	rsbge	r5, r5, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800555e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005562:	bfa8      	it	ge
 8005564:	61a5      	strge	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005566:	429a      	cmp	r2, r3
 8005568:	d1dc      	bne.n	8005524 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800556a:	1d27      	adds	r7, r4, #4
 800556c:	4638      	mov	r0, r7
 800556e:	f7fe fc21 	bl	8003db4 <uxListRemove>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005572:	4d15      	ldr	r5, [pc, #84]	@ (80055c8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005574:	b930      	cbnz	r0, 8005584 <vTaskPriorityDisinheritAfterTimeout+0x80>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005576:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	2201      	movs	r2, #1
 800557c:	408a      	lsls	r2, r1
 800557e:	ea23 0302 	bic.w	r3, r3, r2
 8005582:	602b      	str	r3, [r5, #0]
						prvAddTaskToReadyList( pxTCB );
 8005584:	4621      	mov	r1, r4
 8005586:	2030      	movs	r0, #48	@ 0x30
 8005588:	f000 fd7e 	bl	8006088 <xTraceEventCreate1>
 800558c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800558e:	682a      	ldr	r2, [r5, #0]
 8005590:	2301      	movs	r3, #1
 8005592:	4083      	lsls	r3, r0
 8005594:	4313      	orrs	r3, r2
 8005596:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800559a:	4639      	mov	r1, r7
 800559c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80055a0:	602b      	str	r3, [r5, #0]
	}
 80055a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 80055a6:	f7fe bbdf 	b.w	8003d68 <vListInsertEnd>
 80055aa:	4770      	bx	lr
 80055ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80055bc:	e7fe      	b.n	80055bc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80055be:	bf00      	nop
 80055c0:	20000db4 	.word	0x20000db4
 80055c4:	20000d28 	.word	0x20000d28
 80055c8:	20000cac 	.word	0x20000cac

080055cc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80055cc:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <pvTaskIncrementMutexHeldCount+0x14>)
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	b11a      	cbz	r2, 80055da <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80055d6:	3201      	adds	r2, #1
 80055d8:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80055da:	6818      	ldr	r0, [r3, #0]
	}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000db4 	.word	0x20000db4

080055e4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055e4:	4808      	ldr	r0, [pc, #32]	@ (8005608 <prvPortStartFirstTask+0x24>)
 80055e6:	6800      	ldr	r0, [r0, #0]
 80055e8:	6800      	ldr	r0, [r0, #0]
 80055ea:	f380 8808 	msr	MSP, r0
 80055ee:	f04f 0000 	mov.w	r0, #0
 80055f2:	f380 8814 	msr	CONTROL, r0
 80055f6:	b662      	cpsie	i
 80055f8:	b661      	cpsie	f
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	df00      	svc	0
 8005604:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005606:	0000      	.short	0x0000
 8005608:	e000ed08 	.word	0xe000ed08

0800560c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800560c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800561c <vPortEnableVFP+0x10>
 8005610:	6801      	ldr	r1, [r0, #0]
 8005612:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005616:	6001      	str	r1, [r0, #0]
 8005618:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800561a:	0000      	.short	0x0000
 800561c:	e000ed88 	.word	0xe000ed88

08005620 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8005620:	4b0e      	ldr	r3, [pc, #56]	@ (800565c <prvTaskExitError+0x3c>)
 8005622:	681b      	ldr	r3, [r3, #0]
{
 8005624:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005626:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005628:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800562a:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800562c:	d008      	beq.n	8005640 <prvTaskExitError+0x20>
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	e7fe      	b.n	800563e <prvTaskExitError+0x1e>
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0fc      	beq.n	8005650 <prvTaskExitError+0x30>
}
 8005656:	b002      	add	sp, #8
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	2000000c 	.word	0x2000000c

08005660 <pxPortInitialiseStack>:
{
 8005660:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005662:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005666:	4c07      	ldr	r4, [pc, #28]	@ (8005684 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005668:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800566c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005670:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005674:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005678:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 800567c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005680:	3844      	subs	r0, #68	@ 0x44
 8005682:	4770      	bx	lr
 8005684:	08005621 	.word	0x08005621
	...

08005690 <SVC_Handler>:
	__asm volatile (
 8005690:	4b07      	ldr	r3, [pc, #28]	@ (80056b0 <pxCurrentTCBConst2>)
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	6808      	ldr	r0, [r1, #0]
 8005696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	f380 8809 	msr	PSP, r0
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8811 	msr	BASEPRI, r0
 80056aa:	4770      	bx	lr
 80056ac:	f3af 8000 	nop.w

080056b0 <pxCurrentTCBConst2>:
 80056b0:	20000db4 	.word	0x20000db4

080056b4 <vPortEnterCritical>:
 80056b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80056c4:	4a0b      	ldr	r2, [pc, #44]	@ (80056f4 <vPortEnterCritical+0x40>)
 80056c6:	6813      	ldr	r3, [r2, #0]
 80056c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80056ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80056cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80056ce:	d000      	beq.n	80056d2 <vPortEnterCritical+0x1e>
}
 80056d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80056d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f7      	beq.n	80056d0 <vPortEnterCritical+0x1c>
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	e7fe      	b.n	80056f0 <vPortEnterCritical+0x3c>
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c

080056f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80056f8:	4a08      	ldr	r2, [pc, #32]	@ (800571c <vPortExitCritical+0x24>)
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	b943      	cbnz	r3, 8005710 <vPortExitCritical+0x18>
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	e7fe      	b.n	800570e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005710:	3b01      	subs	r3, #1
 8005712:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005714:	b90b      	cbnz	r3, 800571a <vPortExitCritical+0x22>
	__asm volatile
 8005716:	f383 8811 	msr	BASEPRI, r3
}
 800571a:	4770      	bx	lr
 800571c:	2000000c 	.word	0x2000000c

08005720 <PendSV_Handler>:
	__asm volatile
 8005720:	f3ef 8009 	mrs	r0, PSP
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	4b15      	ldr	r3, [pc, #84]	@ (8005780 <pxCurrentTCBConst>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	f01e 0f10 	tst.w	lr, #16
 8005730:	bf08      	it	eq
 8005732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573a:	6010      	str	r0, [r2, #0]
 800573c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005744:	f380 8811 	msr	BASEPRI, r0
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f7ff fd10 	bl	8005174 <vTaskSwitchContext>
 8005754:	f04f 0000 	mov.w	r0, #0
 8005758:	f380 8811 	msr	BASEPRI, r0
 800575c:	bc09      	pop	{r0, r3}
 800575e:	6819      	ldr	r1, [r3, #0]
 8005760:	6808      	ldr	r0, [r1, #0]
 8005762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005766:	f01e 0f10 	tst.w	lr, #16
 800576a:	bf08      	it	eq
 800576c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005770:	f380 8809 	msr	PSP, r0
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w

08005780 <pxCurrentTCBConst>:
 8005780:	20000db4 	.word	0x20000db4

08005784 <SysTick_Handler>:
{
 8005784:	b508      	push	{r3, lr}
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005796:	f7ff fb39 	bl	8004e0c <xTaskIncrementTick>
 800579a:	b128      	cbz	r0, 80057a8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800579c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80057a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80057a8:	2300      	movs	r3, #0
 80057aa:	f383 8811 	msr	BASEPRI, r3
}
 80057ae:	bd08      	pop	{r3, pc}

080057b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80057b4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057b6:	4906      	ldr	r1, [pc, #24]	@ (80057d0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057b8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057ba:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057bc:	680b      	ldr	r3, [r1, #0]
 80057be:	4905      	ldr	r1, [pc, #20]	@ (80057d4 <vPortSetupTimerInterrupt+0x24>)
 80057c0:	fba1 1303 	umull	r1, r3, r1, r3
 80057c4:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057c6:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057c8:	3b01      	subs	r3, #1
 80057ca:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057cc:	6110      	str	r0, [r2, #16]
}
 80057ce:	4770      	bx	lr
 80057d0:	20000000 	.word	0x20000000
 80057d4:	10624dd3 	.word	0x10624dd3

080057d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80057dc:	4a3d      	ldr	r2, [pc, #244]	@ (80058d4 <xPortStartScheduler+0xfc>)
 80057de:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80057e2:	4291      	cmp	r1, r2
 80057e4:	d041      	beq.n	800586a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057e6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80057ea:	4b3b      	ldr	r3, [pc, #236]	@ (80058d8 <xPortStartScheduler+0x100>)
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d033      	beq.n	8005858 <xPortStartScheduler+0x80>
{
 80057f0:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057f2:	4b3a      	ldr	r3, [pc, #232]	@ (80058dc <xPortStartScheduler+0x104>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057f4:	4c3a      	ldr	r4, [pc, #232]	@ (80058e0 <xPortStartScheduler+0x108>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057f6:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057f8:	483a      	ldr	r0, [pc, #232]	@ (80058e4 <xPortStartScheduler+0x10c>)
{
 80057fa:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057fc:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005802:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800580c:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005810:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005814:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005818:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800581a:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800581c:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800581e:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005820:	bf48      	it	mi
 8005822:	2206      	movmi	r2, #6
 8005824:	d50f      	bpl.n	8005846 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005826:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005832:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005836:	061b      	lsls	r3, r3, #24
 8005838:	4611      	mov	r1, r2
 800583a:	f102 32ff 	add.w	r2, r2, #4294967295
 800583e:	d4f2      	bmi.n	8005826 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8005840:	2903      	cmp	r1, #3
 8005842:	d01b      	beq.n	800587c <xPortStartScheduler+0xa4>
 8005844:	6001      	str	r1, [r0, #0]
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	e7fe      	b.n	8005856 <xPortStartScheduler+0x7e>
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005868:	e7fe      	b.n	8005868 <xPortStartScheduler+0x90>
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800587a:	e7fe      	b.n	800587a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800587c:	9b01      	ldr	r3, [sp, #4]
 800587e:	4a17      	ldr	r2, [pc, #92]	@ (80058dc <xPortStartScheduler+0x104>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005880:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005884:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005888:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800588a:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800588c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800588e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8005892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005896:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800589a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800589e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80058a2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80058a6:	f7ff ff83 	bl	80057b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80058aa:	4b0f      	ldr	r3, [pc, #60]	@ (80058e8 <xPortStartScheduler+0x110>)
 80058ac:	2500      	movs	r5, #0
 80058ae:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80058b0:	f7ff feac 	bl	800560c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058b4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80058b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80058bc:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80058c0:	f7ff fe90 	bl	80055e4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80058c4:	f7ff fc56 	bl	8005174 <vTaskSwitchContext>
	prvTaskExitError();
 80058c8:	f7ff feaa 	bl	8005620 <prvTaskExitError>
}
 80058cc:	4628      	mov	r0, r5
 80058ce:	b003      	add	sp, #12
 80058d0:	bd30      	pop	{r4, r5, pc}
 80058d2:	bf00      	nop
 80058d4:	410fc271 	.word	0x410fc271
 80058d8:	410fc270 	.word	0x410fc270
 80058dc:	e000e400 	.word	0xe000e400
 80058e0:	20000dbc 	.word	0x20000dbc
 80058e4:	20000db8 	.word	0x20000db8
 80058e8:	2000000c 	.word	0x2000000c

080058ec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058ec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058f0:	2b0f      	cmp	r3, #15
 80058f2:	d90e      	bls.n	8005912 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058f4:	4911      	ldr	r1, [pc, #68]	@ (800593c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058f6:	4a12      	ldr	r2, [pc, #72]	@ (8005940 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058f8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058fa:	7812      	ldrb	r2, [r2, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d908      	bls.n	8005912 <vPortValidateInterruptPriority+0x26>
 8005900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	e7fe      	b.n	8005910 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005912:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005916:	4a0b      	ldr	r2, [pc, #44]	@ (8005944 <vPortValidateInterruptPriority+0x58>)
 8005918:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005922:	4293      	cmp	r3, r2
 8005924:	d908      	bls.n	8005938 <vPortValidateInterruptPriority+0x4c>
 8005926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	e7fe      	b.n	8005936 <vPortValidateInterruptPriority+0x4a>
	}
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	e000e3f0 	.word	0xe000e3f0
 8005940:	20000dbc 	.word	0x20000dbc
 8005944:	20000db8 	.word	0x20000db8

08005948 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005948:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800594a:	4b12      	ldr	r3, [pc, #72]	@ (8005994 <prvInsertBlockIntoFreeList+0x4c>)
 800594c:	461a      	mov	r2, r3
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4283      	cmp	r3, r0
 8005952:	d3fb      	bcc.n	800594c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005954:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005956:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005958:	eb02 0c04 	add.w	ip, r2, r4
 800595c:	4560      	cmp	r0, ip
 800595e:	d008      	beq.n	8005972 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005960:	1844      	adds	r4, r0, r1
 8005962:	42a3      	cmp	r3, r4
 8005964:	d00b      	beq.n	800597e <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005966:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005968:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800596a:	bf18      	it	ne
 800596c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800596e:	bc30      	pop	{r4, r5}
 8005970:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005972:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005974:	1850      	adds	r0, r2, r1
 8005976:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005978:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800597a:	d1f8      	bne.n	800596e <prvInsertBlockIntoFreeList+0x26>
 800597c:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800597e:	4c06      	ldr	r4, [pc, #24]	@ (8005998 <prvInsertBlockIntoFreeList+0x50>)
 8005980:	6824      	ldr	r4, [r4, #0]
 8005982:	42a3      	cmp	r3, r4
 8005984:	d003      	beq.n	800598e <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005986:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800598a:	4429      	add	r1, r5
 800598c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800598e:	6004      	str	r4, [r0, #0]
 8005990:	e7ea      	b.n	8005968 <prvInsertBlockIntoFreeList+0x20>
 8005992:	bf00      	nop
 8005994:	20000dd8 	.word	0x20000dd8
 8005998:	20000dd4 	.word	0x20000dd4

0800599c <pvPortMalloc>:
{
 800599c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80059a2:	f7ff fa25 	bl	8004df0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80059a6:	484c      	ldr	r0, [pc, #304]	@ (8005ad8 <pvPortMalloc+0x13c>)
 80059a8:	6803      	ldr	r3, [r0, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d06c      	beq.n	8005a88 <pvPortMalloc+0xec>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059ae:	4b4b      	ldr	r3, [pc, #300]	@ (8005adc <pvPortMalloc+0x140>)
 80059b0:	681f      	ldr	r7, [r3, #0]
 80059b2:	423c      	tst	r4, r7
 80059b4:	d12c      	bne.n	8005a10 <pvPortMalloc+0x74>
			if( xWantedSize > 0 )
 80059b6:	b35c      	cbz	r4, 8005a10 <pvPortMalloc+0x74>
				xWantedSize += xHeapStructSize;
 80059b8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059ba:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059bc:	bf1c      	itt	ne
 80059be:	f024 0407 	bicne.w	r4, r4, #7
 80059c2:	3408      	addne	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059c4:	b324      	cbz	r4, 8005a10 <pvPortMalloc+0x74>
 80059c6:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 8005afc <pvPortMalloc+0x160>
 80059ca:	f8d9 8000 	ldr.w	r8, [r9]
 80059ce:	45a0      	cmp	r8, r4
 80059d0:	d31e      	bcc.n	8005a10 <pvPortMalloc+0x74>
				pxBlock = xStart.pxNextFreeBlock;
 80059d2:	4943      	ldr	r1, [pc, #268]	@ (8005ae0 <pvPortMalloc+0x144>)
 80059d4:	680d      	ldr	r5, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059d6:	e003      	b.n	80059e0 <pvPortMalloc+0x44>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b123      	cbz	r3, 80059e6 <pvPortMalloc+0x4a>
 80059dc:	4629      	mov	r1, r5
 80059de:	461d      	mov	r5, r3
 80059e0:	686a      	ldr	r2, [r5, #4]
 80059e2:	42a2      	cmp	r2, r4
 80059e4:	d3f8      	bcc.n	80059d8 <pvPortMalloc+0x3c>
				if( pxBlock != pxEnd )
 80059e6:	6803      	ldr	r3, [r0, #0]
 80059e8:	42ab      	cmp	r3, r5
 80059ea:	d011      	beq.n	8005a10 <pvPortMalloc+0x74>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059ec:	1b13      	subs	r3, r2, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059ee:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059f0:	680e      	ldr	r6, [r1, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059f2:	6008      	str	r0, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d92d      	bls.n	8005a54 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059f8:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059fa:	0742      	lsls	r2, r0, #29
 80059fc:	d025      	beq.n	8005a4a <pvPortMalloc+0xae>
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	e7fe      	b.n	8005a0e <pvPortMalloc+0x72>
		traceMALLOC( pvReturn, xWantedSize );
 8005a10:	4b34      	ldr	r3, [pc, #208]	@ (8005ae4 <pvPortMalloc+0x148>)
 8005a12:	681d      	ldr	r5, [r3, #0]
 8005a14:	f015 0501 	ands.w	r5, r5, #1
 8005a18:	d012      	beq.n	8005a40 <pvPortMalloc+0xa4>
 8005a1a:	2700      	movs	r7, #0
 8005a1c:	463d      	mov	r5, r7
 8005a1e:	4b32      	ldr	r3, [pc, #200]	@ (8005ae8 <pvPortMalloc+0x14c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d14f      	bne.n	8005ac8 <pvPortMalloc+0x12c>
	( void ) xTaskResumeAll();
 8005a28:	f7ff fb5c 	bl	80050e4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a2c:	b157      	cbz	r7, 8005a44 <pvPortMalloc+0xa8>
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	e7fe      	b.n	8005a3e <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 8005a40:	f7ff fb50 	bl	80050e4 <xTaskResumeAll>
}
 8005a44:	4628      	mov	r0, r5
 8005a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a4a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a4c:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a4e:	f7ff ff7b 	bl	8005948 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a52:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a54:	4925      	ldr	r1, [pc, #148]	@ (8005aec <pvPortMalloc+0x150>)
 8005a56:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a58:	eba8 0302 	sub.w	r3, r8, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a5c:	4283      	cmp	r3, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a5e:	bf38      	it	cc
 8005a60:	600b      	strcc	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a62:	433a      	orrs	r2, r7
					xNumberOfSuccessfulAllocations++;
 8005a64:	4922      	ldr	r1, [pc, #136]	@ (8005af0 <pvPortMalloc+0x154>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a66:	f8c9 3000 	str.w	r3, [r9]
					pxBlock->pxNextFreeBlock = NULL;
 8005a6a:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a6c:	e9c5 3200 	strd	r3, r2, [r5]
		traceMALLOC( pvReturn, xWantedSize );
 8005a70:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae4 <pvPortMalloc+0x148>)
					xNumberOfSuccessfulAllocations++;
 8005a72:	680b      	ldr	r3, [r1, #0]
		traceMALLOC( pvReturn, xWantedSize );
 8005a74:	6812      	ldr	r2, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 8005a76:	3301      	adds	r3, #1
 8005a78:	600b      	str	r3, [r1, #0]
		traceMALLOC( pvReturn, xWantedSize );
 8005a7a:	07d3      	lsls	r3, r2, #31
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a7c:	f006 0707 	and.w	r7, r6, #7
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a80:	f106 0508 	add.w	r5, r6, #8
		traceMALLOC( pvReturn, xWantedSize );
 8005a84:	d5d0      	bpl.n	8005a28 <pvPortMalloc+0x8c>
 8005a86:	e7ca      	b.n	8005a1e <pvPortMalloc+0x82>
	uxAddress = ( size_t ) ucHeap;
 8005a88:	4b1a      	ldr	r3, [pc, #104]	@ (8005af4 <pvPortMalloc+0x158>)
	uxAddress -= xHeapStructSize;
 8005a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005af8 <pvPortMalloc+0x15c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a8c:	4e14      	ldr	r6, [pc, #80]	@ (8005ae0 <pvPortMalloc+0x144>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a8e:	4917      	ldr	r1, [pc, #92]	@ (8005aec <pvPortMalloc+0x150>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a90:	f8df c048 	ldr.w	ip, [pc, #72]	@ 8005adc <pvPortMalloc+0x140>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a94:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a96:	bf18      	it	ne
 8005a98:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a9a:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a9e:	bf18      	it	ne
 8005aa0:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005aa4:	6033      	str	r3, [r6, #0]
 8005aa6:	461d      	mov	r5, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005aa8:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aaa:	600b      	str	r3, [r1, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aac:	4913      	ldr	r1, [pc, #76]	@ (8005afc <pvPortMalloc+0x160>)
	pxEnd = ( void * ) uxAddress;
 8005aae:	6002      	str	r2, [r0, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab0:	600b      	str	r3, [r1, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ab2:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	6071      	str	r1, [r6, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aba:	f8cc 7000 	str.w	r7, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8005abe:	e9c2 1100 	strd	r1, r1, [r2]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ac2:	e9c5 2300 	strd	r2, r3, [r5]
}
 8005ac6:	e774      	b.n	80059b2 <pvPortMalloc+0x16>
		traceMALLOC( pvReturn, xWantedSize );
 8005ac8:	f001 f984 	bl	8006dd4 <xTraceKernelPortGetSystemHeapHandle>
 8005acc:	4622      	mov	r2, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	f001 f8f2 	bl	8006cb8 <xTraceHeapAlloc>
 8005ad4:	e7a8      	b.n	8005a28 <pvPortMalloc+0x8c>
 8005ad6:	bf00      	nop
 8005ad8:	20000dd4 	.word	0x20000dd4
 8005adc:	20000dc0 	.word	0x20000dc0
 8005ae0:	20000dd8 	.word	0x20000dd8
 8005ae4:	20002644 	.word	0x20002644
 8005ae8:	20002648 	.word	0x20002648
 8005aec:	20000dcc 	.word	0x20000dcc
 8005af0:	20000dc8 	.word	0x20000dc8
 8005af4:	20000de0 	.word	0x20000de0
 8005af8:	20002160 	.word	0x20002160
 8005afc:	20000dd0 	.word	0x20000dd0

08005b00 <vPortFree>:
	if( pv != NULL )
 8005b00:	b1e0      	cbz	r0, 8005b3c <vPortFree+0x3c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b02:	4a22      	ldr	r2, [pc, #136]	@ (8005b8c <vPortFree+0x8c>)
 8005b04:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	4213      	tst	r3, r2
{
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b10:	d00b      	beq.n	8005b2a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b12:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005b16:	b191      	cbz	r1, 8005b3e <vPortFree+0x3e>
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	e7fe      	b.n	8005b28 <vPortFree+0x28>
 8005b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b3a:	e7fe      	b.n	8005b3a <vPortFree+0x3a>
 8005b3c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b3e:	ea23 0302 	bic.w	r3, r3, r2
 8005b42:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005b46:	f7ff f953 	bl	8004df0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b4a:	4a11      	ldr	r2, [pc, #68]	@ (8005b90 <vPortFree+0x90>)
					traceFREE( pv, pxLink->xBlockSize );
 8005b4c:	4911      	ldr	r1, [pc, #68]	@ (8005b94 <vPortFree+0x94>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b4e:	6810      	ldr	r0, [r2, #0]
 8005b50:	f854 3c04 	ldr.w	r3, [r4, #-4]
					traceFREE( pv, pxLink->xBlockSize );
 8005b54:	6809      	ldr	r1, [r1, #0]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b56:	4403      	add	r3, r0
 8005b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 8005b5a:	07cb      	lsls	r3, r1, #31
 8005b5c:	d50a      	bpl.n	8005b74 <vPortFree+0x74>
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b98 <vPortFree+0x98>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	b133      	cbz	r3, 8005b74 <vPortFree+0x74>
 8005b66:	f001 f935 	bl	8006dd4 <xTraceKernelPortGetSystemHeapHandle>
 8005b6a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8005b6e:	4621      	mov	r1, r4
 8005b70:	f001 f8b8 	bl	8006ce4 <xTraceHeapFree>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b74:	f1a4 0008 	sub.w	r0, r4, #8
 8005b78:	f7ff fee6 	bl	8005948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b7c:	4a07      	ldr	r2, [pc, #28]	@ (8005b9c <vPortFree+0x9c>)
 8005b7e:	6813      	ldr	r3, [r2, #0]
}
 8005b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8005b84:	3301      	adds	r3, #1
 8005b86:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8005b88:	f7ff baac 	b.w	80050e4 <xTaskResumeAll>
 8005b8c:	20000dc0 	.word	0x20000dc0
 8005b90:	20000dd0 	.word	0x20000dd0
 8005b94:	20002644 	.word	0x20002644
 8005b98:	20002648 	.word	0x20002648
 8005b9c:	20000dc4 	.word	0x20000dc4

08005ba0 <xTraceStreamPortInitialize>:
{
	TraceRingBuffer_t* pxRingBuffer;

	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortData_t);
	
	if (pxBuffer == (void*)0)
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d065      	beq.n	8005c70 <xTraceStreamPortInitialize+0xd0>
	{
		return TRC_FAIL;
	}

	pxStreamPortData = (TraceStreamPortData_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 8005ba4:	4933      	ldr	r1, [pc, #204]	@ (8005c74 <xTraceStreamPortInitialize+0xd4>)
	pxRingBuffer = &pxStreamPortData->xRingBuffer;
	RecorderDataPtr = pxRingBuffer;
 8005ba6:	4a34      	ldr	r2, [pc, #208]	@ (8005c78 <xTraceStreamPortInitialize+0xd8>)
{
 8005ba8:	b510      	push	{r4, lr}

	pxRingBuffer->xEventBuffer.uxSize = sizeof(pxRingBuffer->xEventBuffer.uiBuffer);
 8005baa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
	pxStreamPortData = (TraceStreamPortData_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 8005bae:	6008      	str	r0, [r1, #0]
	pxRingBuffer = &pxStreamPortData->xRingBuffer;
 8005bb0:	1d01      	adds	r1, r0, #4
	RecorderDataPtr = pxRingBuffer;
 8005bb2:	6011      	str	r1, [r2, #0]
	pxRingBuffer->xEventBuffer.uxSize = sizeof(pxRingBuffer->xEventBuffer.uiBuffer);
 8005bb4:	f8c0 3adc 	str.w	r3, [r0, #2780]	@ 0xadc
	
#if (TRC_CFG_STREAM_PORT_RINGBUFFER_MODE == TRC_STREAM_PORT_RINGBUFFER_MODE_OVERWRITE_WHEN_FULL)
	if (xTraceMultiCoreEventBufferInitialize(&pxStreamPortData->xMultiCoreEventBuffer, TRC_EVENT_BUFFER_OPTION_OVERWRITE, pxRingBuffer->xEventBuffer.uiBuffer, sizeof(pxRingBuffer->xEventBuffer.uiBuffer)) == TRC_FAIL)
 8005bb8:	f500 622e 	add.w	r2, r0, #2784	@ 0xae0
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	f001 f90e 	bl	8006de0 <xTraceMultiCoreEventBufferInitialize>
 8005bc4:	2801      	cmp	r0, #1
 8005bc6:	d051      	beq.n	8005c6c <xTraceStreamPortInitialize+0xcc>
	{
		return TRC_FAIL;
	}
#endif

	if (xTraceHeaderInitialize(&pxRingBuffer->xHeaderBuffer) == TRC_FAIL)
 8005bc8:	f104 0014 	add.w	r0, r4, #20
 8005bcc:	f001 fb66 	bl	800729c <xTraceHeaderInitialize>
 8005bd0:	2801      	cmp	r0, #1
 8005bd2:	d04b      	beq.n	8005c6c <xTraceStreamPortInitialize+0xcc>
	{
		return TRC_FAIL;
	}
	
	if (xTraceEntryTableInitialize(&pxRingBuffer->xEntryTable) == TRC_FAIL)
 8005bd4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005bd8:	f000 f8e4 	bl	8005da4 <xTraceEntryTableInitialize>
 8005bdc:	2801      	cmp	r0, #1
 8005bde:	d045      	beq.n	8005c6c <xTraceStreamPortInitialize+0xcc>
	{
		return TRC_FAIL;
	}
	
	if (xTraceTimestampInitialize(&pxRingBuffer->xTimestampInfo) == TRC_FAIL)
 8005be0:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8005be4:	f001 fc54 	bl	8007490 <xTraceTimestampInitialize>
 8005be8:	2801      	cmp	r0, #1
 8005bea:	d03f      	beq.n	8005c6c <xTraceStreamPortInitialize+0xcc>
	{
		return TRC_FAIL;
	}

	pxRingBuffer->END_MARKERS[0] = 0x0AU;
 8005bec:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8005bf0:	200a      	movs	r0, #10
	pxRingBuffer->END_MARKERS[1] = 0x0BU;
 8005bf2:	220b      	movs	r2, #11
	pxRingBuffer->END_MARKERS[0] = 0x0AU;
 8005bf4:	f883 02e0 	strb.w	r0, [r3, #736]	@ 0x2e0
	pxRingBuffer->END_MARKERS[2] = 0x0CU;
 8005bf8:	210c      	movs	r1, #12
	pxRingBuffer->END_MARKERS[1] = 0x0BU;
 8005bfa:	f883 22e1 	strb.w	r2, [r3, #737]	@ 0x2e1
	pxRingBuffer->END_MARKERS[3] = 0x0DU;
 8005bfe:	220d      	movs	r2, #13
	pxRingBuffer->END_MARKERS[2] = 0x0CU;
 8005c00:	f883 12e2 	strb.w	r1, [r3, #738]	@ 0x2e2
	
	pxRingBuffer->END_MARKERS[4] = 0x71U;
 8005c04:	2071      	movs	r0, #113	@ 0x71
	pxRingBuffer->END_MARKERS[3] = 0x0DU;
 8005c06:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
	pxRingBuffer->END_MARKERS[5] = 0x72U;
 8005c0a:	2272      	movs	r2, #114	@ 0x72
	pxRingBuffer->END_MARKERS[4] = 0x71U;
 8005c0c:	f883 02e4 	strb.w	r0, [r3, #740]	@ 0x2e4
	pxRingBuffer->END_MARKERS[6] = 0x73U;
 8005c10:	2173      	movs	r1, #115	@ 0x73
	pxRingBuffer->END_MARKERS[5] = 0x72U;
 8005c12:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pxRingBuffer->END_MARKERS[7] = 0x74U;
 8005c16:	2274      	movs	r2, #116	@ 0x74
	pxRingBuffer->END_MARKERS[6] = 0x73U;
 8005c18:	f883 12e6 	strb.w	r1, [r3, #742]	@ 0x2e6
	
	pxRingBuffer->END_MARKERS[8] = 0xF1U;
 8005c1c:	20f1      	movs	r0, #241	@ 0xf1
	pxRingBuffer->END_MARKERS[7] = 0x74U;
 8005c1e:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pxRingBuffer->END_MARKERS[9] = 0xF2U;
 8005c22:	22f2      	movs	r2, #242	@ 0xf2
	pxRingBuffer->END_MARKERS[8] = 0xF1U;
 8005c24:	f883 02e8 	strb.w	r0, [r3, #744]	@ 0x2e8
	pxRingBuffer->END_MARKERS[10] = 0xF3U;
 8005c28:	21f3      	movs	r1, #243	@ 0xf3
	pxRingBuffer->END_MARKERS[9] = 0xF2U;
 8005c2a:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pxRingBuffer->END_MARKERS[11] = 0xF4U;
 8005c2e:	22f4      	movs	r2, #244	@ 0xf4
	pxRingBuffer->END_MARKERS[10] = 0xF3U;
 8005c30:	f883 12ea 	strb.w	r1, [r3, #746]	@ 0x2ea

	pxRingBuffer->START_MARKERS[0] = 0x05U;
 8005c34:	2005      	movs	r0, #5
	pxRingBuffer->END_MARKERS[11] = 0xF4U;
 8005c36:	f883 22eb 	strb.w	r2, [r3, #747]	@ 0x2eb
	pxRingBuffer->START_MARKERS[1] = 0x06U;
 8005c3a:	2106      	movs	r1, #6
	pxRingBuffer->START_MARKERS[2] = 0x07U;
 8005c3c:	2207      	movs	r2, #7
	pxRingBuffer->START_MARKERS[3] = 0x08U;
 8005c3e:	2308      	movs	r3, #8
	pxRingBuffer->START_MARKERS[0] = 0x05U;
 8005c40:	7220      	strb	r0, [r4, #8]
	pxRingBuffer->START_MARKERS[1] = 0x06U;
 8005c42:	7261      	strb	r1, [r4, #9]
	
	pxRingBuffer->START_MARKERS[4] = 0x75U;
 8005c44:	2075      	movs	r0, #117	@ 0x75
	pxRingBuffer->START_MARKERS[2] = 0x07U;
 8005c46:	72a2      	strb	r2, [r4, #10]
	pxRingBuffer->START_MARKERS[5] = 0x76U;
 8005c48:	2176      	movs	r1, #118	@ 0x76
	pxRingBuffer->START_MARKERS[3] = 0x08U;
 8005c4a:	72e3      	strb	r3, [r4, #11]
	pxRingBuffer->START_MARKERS[6] = 0x77U;
 8005c4c:	2277      	movs	r2, #119	@ 0x77
	pxRingBuffer->START_MARKERS[7] = 0x78U;
 8005c4e:	2378      	movs	r3, #120	@ 0x78
	pxRingBuffer->START_MARKERS[4] = 0x75U;
 8005c50:	7320      	strb	r0, [r4, #12]
	pxRingBuffer->START_MARKERS[5] = 0x76U;
 8005c52:	7361      	strb	r1, [r4, #13]
	
	pxRingBuffer->START_MARKERS[8] = 0xF5U;
 8005c54:	20f5      	movs	r0, #245	@ 0xf5
	pxRingBuffer->START_MARKERS[6] = 0x77U;
 8005c56:	73a2      	strb	r2, [r4, #14]
	pxRingBuffer->START_MARKERS[9] = 0xF6U;
 8005c58:	21f6      	movs	r1, #246	@ 0xf6
	pxRingBuffer->START_MARKERS[7] = 0x78U;
 8005c5a:	73e3      	strb	r3, [r4, #15]
	pxRingBuffer->START_MARKERS[10] = 0xF7U;
 8005c5c:	22f7      	movs	r2, #247	@ 0xf7
	pxRingBuffer->START_MARKERS[11] = 0xF8U;
 8005c5e:	23f8      	movs	r3, #248	@ 0xf8
	pxRingBuffer->START_MARKERS[8] = 0xF5U;
 8005c60:	7420      	strb	r0, [r4, #16]
	pxRingBuffer->START_MARKERS[9] = 0xF6U;
 8005c62:	7461      	strb	r1, [r4, #17]
	pxRingBuffer->START_MARKERS[10] = 0xF7U;
 8005c64:	74a2      	strb	r2, [r4, #18]
	pxRingBuffer->START_MARKERS[11] = 0xF8U;
 8005c66:	74e3      	strb	r3, [r4, #19]
	
	return TRC_SUCCESS;
 8005c68:	2000      	movs	r0, #0
}
 8005c6a:	bd10      	pop	{r4, pc}
		return TRC_FAIL;
 8005c6c:	2001      	movs	r0, #1
}
 8005c6e:	bd10      	pop	{r4, pc}
		return TRC_FAIL;
 8005c70:	2001      	movs	r0, #1
}
 8005c72:	4770      	bx	lr
 8005c74:	20002168 	.word	0x20002168
 8005c78:	2000216c 	.word	0x2000216c

08005c7c <xTraceStreamPortOnTraceBegin>:

traceResult xTraceStreamPortOnTraceBegin(void)
{
	return xTraceMultiCoreEventBufferClear(&pxStreamPortData->xMultiCoreEventBuffer);
 8005c7c:	4b01      	ldr	r3, [pc, #4]	@ (8005c84 <xTraceStreamPortOnTraceBegin+0x8>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	f001 b8c0 	b.w	8006e04 <xTraceMultiCoreEventBufferClear>
 8005c84:	20002168 	.word	0x20002168

08005c88 <xTraceCounterInitialize>:

	pxCounterData = pxBuffer;
	
	pxCounterData->xCallbackFunction = 0;
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 8005c88:	4906      	ldr	r1, [pc, #24]	@ (8005ca4 <xTraceCounterInitialize+0x1c>)
 8005c8a:	680a      	ldr	r2, [r1, #0]
{
 8005c8c:	b410      	push	{r4}
 8005c8e:	4603      	mov	r3, r0
	pxCounterData = pxBuffer;
 8005c90:	4c05      	ldr	r4, [pc, #20]	@ (8005ca8 <xTraceCounterInitialize+0x20>)
	pxCounterData->xCallbackFunction = 0;
 8005c92:	2000      	movs	r0, #0
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 8005c94:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
	pxCounterData->xCallbackFunction = 0;
 8005c98:	6018      	str	r0, [r3, #0]
	pxCounterData = pxBuffer;
 8005c9a:	6023      	str	r3, [r4, #0]
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 8005c9c:	600a      	str	r2, [r1, #0]
	
	return TRC_SUCCESS;
}
 8005c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	20002644 	.word	0x20002644
 8005ca8:	20002170 	.word	0x20002170

08005cac <xTraceDiagnosticsInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceDiagnosticsData_t *pxDiagnostics TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsData_t *pxBuffer)
{
 8005cac:	4603      	mov	r3, r0
	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
	{
		pxDiagnostics->metrics[i] = 0;
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 8005cae:	4908      	ldr	r1, [pc, #32]	@ (8005cd0 <xTraceDiagnosticsInitialize+0x24>)
		pxDiagnostics->metrics[i] = 0;
 8005cb0:	2000      	movs	r0, #0
{
 8005cb2:	b410      	push	{r4}
		pxDiagnostics->metrics[i] = 0;
 8005cb4:	6018      	str	r0, [r3, #0]
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 8005cb6:	680a      	ldr	r2, [r1, #0]
	pxDiagnostics = pxBuffer;
 8005cb8:	4c06      	ldr	r4, [pc, #24]	@ (8005cd4 <xTraceDiagnosticsInitialize+0x28>)
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 8005cba:	f042 0208 	orr.w	r2, r2, #8
	pxDiagnostics = pxBuffer;
 8005cbe:	6023      	str	r3, [r4, #0]
		pxDiagnostics->metrics[i] = 0;
 8005cc0:	e9c3 0001 	strd	r0, r0, [r3, #4]
 8005cc4:	e9c3 0003 	strd	r0, r0, [r3, #12]

	return TRC_SUCCESS;
}
 8005cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 8005ccc:	600a      	str	r2, [r1, #0]
}
 8005cce:	4770      	bx	lr
 8005cd0:	20002644 	.word	0x20002644
 8005cd4:	20002174 	.word	0x20002174

08005cd8 <xTraceDiagnosticsIncrease>:
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 8005cd8:	4b04      	ldr	r3, [pc, #16]	@ (8005cec <xTraceDiagnosticsIncrease+0x14>)
 8005cda:	6819      	ldr	r1, [r3, #0]

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 8005cdc:	4603      	mov	r3, r0
	return xTraceDiagnosticsAdd(xType, 1);
}
 8005cde:	2000      	movs	r0, #0
	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 8005ce0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8005ce4:	3201      	adds	r2, #1
 8005ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005cea:	4770      	bx	lr
 8005cec:	20002174 	.word	0x20002174

08005cf0 <xTraceDiagnosticsSetIfHigher>:
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 8005cf0:	4b04      	ldr	r3, [pc, #16]	@ (8005d04 <xTraceDiagnosticsSetIfHigher+0x14>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8005cf8:	428a      	cmp	r2, r1
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 8005cfa:	bfb8      	it	lt
 8005cfc:	f843 1020 	strlt.w	r1, [r3, r0, lsl #2]
	}

	return TRC_SUCCESS;
}
 8005d00:	2000      	movs	r0, #0
 8005d02:	4770      	bx	lr
 8005d04:	20002174 	.word	0x20002174

08005d08 <xTraceDiagnosticsCheckStatus>:
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
	/* It is probably good if we always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS) == 0U)
 8005d08:	4b1d      	ldr	r3, [pc, #116]	@ (8005d80 <xTraceDiagnosticsCheckStatus+0x78>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	071b      	lsls	r3, r3, #28
 8005d0e:	d535      	bpl.n	8005d7c <xTraceDiagnosticsCheckStatus+0x74>
{
 8005d10:	b510      	push	{r4, lr}
	{
		return TRC_FAIL;
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 8005d12:	4c1c      	ldr	r4, [pc, #112]	@ (8005d84 <xTraceDiagnosticsCheckStatus+0x7c>)
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	dc1c      	bgt.n	8005d56 <xTraceDiagnosticsCheckStatus+0x4e>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	2a1c      	cmp	r2, #28
 8005d20:	dc22      	bgt.n	8005d68 <xTraceDiagnosticsCheckStatus+0x60>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	dc0c      	bgt.n	8005d42 <xTraceDiagnosticsCheckStatus+0x3a>
	{
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dc01      	bgt.n	8005d32 <xTraceDiagnosticsCheckStatus+0x2a>
	{
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
	}

	return TRC_SUCCESS;
 8005d2e:	2000      	movs	r0, #0
}
 8005d30:	bd10      	pop	{r4, pc}
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 8005d32:	200e      	movs	r0, #14
 8005d34:	f000 f948 	bl	8005fc8 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	60da      	str	r2, [r3, #12]
	return TRC_SUCCESS;
 8005d3e:	2000      	movs	r0, #0
}
 8005d40:	bd10      	pop	{r4, pc}
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 8005d42:	200a      	movs	r0, #10
 8005d44:	f000 f940 	bl	8005fc8 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	609a      	str	r2, [r3, #8]
	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	ddec      	ble.n	8005d2e <xTraceDiagnosticsCheckStatus+0x26>
 8005d54:	e7ed      	b.n	8005d32 <xTraceDiagnosticsCheckStatus+0x2a>
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 8005d56:	2008      	movs	r0, #8
 8005d58:	f000 f936 	bl	8005fc8 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	605a      	str	r2, [r3, #4]
	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	2a1c      	cmp	r2, #28
 8005d66:	dddc      	ble.n	8005d22 <xTraceDiagnosticsCheckStatus+0x1a>
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 8005d68:	2009      	movs	r0, #9
 8005d6a:	f000 f92d 	bl	8005fc8 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	2a00      	cmp	r2, #0
 8005d78:	ddd6      	ble.n	8005d28 <xTraceDiagnosticsCheckStatus+0x20>
 8005d7a:	e7e2      	b.n	8005d42 <xTraceDiagnosticsCheckStatus+0x3a>
		return TRC_FAIL;
 8005d7c:	2001      	movs	r0, #1
}
 8005d7e:	4770      	bx	lr
 8005d80:	20002644 	.word	0x20002644
 8005d84:	20002174 	.word	0x20002174

08005d88 <xTraceEntryIndexTableInitialize>:
traceResult xTraceEntryIndexTableInitialize(TraceEntryIndexTable_t* const pxBuffer)
{
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxIndexTable = pxBuffer;
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <xTraceEntryIndexTableInitialize+0x18>)
 8005d8a:	1e42      	subs	r2, r0, #1
 8005d8c:	6018      	str	r0, [r3, #0]

static traceResult prvEntryIndexInitialize(void)
{
	uint32_t i;

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8005d8e:	2300      	movs	r3, #0
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 8005d90:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8005d94:	3301      	adds	r3, #1
 8005d96:	2b38      	cmp	r3, #56	@ 0x38
 8005d98:	d1fa      	bne.n	8005d90 <xTraceEntryIndexTableInitialize+0x8>
	}

	pxIndexTable->uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 8005d9a:	6383      	str	r3, [r0, #56]	@ 0x38
}
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	4770      	bx	lr
 8005da0:	20002178 	.word	0x20002178

08005da4 <xTraceEntryTableInitialize>:
{
 8005da4:	b410      	push	{r4}
	pxEntryTable = pxBuffer;
 8005da6:	4c0f      	ldr	r4, [pc, #60]	@ (8005de4 <xTraceEntryTableInitialize+0x40>)
	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 8005da8:	2138      	movs	r1, #56	@ 0x38
 8005daa:	221c      	movs	r2, #28
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 8005dac:	2303      	movs	r3, #3
	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 8005dae:	e9c0 1200 	strd	r1, r2, [r0]
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 8005db2:	6083      	str	r3, [r0, #8]
	pxEntryTable = pxBuffer;
 8005db4:	6020      	str	r0, [r4, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8005db6:	f100 0310 	add.w	r3, r0, #16
 8005dba:	f500 6129 	add.w	r1, r0, #2704	@ 0xa90
		pxEntryTable->axEntries[i].pvAddress = 0;
 8005dbe:	2200      	movs	r2, #0
		pxEntryTable->axEntries[i].szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005dc0:	741a      	strb	r2, [r3, #16]
			pxEntryTable->axEntries[i].xStates[j] = (TraceUnsignedBaseType_t)0;
 8005dc2:	e943 2201 	strd	r2, r2, [r3, #-4]
 8005dc6:	e9c3 2201 	strd	r2, r2, [r3, #4]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 8005dca:	3330      	adds	r3, #48	@ 0x30
 8005dcc:	428b      	cmp	r3, r1
 8005dce:	d1f7      	bne.n	8005dc0 <xTraceEntryTableInitialize+0x1c>
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 8005dd0:	4a05      	ldr	r2, [pc, #20]	@ (8005de8 <xTraceEntryTableInitialize+0x44>)
}
 8005dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 8005dd6:	6813      	ldr	r3, [r2, #0]
 8005dd8:	f043 0310 	orr.w	r3, r3, #16
}
 8005ddc:	2000      	movs	r0, #0
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 8005dde:	6013      	str	r3, [r2, #0]
}
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	2000217c 	.word	0x2000217c
 8005de8:	20002644 	.word	0x20002644

08005dec <xTraceEntryCreate>:
{
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 8005dee:	4b1d      	ldr	r3, [pc, #116]	@ (8005e64 <xTraceEntryCreate+0x78>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	06db      	lsls	r3, r3, #27
 8005df4:	d401      	bmi.n	8005dfa <xTraceEntryCreate+0xe>
		return TRC_FAIL;
 8005df6:	2001      	movs	r0, #1
}
 8005df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f383 8810 	msr	PRIMASK, r3
static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 8005e04:	4a18      	ldr	r2, [pc, #96]	@ (8005e68 <xTraceEntryCreate+0x7c>)
 8005e06:	6816      	ldr	r6, [r2, #0]
 8005e08:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8005e0a:	b329      	cbz	r1, 8005e58 <xTraceEntryCreate+0x6c>
	pxEntry = &pxEntryTable->axEntries[xIndex];
 8005e0c:	4b17      	ldr	r3, [pc, #92]	@ (8005e6c <xTraceEntryCreate+0x80>)
	{
		return TRC_FAIL;
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 8005e0e:	7832      	ldrb	r2, [r6, #0]
	pxEntry = &pxEntryTable->axEntries[xIndex];
 8005e10:	681b      	ldr	r3, [r3, #0]
	pxIndexTable->uiFreeIndexCount--;
 8005e12:	3901      	subs	r1, #1
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 8005e14:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	pxEntry = &pxEntryTable->axEntries[xIndex];
 8005e18:	2430      	movs	r4, #48	@ 0x30
	pxIndexTable->uiFreeIndexCount--;
 8005e1a:	63b1      	str	r1, [r6, #56]	@ 0x38

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 8005e1c:	eb03 1e0c 	add.w	lr, r3, ip, lsl #4
	pxEntry = &pxEntryTable->axEntries[xIndex];
 8005e20:	fb04 3302 	mla	r3, r4, r2, r3
 8005e24:	f103 020c 	add.w	r2, r3, #12
 8005e28:	f10e 0410 	add.w	r4, lr, #16
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 8005e2c:	5c73      	ldrb	r3, [r6, r1]
 8005e2e:	7033      	strb	r3, [r6, #0]
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 8005e30:	46f4      	mov	ip, lr
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 8005e32:	2300      	movs	r3, #0

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 8005e34:	27ff      	movs	r7, #255	@ 0xff
 8005e36:	5477      	strb	r7, [r6, r1]
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 8005e38:	f10e 0e08 	add.w	lr, lr, #8
 8005e3c:	f8ce 2004 	str.w	r2, [lr, #4]
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 8005e40:	f8ce 3008 	str.w	r3, [lr, #8]
 8005e44:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8005e48:	60e3      	str	r3, [r4, #12]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 8005e4a:	f88c 3020 	strb.w	r3, [ip, #32]
	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8005e4e:	6002      	str	r2, [r0, #0]
 8005e50:	f385 8810 	msr	PRIMASK, r5
	return TRC_SUCCESS;
 8005e54:	4618      	mov	r0, r3
}
 8005e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff ff3d 	bl	8005cd8 <xTraceDiagnosticsIncrease>
 8005e5e:	f385 8810 	msr	PRIMASK, r5
		return TRC_FAIL;
 8005e62:	e7c8      	b.n	8005df6 <xTraceEntryCreate+0xa>
 8005e64:	20002644 	.word	0x20002644
 8005e68:	20002178 	.word	0x20002178
 8005e6c:	2000217c 	.word	0x2000217c

08005e70 <xTraceEntrySetSymbol>:
{
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	4606      	mov	r6, r0
	if (szSymbol == (void*)0)
 8005e74:	460d      	mov	r5, r1
 8005e76:	b179      	cbz	r1, 8005e98 <xTraceEntrySetSymbol+0x28>
 8005e78:	4614      	mov	r4, r2
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	f7ff ff37 	bl	8005cf0 <xTraceDiagnosticsSetIfHigher>
	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 8005e82:	2c1b      	cmp	r4, #27
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8005e84:	bf94      	ite	ls
 8005e86:	1c62      	addls	r2, r4, #1
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8005e88:	221c      	movhi	r2, #28
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	f106 0014 	add.w	r0, r6, #20
 8005e90:	f002 fb81 	bl	8008596 <memcpy>
}
 8005e94:	2000      	movs	r0, #0
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8005e98:	4d05      	ldr	r5, [pc, #20]	@ (8005eb0 <xTraceEntrySetSymbol+0x40>)
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	f7ff ff28 	bl	8005cf0 <xTraceDiagnosticsSetIfHigher>
 8005ea0:	2201      	movs	r2, #1
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f106 0014 	add.w	r0, r6, #20
 8005ea8:	f002 fb75 	bl	8008596 <memcpy>
}
 8005eac:	2000      	movs	r0, #0
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
 8005eb0:	0800bcf0 	.word	0x0800bcf0

08005eb4 <prvTraceErrorGetDescription>:
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 8005eb4:	280e      	cmp	r0, #14
 8005eb6:	d827      	bhi.n	8005f08 <prvTraceErrorGetDescription+0x54>
 8005eb8:	e8df f000 	tbb	[pc, r0]
 8005ebc:	201e1c10 	.word	0x201e1c10
 8005ec0:	081a1822 	.word	0x081a1822
 8005ec4:	12240e0c 	.word	0x12240e0c
 8005ec8:	1408      	.short	0x1408
 8005eca:	16          	.byte	0x16
 8005ecb:	00          	.byte	0x00
	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
		break;
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8005f0c <prvTraceErrorGetDescription+0x58>)
		*pszDesc = "Exceeded TRC_CFG_ENTRY_SLOTS";
 8005ece:	600b      	str	r3, [r1, #0]
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
		break;
	}

	return TRC_SUCCESS;
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	4770      	bx	lr
	switch (uiErrorCode)
 8005ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f10 <prvTraceErrorGetDescription+0x5c>)
 8005ed6:	e7fa      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <prvTraceErrorGetDescription+0x60>)
 8005eda:	e7f8      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
 8005edc:	2001      	movs	r0, #1
}
 8005ede:	4770      	bx	lr
		break;
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8005f18 <prvTraceErrorGetDescription+0x64>)
 8005ee2:	e7f4      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <prvTraceErrorGetDescription+0x68>)
 8005ee6:	e7f2      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <prvTraceErrorGetDescription+0x6c>)
 8005eea:	e7f0      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005eec:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <prvTraceErrorGetDescription+0x70>)
 8005eee:	e7ee      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <prvTraceErrorGetDescription+0x74>)
 8005ef2:	e7ec      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8005f2c <prvTraceErrorGetDescription+0x78>)
 8005ef6:	e7ea      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <prvTraceErrorGetDescription+0x7c>)
 8005efa:	e7e8      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005efc:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <prvTraceErrorGetDescription+0x80>)
 8005efe:	e7e6      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005f00:	4b0d      	ldr	r3, [pc, #52]	@ (8005f38 <prvTraceErrorGetDescription+0x84>)
 8005f02:	e7e4      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005f04:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <prvTraceErrorGetDescription+0x88>)
 8005f06:	e7e2      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
		break;
 8005f08:	4b0d      	ldr	r3, [pc, #52]	@ (8005f40 <prvTraceErrorGetDescription+0x8c>)
 8005f0a:	e7e0      	b.n	8005ece <prvTraceErrorGetDescription+0x1a>
 8005f0c:	0800be18 	.word	0x0800be18
 8005f10:	0800bd8c 	.word	0x0800bd8c
 8005f14:	0800bdac 	.word	0x0800bdac
 8005f18:	0800bdec 	.word	0x0800bdec
 8005f1c:	0800be44 	.word	0x0800be44
 8005f20:	0800be60 	.word	0x0800be60
 8005f24:	0800bedc 	.word	0x0800bedc
 8005f28:	0800bef8 	.word	0x0800bef8
 8005f2c:	0800bf10 	.word	0x0800bf10
 8005f30:	0800be9c 	.word	0x0800be9c
 8005f34:	0800beb0 	.word	0x0800beb0
 8005f38:	0800bec8 	.word	0x0800bec8
 8005f3c:	0800bdd8 	.word	0x0800bdd8
 8005f40:	0800be80 	.word	0x0800be80

08005f44 <prvTraceErrorPrint>:
{
 8005f44:	b530      	push	{r4, r5, lr}
	if (pxErrorInfo->xWarningChannel == 0)
 8005f46:	4d13      	ldr	r5, [pc, #76]	@ (8005f94 <prvTraceErrorPrint+0x50>)
 8005f48:	6829      	ldr	r1, [r5, #0]
 8005f4a:	688b      	ldr	r3, [r1, #8]
{
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	4604      	mov	r4, r0
	if (pxErrorInfo->xWarningChannel == 0)
 8005f50:	b1c3      	cbz	r3, 8005f84 <prvTraceErrorPrint+0x40>
	(void)prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 8005f52:	a901      	add	r1, sp, #4
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff ffad 	bl	8005eb4 <prvTraceErrorGetDescription>
	switch (uiErrorCode)
 8005f5a:	2c01      	cmp	r4, #1
 8005f5c:	d00f      	beq.n	8005f7e <prvTraceErrorPrint+0x3a>
 8005f5e:	1ea3      	subs	r3, r4, #2
 8005f60:	2b0c      	cmp	r3, #12
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
 8005f62:	682b      	ldr	r3, [r5, #0]
	switch (uiErrorCode)
 8005f64:	d806      	bhi.n	8005f74 <prvTraceErrorPrint+0x30>
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
 8005f66:	9901      	ldr	r1, [sp, #4]
 8005f68:	6898      	ldr	r0, [r3, #8]
 8005f6a:	f001 f89d 	bl	80070a8 <xTracePrint>
	return TRC_SUCCESS;
 8005f6e:	2000      	movs	r0, #0
}
 8005f70:	b003      	add	sp, #12
 8005f72:	bd30      	pop	{r4, r5, pc}
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
 8005f74:	4908      	ldr	r1, [pc, #32]	@ (8005f98 <prvTraceErrorPrint+0x54>)
 8005f76:	6898      	ldr	r0, [r3, #8]
 8005f78:	4622      	mov	r2, r4
 8005f7a:	f001 f8e3 	bl	8007144 <xTracePrintF>
{
 8005f7e:	2001      	movs	r0, #1
}
 8005f80:	b003      	add	sp, #12
 8005f82:	bd30      	pop	{r4, r5, pc}
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 8005f84:	4805      	ldr	r0, [pc, #20]	@ (8005f9c <prvTraceErrorPrint+0x58>)
 8005f86:	3108      	adds	r1, #8
 8005f88:	f001 fa1e 	bl	80073c8 <xTraceStringRegister>
 8005f8c:	2801      	cmp	r0, #1
 8005f8e:	d1e0      	bne.n	8005f52 <prvTraceErrorPrint+0xe>
 8005f90:	e7f5      	b.n	8005f7e <prvTraceErrorPrint+0x3a>
 8005f92:	bf00      	nop
 8005f94:	20002180 	.word	0x20002180
 8005f98:	0800be80 	.word	0x0800be80
 8005f9c:	0800bf20 	.word	0x0800bf20

08005fa0 <xTraceErrorInitialize>:
{
 8005fa0:	4603      	mov	r3, r0
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8005fa2:	4907      	ldr	r1, [pc, #28]	@ (8005fc0 <xTraceErrorInitialize+0x20>)
	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 8005fa4:	2000      	movs	r0, #0
{
 8005fa6:	b410      	push	{r4}
	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 8005fa8:	6018      	str	r0, [r3, #0]
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8005faa:	680a      	ldr	r2, [r1, #0]
	pxErrorInfo = pxBuffer;
 8005fac:	4c05      	ldr	r4, [pc, #20]	@ (8005fc4 <xTraceErrorInitialize+0x24>)
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8005fae:	f042 0220 	orr.w	r2, r2, #32
	pxErrorInfo = pxBuffer;
 8005fb2:	6023      	str	r3, [r4, #0]
	pxErrorInfo->xWarningChannel = 0;
 8005fb4:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
 8005fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8005fbc:	600a      	str	r2, [r1, #0]
}
 8005fbe:	4770      	bx	lr
 8005fc0:	20002644 	.word	0x20002644
 8005fc4:	20002180 	.word	0x20002180

08005fc8 <xTraceWarning>:
{
 8005fc8:	b508      	push	{r3, lr}
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <xTraceWarning+0x38>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	0693      	lsls	r3, r2, #26
 8005fd0:	d514      	bpl.n	8005ffc <xTraceWarning+0x34>
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0u)
 8005fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8006004 <xTraceWarning+0x3c>)
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	6811      	ldr	r1, [r2, #0]
 8005fd8:	1e43      	subs	r3, r0, #1
 8005fda:	fa21 fc03 	lsr.w	ip, r1, r3
 8005fde:	f01c 0f01 	tst.w	ip, #1
 8005fe2:	d001      	beq.n	8005fe8 <xTraceWarning+0x20>
	return TRC_SUCCESS;
 8005fe4:	2000      	movs	r0, #0
}
 8005fe6:	bd08      	pop	{r3, pc}
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8005fe8:	f04f 0c01 	mov.w	ip, #1
 8005fec:	fa0c f303 	lsl.w	r3, ip, r3
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6013      	str	r3, [r2, #0]
		(void)prvTraceErrorPrint(uiErrorCode);
 8005ff4:	f7ff ffa6 	bl	8005f44 <prvTraceErrorPrint>
	return TRC_SUCCESS;
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e7f4      	b.n	8005fe6 <xTraceWarning+0x1e>
		return TRC_FAIL;
 8005ffc:	2001      	movs	r0, #1
}
 8005ffe:	bd08      	pop	{r3, pc}
 8006000:	20002644 	.word	0x20002644
 8006004:	20002180 	.word	0x20002180

08006008 <xTraceError>:
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 8006008:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <xTraceError+0x50>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	0693      	lsls	r3, r2, #26
 800600e:	d520      	bpl.n	8006052 <xTraceError+0x4a>
{
 8006010:	b510      	push	{r4, lr}
	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 8006012:	4c12      	ldr	r4, [pc, #72]	@ (800605c <xTraceError+0x54>)
 8006014:	6822      	ldr	r2, [r4, #0]
 8006016:	6851      	ldr	r1, [r2, #4]
 8006018:	b109      	cbz	r1, 800601e <xTraceError+0x16>
	return TRC_SUCCESS;
 800601a:	2000      	movs	r0, #0
}
 800601c:	bd10      	pop	{r4, pc}
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 800601e:	6813      	ldr	r3, [r2, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 8006020:	6050      	str	r0, [r2, #4]
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8006022:	f100 3cff 	add.w	ip, r0, #4294967295
 8006026:	2101      	movs	r1, #1
 8006028:	fa01 f10c 	lsl.w	r1, r1, ip
 800602c:	430b      	orrs	r3, r1
 800602e:	6013      	str	r3, [r2, #0]
		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 8006030:	f7ff ff88 	bl	8005f44 <prvTraceErrorPrint>
 8006034:	2801      	cmp	r0, #1
 8006036:	d008      	beq.n	800604a <xTraceError+0x42>
		(void)xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	4909      	ldr	r1, [pc, #36]	@ (8006060 <xTraceError+0x58>)
 800603c:	6898      	ldr	r0, [r3, #8]
 800603e:	f001 f833 	bl	80070a8 <xTracePrint>
		(void)xTraceDisable();
 8006042:	f001 f99b 	bl	800737c <xTraceDisable>
	return TRC_SUCCESS;
 8006046:	2000      	movs	r0, #0
 8006048:	e7e8      	b.n	800601c <xTraceError+0x14>
			(void)xTraceDisable();
 800604a:	f001 f997 	bl	800737c <xTraceDisable>
		return TRC_FAIL;
 800604e:	2001      	movs	r0, #1
}
 8006050:	bd10      	pop	{r4, pc}
		return TRC_FAIL;
 8006052:	2001      	movs	r0, #1
}
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20002644 	.word	0x20002644
 800605c:	20002180 	.word	0x20002180
 8006060:	0800bf28 	.word	0x0800bf28

08006064 <xTraceEventInitialize>:
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
	{
		pxTraceEventDataTable->coreEventData[i].eventCounter = 0u;
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 8006064:	4906      	ldr	r1, [pc, #24]	@ (8006080 <xTraceEventInitialize+0x1c>)
 8006066:	680a      	ldr	r2, [r1, #0]
{
 8006068:	b410      	push	{r4}
 800606a:	4603      	mov	r3, r0
	pxTraceEventDataTable = pxBuffer;
 800606c:	4c05      	ldr	r4, [pc, #20]	@ (8006084 <xTraceEventInitialize+0x20>)
		pxTraceEventDataTable->coreEventData[i].eventCounter = 0u;
 800606e:	2000      	movs	r0, #0
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 8006070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
	pxTraceEventDataTable = pxBuffer;
 8006074:	6023      	str	r3, [r4, #0]
		pxTraceEventDataTable->coreEventData[i].eventCounter = 0u;
 8006076:	6018      	str	r0, [r3, #0]

	return TRC_SUCCESS;
}
 8006078:	f85d 4b04 	ldr.w	r4, [sp], #4
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 800607c:	600a      	str	r2, [r1, #0]
}
 800607e:	4770      	bx	lr
 8006080:	20002644 	.word	0x20002644
 8006084:	20002184 	.word	0x20002184

08006088 <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 8006088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TraceEvent1_t* pxEventData = (void*)0;
	int32_t iBytesCommitted = 0;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 800608c:	4a24      	ldr	r2, [pc, #144]	@ (8006120 <xTraceEventCreate1+0x98>)
 800608e:	6812      	ldr	r2, [r2, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 8006090:	2300      	movs	r3, #0
{
 8006092:	b082      	sub	sp, #8
	int32_t iBytesCommitted = 0;
 8006094:	e9cd 3300 	strd	r3, r3, [sp]
	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 8006098:	07d3      	lsls	r3, r2, #31
 800609a:	d503      	bpl.n	80060a4 <xTraceEventCreate1+0x1c>
 800609c:	4b21      	ldr	r3, [pc, #132]	@ (8006124 <xTraceEventCreate1+0x9c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b90b      	cbnz	r3, 80060a8 <xTraceEventCreate1+0x20>
 80060a4:	2001      	movs	r0, #1
 80060a6:	e031      	b.n	800610c <xTraceEventCreate1+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a8:	4604      	mov	r4, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b0:	2301      	movs	r3, #1
 80060b2:	f383 8810 	msr	PRIMASK, r3
 80060b6:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8006134 <xTraceEventCreate1+0xac>
 80060ba:	4f1b      	ldr	r7, [pc, #108]	@ (8006128 <xTraceEventCreate1+0xa0>)
 80060bc:	f8d8 2000 	ldr.w	r2, [r8]
 80060c0:	6813      	ldr	r3, [r2, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	466a      	mov	r2, sp
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	210c      	movs	r1, #12
 80060ce:	f000 fccd 	bl	8006a6c <xTraceEventBufferAlloc>
 80060d2:	2801      	cmp	r0, #1
 80060d4:	d021      	beq.n	800611a <xTraceEventCreate1+0x92>
 80060d6:	f8d8 3000 	ldr.w	r3, [r8]
 80060da:	9900      	ldr	r1, [sp, #0]
 80060dc:	f444 5080 	orr.w	r0, r4, #4096	@ 0x1000
 80060e0:	681c      	ldr	r4, [r3, #0]
 80060e2:	4b12      	ldr	r3, [pc, #72]	@ (800612c <xTraceEventCreate1+0xa4>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b12      	ldr	r3, [pc, #72]	@ (8006130 <xTraceEventCreate1+0xa8>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	8008      	strh	r0, [r1, #0]
 80060ec:	6950      	ldr	r0, [r2, #20]
 80060ee:	804c      	strh	r4, [r1, #2]
 80060f0:	4283      	cmp	r3, r0
 80060f2:	604b      	str	r3, [r1, #4]
 80060f4:	d30d      	bcc.n	8006112 <xTraceEventCreate1+0x8a>
 80060f6:	6153      	str	r3, [r2, #20]

	TRACE_EVENT_ADD_1(uxParam1);

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 80060f8:	683b      	ldr	r3, [r7, #0]
	TRACE_EVENT_ADD_1(uxParam1);
 80060fa:	608d      	str	r5, [r1, #8]
	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	220c      	movs	r2, #12
 8006100:	ab01      	add	r3, sp, #4
 8006102:	f000 fd77 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 8006106:	f386 8810 	msr	PRIMASK, r6

	return TRC_SUCCESS;
 800610a:	2000      	movs	r0, #0
}
 800610c:	b002      	add	sp, #8
 800610e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 8006112:	68d0      	ldr	r0, [r2, #12]
 8006114:	3001      	adds	r0, #1
 8006116:	60d0      	str	r0, [r2, #12]
 8006118:	e7ed      	b.n	80060f6 <xTraceEventCreate1+0x6e>
 800611a:	f386 8810 	msr	PRIMASK, r6
 800611e:	e7c1      	b.n	80060a4 <xTraceEventCreate1+0x1c>
 8006120:	20002644 	.word	0x20002644
 8006124:	20002648 	.word	0x20002648
 8006128:	20002168 	.word	0x20002168
 800612c:	20005c48 	.word	0x20005c48
 8006130:	e0001000 	.word	0xe0001000
 8006134:	20002184 	.word	0x20002184

08006138 <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 8006138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	TraceEvent2_t* pxEventData = (void*)0;
	int32_t iBytesCommitted = 0;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 800613c:	4c27      	ldr	r4, [pc, #156]	@ (80061dc <xTraceEventCreate2+0xa4>)
 800613e:	6824      	ldr	r4, [r4, #0]
	TraceEvent2_t* pxEventData = (void*)0;
 8006140:	2300      	movs	r3, #0
{
 8006142:	b083      	sub	sp, #12
	int32_t iBytesCommitted = 0;
 8006144:	e9cd 3300 	strd	r3, r3, [sp]
	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 8006148:	07e3      	lsls	r3, r4, #31
 800614a:	d503      	bpl.n	8006154 <xTraceEventCreate2+0x1c>
 800614c:	4b24      	ldr	r3, [pc, #144]	@ (80061e0 <xTraceEventCreate2+0xa8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	b90b      	cbnz	r3, 8006158 <xTraceEventCreate2+0x20>
 8006154:	2001      	movs	r0, #1
 8006156:	e036      	b.n	80061c6 <xTraceEventCreate2+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006158:	4606      	mov	r6, r0
 800615a:	460f      	mov	r7, r1
 800615c:	4615      	mov	r5, r2
 800615e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006162:	2301      	movs	r3, #1
 8006164:	f383 8810 	msr	PRIMASK, r3
 8006168:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 80061ec <xTraceEventCreate2+0xb4>
 800616c:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 80061f0 <xTraceEventCreate2+0xb8>
 8006170:	f8d9 2000 	ldr.w	r2, [r9]
 8006174:	f8d8 3000 	ldr.w	r3, [r8]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	6813      	ldr	r3, [r2, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	2110      	movs	r1, #16
 8006182:	466a      	mov	r2, sp
 8006184:	f000 fc72 	bl	8006a6c <xTraceEventBufferAlloc>
 8006188:	2801      	cmp	r0, #1
 800618a:	d023      	beq.n	80061d4 <xTraceEventCreate2+0x9c>
 800618c:	f8d9 3000 	ldr.w	r3, [r9]
 8006190:	9900      	ldr	r1, [sp, #0]
 8006192:	f446 5000 	orr.w	r0, r6, #8192	@ 0x2000
 8006196:	681e      	ldr	r6, [r3, #0]
 8006198:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <xTraceEventCreate2+0xac>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b12      	ldr	r3, [pc, #72]	@ (80061e8 <xTraceEventCreate2+0xb0>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	8008      	strh	r0, [r1, #0]
 80061a2:	6950      	ldr	r0, [r2, #20]
 80061a4:	804e      	strh	r6, [r1, #2]
 80061a6:	4283      	cmp	r3, r0
 80061a8:	604b      	str	r3, [r1, #4]
 80061aa:	d30f      	bcc.n	80061cc <xTraceEventCreate2+0x94>
 80061ac:	6153      	str	r3, [r2, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 80061ae:	f8d8 3000 	ldr.w	r3, [r8]
	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 80061b2:	608f      	str	r7, [r1, #8]
	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 80061b4:	6818      	ldr	r0, [r3, #0]
	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 80061b6:	60cd      	str	r5, [r1, #12]
	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 80061b8:	ab01      	add	r3, sp, #4
 80061ba:	2210      	movs	r2, #16
 80061bc:	f000 fd1a 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 80061c0:	f384 8810 	msr	PRIMASK, r4

	return TRC_SUCCESS;
 80061c4:	2000      	movs	r0, #0
}
 80061c6:	b003      	add	sp, #12
 80061c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 80061cc:	68d0      	ldr	r0, [r2, #12]
 80061ce:	3001      	adds	r0, #1
 80061d0:	60d0      	str	r0, [r2, #12]
 80061d2:	e7eb      	b.n	80061ac <xTraceEventCreate2+0x74>
 80061d4:	f384 8810 	msr	PRIMASK, r4
 80061d8:	e7bc      	b.n	8006154 <xTraceEventCreate2+0x1c>
 80061da:	bf00      	nop
 80061dc:	20002644 	.word	0x20002644
 80061e0:	20002648 	.word	0x20002648
 80061e4:	20005c48 	.word	0x20005c48
 80061e8:	e0001000 	.word	0xe0001000
 80061ec:	20002184 	.word	0x20002184
 80061f0:	20002168 	.word	0x20002168

080061f4 <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 80061f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TraceEvent3_t* pxEventData = (void*)0;
 80061f8:	2400      	movs	r4, #0
{
 80061fa:	b082      	sub	sp, #8
	int32_t iBytesCommitted = 0;
 80061fc:	e9cd 4400 	strd	r4, r4, [sp]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 8006200:	4c28      	ldr	r4, [pc, #160]	@ (80062a4 <xTraceEventCreate3+0xb0>)
 8006202:	6824      	ldr	r4, [r4, #0]
 8006204:	07e4      	lsls	r4, r4, #31
 8006206:	d504      	bpl.n	8006212 <xTraceEventCreate3+0x1e>
 8006208:	461d      	mov	r5, r3
 800620a:	4b27      	ldr	r3, [pc, #156]	@ (80062a8 <xTraceEventCreate3+0xb4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	b90b      	cbnz	r3, 8006216 <xTraceEventCreate3+0x22>
 8006212:	2001      	movs	r0, #1
 8006214:	e03a      	b.n	800628c <xTraceEventCreate3+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006216:	4680      	mov	r8, r0
 8006218:	460f      	mov	r7, r1
 800621a:	4616      	mov	r6, r2
 800621c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006220:	2301      	movs	r3, #1
 8006222:	f383 8810 	msr	PRIMASK, r3
 8006226:	f8df a08c 	ldr.w	sl, [pc, #140]	@ 80062b4 <xTraceEventCreate3+0xc0>
 800622a:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80062b8 <xTraceEventCreate3+0xc4>
 800622e:	f8da 2000 	ldr.w	r2, [sl]
 8006232:	f8d9 3000 	ldr.w	r3, [r9]
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	6813      	ldr	r3, [r2, #0]
 800623a:	3301      	adds	r3, #1
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	2114      	movs	r1, #20
 8006240:	466a      	mov	r2, sp
 8006242:	f000 fc13 	bl	8006a6c <xTraceEventBufferAlloc>
 8006246:	2801      	cmp	r0, #1
 8006248:	d029      	beq.n	800629e <xTraceEventCreate3+0xaa>
 800624a:	f8da 3000 	ldr.w	r3, [sl]
 800624e:	9900      	ldr	r1, [sp, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b16      	ldr	r3, [pc, #88]	@ (80062ac <xTraceEventCreate3+0xb8>)
 8006254:	f8d3 c000 	ldr.w	ip, [r3]
 8006258:	4b15      	ldr	r3, [pc, #84]	@ (80062b0 <xTraceEventCreate3+0xbc>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	804a      	strh	r2, [r1, #2]
 800625e:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8006262:	604b      	str	r3, [r1, #4]
 8006264:	f448 5040 	orr.w	r0, r8, #12288	@ 0x3000
 8006268:	4293      	cmp	r3, r2
 800626a:	8008      	strh	r0, [r1, #0]
 800626c:	d311      	bcc.n	8006292 <xTraceEventCreate3+0x9e>
 800626e:	f8cc 3014 	str.w	r3, [ip, #20]

	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);

	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 8006272:	f8d9 3000 	ldr.w	r3, [r9]
	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 8006276:	608f      	str	r7, [r1, #8]
	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 8006278:	6818      	ldr	r0, [r3, #0]
	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 800627a:	60ce      	str	r6, [r1, #12]
 800627c:	610d      	str	r5, [r1, #16]
	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 800627e:	ab01      	add	r3, sp, #4
 8006280:	2214      	movs	r2, #20
 8006282:	f000 fcb7 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 8006286:	f384 8810 	msr	PRIMASK, r4

	return TRC_SUCCESS;
 800628a:	2000      	movs	r0, #0
}
 800628c:	b002      	add	sp, #8
 800628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 8006292:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8006296:	3201      	adds	r2, #1
 8006298:	f8cc 200c 	str.w	r2, [ip, #12]
 800629c:	e7e7      	b.n	800626e <xTraceEventCreate3+0x7a>
 800629e:	f384 8810 	msr	PRIMASK, r4
 80062a2:	e7b6      	b.n	8006212 <xTraceEventCreate3+0x1e>
 80062a4:	20002644 	.word	0x20002644
 80062a8:	20002648 	.word	0x20002648
 80062ac:	20005c48 	.word	0x20005c48
 80062b0:	e0001000 	.word	0xe0001000
 80062b4:	20002184 	.word	0x20002184
 80062b8:	20002168 	.word	0x20002168

080062bc <xTraceEventCreate4>:

traceResult xTraceEventCreate4(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3, TraceUnsignedBaseType_t uxParam4)
{
 80062bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TraceEvent4_t* pxEventData = (void*)0;
 80062c0:	2400      	movs	r4, #0
{
 80062c2:	b082      	sub	sp, #8
	int32_t iBytesCommitted = 0;
 80062c4:	e9cd 4400 	strd	r4, r4, [sp]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 80062c8:	4c27      	ldr	r4, [pc, #156]	@ (8006368 <xTraceEventCreate4+0xac>)
 80062ca:	6824      	ldr	r4, [r4, #0]
 80062cc:	07e4      	lsls	r4, r4, #31
 80062ce:	d504      	bpl.n	80062da <xTraceEventCreate4+0x1e>
 80062d0:	461d      	mov	r5, r3
 80062d2:	4b26      	ldr	r3, [pc, #152]	@ (800636c <xTraceEventCreate4+0xb0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	b90b      	cbnz	r3, 80062de <xTraceEventCreate4+0x22>
 80062da:	2001      	movs	r0, #1
 80062dc:	e03a      	b.n	8006354 <xTraceEventCreate4+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062de:	4607      	mov	r7, r0
 80062e0:	4688      	mov	r8, r1
 80062e2:	4616      	mov	r6, r2
 80062e4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e8:	2301      	movs	r3, #1
 80062ea:	f383 8810 	msr	PRIMASK, r3
 80062ee:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8006378 <xTraceEventCreate4+0xbc>
 80062f2:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800637c <xTraceEventCreate4+0xc0>
 80062f6:	f8da 2000 	ldr.w	r2, [sl]
 80062fa:	f8d9 3000 	ldr.w	r3, [r9]
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	6813      	ldr	r3, [r2, #0]
 8006302:	3301      	adds	r3, #1
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	2118      	movs	r1, #24
 8006308:	466a      	mov	r2, sp
 800630a:	f000 fbaf 	bl	8006a6c <xTraceEventBufferAlloc>
 800630e:	2801      	cmp	r0, #1
 8006310:	d027      	beq.n	8006362 <xTraceEventCreate4+0xa6>
 8006312:	f8da 3000 	ldr.w	r3, [sl]
 8006316:	9900      	ldr	r1, [sp, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4b15      	ldr	r3, [pc, #84]	@ (8006370 <xTraceEventCreate4+0xb4>)
 800631c:	f447 4080 	orr.w	r0, r7, #16384	@ 0x4000
 8006320:	681f      	ldr	r7, [r3, #0]
 8006322:	4b14      	ldr	r3, [pc, #80]	@ (8006374 <xTraceEventCreate4+0xb8>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	804a      	strh	r2, [r1, #2]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	8008      	strh	r0, [r1, #0]
 800632c:	4293      	cmp	r3, r2
 800632e:	604b      	str	r3, [r1, #4]
 8006330:	d313      	bcc.n	800635a <xTraceEventCreate4+0x9e>
 8006332:	617b      	str	r3, [r7, #20]

	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);

	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 8006334:	f8d9 3000 	ldr.w	r3, [r9]
	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 8006338:	f8c1 8008 	str.w	r8, [r1, #8]
	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 800633c:	6818      	ldr	r0, [r3, #0]
	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 800633e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006340:	614b      	str	r3, [r1, #20]
 8006342:	60ce      	str	r6, [r1, #12]
 8006344:	610d      	str	r5, [r1, #16]
	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 8006346:	ab01      	add	r3, sp, #4
 8006348:	2218      	movs	r2, #24
 800634a:	f000 fc53 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 800634e:	f384 8810 	msr	PRIMASK, r4

	return TRC_SUCCESS;
 8006352:	2000      	movs	r0, #0
}
 8006354:	b002      	add	sp, #8
 8006356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	3201      	adds	r2, #1
 800635e:	60fa      	str	r2, [r7, #12]
 8006360:	e7e7      	b.n	8006332 <xTraceEventCreate4+0x76>
 8006362:	f384 8810 	msr	PRIMASK, r4
 8006366:	e7b8      	b.n	80062da <xTraceEventCreate4+0x1e>
 8006368:	20002644 	.word	0x20002644
 800636c:	20002648 	.word	0x20002648
 8006370:	20005c48 	.word	0x20005c48
 8006374:	e0001000 	.word	0xe0001000
 8006378:	20002184 	.word	0x20002184
 800637c:	20002168 	.word	0x20002168

08006380 <xTraceEventCreateDataOffline0>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreateDataOffline0(uint32_t uiEventCode, const TraceUnsignedBaseType_t* const puxData, TraceUnsignedBaseType_t uxSize)
{
 8006380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int32_t iBytesCommitted = 0;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8006384:	1cd4      	adds	r4, r2, #3
 8006386:	f024 0403 	bic.w	r4, r4, #3
	if (sizeof(TraceEvent0_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800638a:	f104 0608 	add.w	r6, r4, #8
 800638e:	2e40      	cmp	r6, #64	@ 0x40
{
 8006390:	b082      	sub	sp, #8
	TraceEvent0_t* pxEventData = (void*)0;
 8006392:	f04f 0300 	mov.w	r3, #0
	int32_t iBytesCommitted = 0;
 8006396:	e9cd 3300 	strd	r3, r3, [sp]
{
 800639a:	4605      	mov	r5, r0
 800639c:	460f      	mov	r7, r1
	if (sizeof(TraceEvent0_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800639e:	bf84      	itt	hi
 80063a0:	2640      	movhi	r6, #64	@ 0x40
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent0_t);
 80063a2:	2438      	movhi	r4, #56	@ 0x38
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a4:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a8:	2301      	movs	r3, #1
 80063aa:	f383 8810 	msr	PRIMASK, r3
	}

	TRACE_EVENT_BEGIN_OFFLINE(sizeof(TraceEvent0_t) + uxSize);
 80063ae:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8006440 <xTraceEventCreateDataOffline0+0xc0>
 80063b2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006444 <xTraceEventCreateDataOffline0+0xc4>
 80063b6:	f8da 2000 	ldr.w	r2, [sl]
 80063ba:	f8d9 3000 	ldr.w	r3, [r9]
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	6813      	ldr	r3, [r2, #0]
 80063c2:	3301      	adds	r3, #1
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	4631      	mov	r1, r6
 80063c8:	466a      	mov	r2, sp
 80063ca:	f000 fb4f 	bl	8006a6c <xTraceEventBufferAlloc>
 80063ce:	2801      	cmp	r0, #1
 80063d0:	d02a      	beq.n	8006428 <xTraceEventCreateDataOffline0+0xa8>
 80063d2:	f8da 3000 	ldr.w	r3, [sl]
 80063d6:	4817      	ldr	r0, [pc, #92]	@ (8006434 <xTraceEventCreateDataOffline0+0xb4>)
 80063d8:	6819      	ldr	r1, [r3, #0]
 80063da:	4b17      	ldr	r3, [pc, #92]	@ (8006438 <xTraceEventCreateDataOffline0+0xb8>)
 80063dc:	4a17      	ldr	r2, [pc, #92]	@ (800643c <xTraceEventCreateDataOffline0+0xbc>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6852      	ldr	r2, [r2, #4]
 80063e2:	ea00 2084 	and.w	r0, r0, r4, lsl #10
 80063e6:	4328      	orrs	r0, r5
 80063e8:	9d00      	ldr	r5, [sp, #0]
 80063ea:	8069      	strh	r1, [r5, #2]
 80063ec:	6959      	ldr	r1, [r3, #20]
 80063ee:	8028      	strh	r0, [r5, #0]
 80063f0:	428a      	cmp	r2, r1
 80063f2:	606a      	str	r2, [r5, #4]
 80063f4:	d314      	bcc.n	8006420 <xTraceEventCreateDataOffline0+0xa0>
 80063f6:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_0_DATA(puxData, uxSize);
 80063f8:	4639      	mov	r1, r7
 80063fa:	4622      	mov	r2, r4
 80063fc:	f105 0008 	add.w	r0, r5, #8
 8006400:	f002 f8c9 	bl	8008596 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent0_t) + uxSize);
 8006404:	f8d9 2000 	ldr.w	r2, [r9]
 8006408:	ab01      	add	r3, sp, #4
 800640a:	6810      	ldr	r0, [r2, #0]
 800640c:	4629      	mov	r1, r5
 800640e:	4632      	mov	r2, r6
 8006410:	f000 fbf0 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 8006414:	f388 8810 	msr	PRIMASK, r8

	return TRC_SUCCESS;
 8006418:	2000      	movs	r0, #0
}
 800641a:	b002      	add	sp, #8
 800641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	TRACE_EVENT_BEGIN_OFFLINE(sizeof(TraceEvent0_t) + uxSize);
 8006420:	68d9      	ldr	r1, [r3, #12]
 8006422:	3101      	adds	r1, #1
 8006424:	60d9      	str	r1, [r3, #12]
 8006426:	e7e6      	b.n	80063f6 <xTraceEventCreateDataOffline0+0x76>
 8006428:	f388 8810 	msr	PRIMASK, r8
}
 800642c:	b002      	add	sp, #8
 800642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006432:	bf00      	nop
 8006434:	0ffff000 	.word	0x0ffff000
 8006438:	20005c48 	.word	0x20005c48
 800643c:	e0001000 	.word	0xe0001000
 8006440:	20002184 	.word	0x20002184
 8006444:	20002168 	.word	0x20002168

08006448 <xTraceEventCreateData1>:
	uint32_t uiEventCode,
	TraceUnsignedBaseType_t uxParam1,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t iBytesCommitted = 0;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800644c:	1cdc      	adds	r4, r3, #3
{
 800644e:	b083      	sub	sp, #12
	TraceEvent1_t* pxEventData = (void*)0;
 8006450:	2300      	movs	r3, #0
	int32_t iBytesCommitted = 0;
 8006452:	e9cd 3300 	strd	r3, r3, [sp]
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 8006456:	4b2f      	ldr	r3, [pc, #188]	@ (8006514 <xTraceEventCreateData1+0xcc>)
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8006458:	f024 0403 	bic.w	r4, r4, #3
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800645c:	f104 0c0c 	add.w	ip, r4, #12
	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 8006460:	681b      	ldr	r3, [r3, #0]
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
 8006462:	f1bc 0f41 	cmp.w	ip, #65	@ 0x41
 8006466:	bf28      	it	cs
 8006468:	2434      	movcs	r4, #52	@ 0x34
	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 800646a:	07db      	lsls	r3, r3, #31
 800646c:	d503      	bpl.n	8006476 <xTraceEventCreateData1+0x2e>
 800646e:	4b2a      	ldr	r3, [pc, #168]	@ (8006518 <xTraceEventCreateData1+0xd0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	b90b      	cbnz	r3, 800647a <xTraceEventCreateData1+0x32>
 8006476:	2001      	movs	r0, #1
 8006478:	e042      	b.n	8006500 <xTraceEventCreateData1+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647a:	4607      	mov	r7, r0
 800647c:	460e      	mov	r6, r1
 800647e:	4615      	mov	r5, r2
 8006480:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006484:	2301      	movs	r3, #1
 8006486:	f383 8810 	msr	PRIMASK, r3
 800648a:	f8df b09c 	ldr.w	fp, [pc, #156]	@ 8006528 <xTraceEventCreateData1+0xe0>
 800648e:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800652c <xTraceEventCreateData1+0xe4>
 8006492:	f8db 2000 	ldr.w	r2, [fp]
 8006496:	f8da 3000 	ldr.w	r3, [sl]
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	6813      	ldr	r3, [r2, #0]
 800649e:	f104 080c 	add.w	r8, r4, #12
 80064a2:	3301      	adds	r3, #1
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4641      	mov	r1, r8
 80064a8:	466a      	mov	r2, sp
 80064aa:	f000 fadf 	bl	8006a6c <xTraceEventBufferAlloc>
 80064ae:	2801      	cmp	r0, #1
 80064b0:	d02d      	beq.n	800650e <xTraceEventCreateData1+0xc6>
 80064b2:	f8db 3000 	ldr.w	r3, [fp]
 80064b6:	4a19      	ldr	r2, [pc, #100]	@ (800651c <xTraceEventCreateData1+0xd4>)
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	4b19      	ldr	r3, [pc, #100]	@ (8006520 <xTraceEventCreateData1+0xd8>)
 80064bc:	6852      	ldr	r2, [r2, #4]
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	4b18      	ldr	r3, [pc, #96]	@ (8006524 <xTraceEventCreateData1+0xdc>)
 80064c2:	f104 0c04 	add.w	ip, r4, #4
 80064c6:	ea03 238c 	and.w	r3, r3, ip, lsl #10
 80064ca:	433b      	orrs	r3, r7
 80064cc:	9f00      	ldr	r7, [sp, #0]
 80064ce:	803b      	strh	r3, [r7, #0]
 80064d0:	694b      	ldr	r3, [r1, #20]
 80064d2:	8078      	strh	r0, [r7, #2]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	d315      	bcc.n	8006506 <xTraceEventCreateData1+0xbe>
 80064da:	614a      	str	r2, [r1, #20]

	TRACE_EVENT_ADD_1_DATA(uxParam1, puxData, uxSize);
 80064dc:	f107 000c 	add.w	r0, r7, #12
 80064e0:	4622      	mov	r2, r4
 80064e2:	4629      	mov	r1, r5
 80064e4:	60be      	str	r6, [r7, #8]
 80064e6:	f002 f856 	bl	8008596 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent1_t) + uxSize);
 80064ea:	f8da 2000 	ldr.w	r2, [sl]
 80064ee:	ab01      	add	r3, sp, #4
 80064f0:	6810      	ldr	r0, [r2, #0]
 80064f2:	4639      	mov	r1, r7
 80064f4:	4642      	mov	r2, r8
 80064f6:	f000 fb7d 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 80064fa:	f389 8810 	msr	PRIMASK, r9

	return TRC_SUCCESS;
 80064fe:	2000      	movs	r0, #0
}
 8006500:	b003      	add	sp, #12
 8006502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 8006506:	68cb      	ldr	r3, [r1, #12]
 8006508:	3301      	adds	r3, #1
 800650a:	60cb      	str	r3, [r1, #12]
 800650c:	e7e5      	b.n	80064da <xTraceEventCreateData1+0x92>
 800650e:	f389 8810 	msr	PRIMASK, r9
 8006512:	e7b0      	b.n	8006476 <xTraceEventCreateData1+0x2e>
 8006514:	20002644 	.word	0x20002644
 8006518:	20002648 	.word	0x20002648
 800651c:	e0001000 	.word	0xe0001000
 8006520:	20005c48 	.word	0x20005c48
 8006524:	0ffff000 	.word	0x0ffff000
 8006528:	20002184 	.word	0x20002184
 800652c:	20002168 	.word	0x20002168

08006530 <xTraceEventCreateData2>:
	TraceUnsignedBaseType_t uxParam1,
	TraceUnsignedBaseType_t uxParam2,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	b083      	sub	sp, #12
 8006536:	461d      	mov	r5, r3
 8006538:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
	if (sizeof(TraceEvent2_t) + uxSize > TRC_MAX_BLOB_SIZE)
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent2_t);
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t) + uxSize);
 800653a:	4b33      	ldr	r3, [pc, #204]	@ (8006608 <xTraceEventCreateData2+0xd8>)
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800653c:	3403      	adds	r4, #3
 800653e:	f024 0403 	bic.w	r4, r4, #3
{
 8006542:	4616      	mov	r6, r2
	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t) + uxSize);
 8006544:	681a      	ldr	r2, [r3, #0]
	if (sizeof(TraceEvent2_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8006546:	f104 0310 	add.w	r3, r4, #16
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent2_t);
 800654a:	2b41      	cmp	r3, #65	@ 0x41
	TraceEvent2_t* pxEventData = (void*)0;
 800654c:	f04f 0300 	mov.w	r3, #0
	int32_t iBytesCommitted = 0;
 8006550:	e9cd 3300 	strd	r3, r3, [sp]
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent2_t);
 8006554:	bf28      	it	cs
 8006556:	2430      	movcs	r4, #48	@ 0x30
	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t) + uxSize);
 8006558:	07d3      	lsls	r3, r2, #31
 800655a:	d503      	bpl.n	8006564 <xTraceEventCreateData2+0x34>
 800655c:	4b2b      	ldr	r3, [pc, #172]	@ (800660c <xTraceEventCreateData2+0xdc>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	b90b      	cbnz	r3, 8006568 <xTraceEventCreateData2+0x38>
 8006564:	2001      	movs	r0, #1
 8006566:	e045      	b.n	80065f4 <xTraceEventCreateData2+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006568:	4680      	mov	r8, r0
 800656a:	460f      	mov	r7, r1
 800656c:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006570:	2301      	movs	r3, #1
 8006572:	f383 8810 	msr	PRIMASK, r3
 8006576:	4b26      	ldr	r3, [pc, #152]	@ (8006610 <xTraceEventCreateData2+0xe0>)
 8006578:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8006620 <xTraceEventCreateData2+0xf0>
 800657c:	6819      	ldr	r1, [r3, #0]
 800657e:	f8db 2000 	ldr.w	r2, [fp]
 8006582:	6810      	ldr	r0, [r2, #0]
 8006584:	680a      	ldr	r2, [r1, #0]
 8006586:	f104 0910 	add.w	r9, r4, #16
 800658a:	3201      	adds	r2, #1
 800658c:	600a      	str	r2, [r1, #0]
 800658e:	466a      	mov	r2, sp
 8006590:	4649      	mov	r1, r9
 8006592:	f000 fa6b 	bl	8006a6c <xTraceEventBufferAlloc>
 8006596:	2801      	cmp	r0, #1
 8006598:	4b1d      	ldr	r3, [pc, #116]	@ (8006610 <xTraceEventCreateData2+0xe0>)
 800659a:	d032      	beq.n	8006602 <xTraceEventCreateData2+0xd2>
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1d      	ldr	r2, [pc, #116]	@ (8006614 <xTraceEventCreateData2+0xe4>)
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006618 <xTraceEventCreateData2+0xe8>)
 80065a4:	6852      	ldr	r2, [r2, #4]
 80065a6:	6819      	ldr	r1, [r3, #0]
 80065a8:	4b1c      	ldr	r3, [pc, #112]	@ (800661c <xTraceEventCreateData2+0xec>)
 80065aa:	f104 0c08 	add.w	ip, r4, #8
 80065ae:	ea03 238c 	and.w	r3, r3, ip, lsl #10
 80065b2:	ea43 0308 	orr.w	r3, r3, r8
 80065b6:	f8dd 8000 	ldr.w	r8, [sp]
 80065ba:	f8a8 3000 	strh.w	r3, [r8]
 80065be:	694b      	ldr	r3, [r1, #20]
 80065c0:	f8a8 0002 	strh.w	r0, [r8, #2]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	f8c8 2004 	str.w	r2, [r8, #4]
 80065ca:	d316      	bcc.n	80065fa <xTraceEventCreateData2+0xca>
 80065cc:	614a      	str	r2, [r1, #20]

	TRACE_EVENT_ADD_2_DATA(uxParam1, uxParam2, puxData, uxSize);
 80065ce:	f108 0010 	add.w	r0, r8, #16
 80065d2:	4622      	mov	r2, r4
 80065d4:	4629      	mov	r1, r5
 80065d6:	e9c8 7602 	strd	r7, r6, [r8, #8]
 80065da:	f001 ffdc 	bl	8008596 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent2_t) + uxSize);
 80065de:	f8db 2000 	ldr.w	r2, [fp]
 80065e2:	ab01      	add	r3, sp, #4
 80065e4:	6810      	ldr	r0, [r2, #0]
 80065e6:	4641      	mov	r1, r8
 80065e8:	464a      	mov	r2, r9
 80065ea:	f000 fb03 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 80065ee:	f38a 8810 	msr	PRIMASK, sl

	return TRC_SUCCESS;
 80065f2:	2000      	movs	r0, #0
}
 80065f4:	b003      	add	sp, #12
 80065f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t) + uxSize);
 80065fa:	68cb      	ldr	r3, [r1, #12]
 80065fc:	3301      	adds	r3, #1
 80065fe:	60cb      	str	r3, [r1, #12]
 8006600:	e7e4      	b.n	80065cc <xTraceEventCreateData2+0x9c>
 8006602:	f38a 8810 	msr	PRIMASK, sl
 8006606:	e7ad      	b.n	8006564 <xTraceEventCreateData2+0x34>
 8006608:	20002644 	.word	0x20002644
 800660c:	20002648 	.word	0x20002648
 8006610:	20002184 	.word	0x20002184
 8006614:	e0001000 	.word	0xe0001000
 8006618:	20005c48 	.word	0x20005c48
 800661c:	0ffff000 	.word	0x0ffff000
 8006620:	20002168 	.word	0x20002168

08006624 <xTraceEventCreateData3>:
	TraceUnsignedBaseType_t uxParam2,
	TraceUnsignedBaseType_t uxParam3,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	b083      	sub	sp, #12
 800662a:	461d      	mov	r5, r3
 800662c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
	if (sizeof(TraceEvent3_t) + uxSize > TRC_MAX_BLOB_SIZE)
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent3_t);
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t) + uxSize);
 800662e:	4b34      	ldr	r3, [pc, #208]	@ (8006700 <xTraceEventCreateData3+0xdc>)
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8006630:	3403      	adds	r4, #3
 8006632:	f024 0403 	bic.w	r4, r4, #3
{
 8006636:	4616      	mov	r6, r2
	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t) + uxSize);
 8006638:	681a      	ldr	r2, [r3, #0]
	if (sizeof(TraceEvent3_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800663a:	f104 0314 	add.w	r3, r4, #20
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent3_t);
 800663e:	2b41      	cmp	r3, #65	@ 0x41
	TraceEvent3_t* pxEventData = (void*)0;
 8006640:	f04f 0300 	mov.w	r3, #0
	int32_t iBytesCommitted = 0;
 8006644:	e9cd 3300 	strd	r3, r3, [sp]
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent3_t);
 8006648:	bf28      	it	cs
 800664a:	242c      	movcs	r4, #44	@ 0x2c
	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t) + uxSize);
 800664c:	07d3      	lsls	r3, r2, #31
 800664e:	d503      	bpl.n	8006658 <xTraceEventCreateData3+0x34>
 8006650:	4b2c      	ldr	r3, [pc, #176]	@ (8006704 <xTraceEventCreateData3+0xe0>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	b90b      	cbnz	r3, 800665c <xTraceEventCreateData3+0x38>
 8006658:	2001      	movs	r0, #1
 800665a:	e047      	b.n	80066ec <xTraceEventCreateData3+0xc8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665c:	4680      	mov	r8, r0
 800665e:	460f      	mov	r7, r1
 8006660:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006664:	2301      	movs	r3, #1
 8006666:	f383 8810 	msr	PRIMASK, r3
 800666a:	4b27      	ldr	r3, [pc, #156]	@ (8006708 <xTraceEventCreateData3+0xe4>)
 800666c:	f8df b0a8 	ldr.w	fp, [pc, #168]	@ 8006718 <xTraceEventCreateData3+0xf4>
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	f8db 2000 	ldr.w	r2, [fp]
 8006676:	6810      	ldr	r0, [r2, #0]
 8006678:	680a      	ldr	r2, [r1, #0]
 800667a:	f104 0914 	add.w	r9, r4, #20
 800667e:	3201      	adds	r2, #1
 8006680:	600a      	str	r2, [r1, #0]
 8006682:	466a      	mov	r2, sp
 8006684:	4649      	mov	r1, r9
 8006686:	f000 f9f1 	bl	8006a6c <xTraceEventBufferAlloc>
 800668a:	2801      	cmp	r0, #1
 800668c:	4b1e      	ldr	r3, [pc, #120]	@ (8006708 <xTraceEventCreateData3+0xe4>)
 800668e:	d034      	beq.n	80066fa <xTraceEventCreateData3+0xd6>
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1e      	ldr	r2, [pc, #120]	@ (800670c <xTraceEventCreateData3+0xe8>)
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	4b1e      	ldr	r3, [pc, #120]	@ (8006710 <xTraceEventCreateData3+0xec>)
 8006698:	6852      	ldr	r2, [r2, #4]
 800669a:	6819      	ldr	r1, [r3, #0]
 800669c:	4b1d      	ldr	r3, [pc, #116]	@ (8006714 <xTraceEventCreateData3+0xf0>)
 800669e:	f104 0c0c 	add.w	ip, r4, #12
 80066a2:	ea03 238c 	and.w	r3, r3, ip, lsl #10
 80066a6:	ea43 0308 	orr.w	r3, r3, r8
 80066aa:	f8dd 8000 	ldr.w	r8, [sp]
 80066ae:	f8a8 3000 	strh.w	r3, [r8]
 80066b2:	694b      	ldr	r3, [r1, #20]
 80066b4:	f8a8 0002 	strh.w	r0, [r8, #2]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	f8c8 2004 	str.w	r2, [r8, #4]
 80066be:	d318      	bcc.n	80066f2 <xTraceEventCreateData3+0xce>
 80066c0:	614a      	str	r2, [r1, #20]

	TRACE_EVENT_ADD_3_DATA(uxParam1, uxParam2, uxParam3, puxData, uxSize);
 80066c2:	f108 0014 	add.w	r0, r8, #20
 80066c6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80066c8:	f8c8 5010 	str.w	r5, [r8, #16]
 80066cc:	4622      	mov	r2, r4
 80066ce:	e9c8 7602 	strd	r7, r6, [r8, #8]
 80066d2:	f001 ff60 	bl	8008596 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent3_t) + uxSize);
 80066d6:	f8db 2000 	ldr.w	r2, [fp]
 80066da:	ab01      	add	r3, sp, #4
 80066dc:	6810      	ldr	r0, [r2, #0]
 80066de:	4641      	mov	r1, r8
 80066e0:	464a      	mov	r2, r9
 80066e2:	f000 fa87 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 80066e6:	f38a 8810 	msr	PRIMASK, sl

	return TRC_SUCCESS;
 80066ea:	2000      	movs	r0, #0
}
 80066ec:	b003      	add	sp, #12
 80066ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t) + uxSize);
 80066f2:	68cb      	ldr	r3, [r1, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	60cb      	str	r3, [r1, #12]
 80066f8:	e7e2      	b.n	80066c0 <xTraceEventCreateData3+0x9c>
 80066fa:	f38a 8810 	msr	PRIMASK, sl
 80066fe:	e7ab      	b.n	8006658 <xTraceEventCreateData3+0x34>
 8006700:	20002644 	.word	0x20002644
 8006704:	20002648 	.word	0x20002648
 8006708:	20002184 	.word	0x20002184
 800670c:	e0001000 	.word	0xe0001000
 8006710:	20005c48 	.word	0x20005c48
 8006714:	0ffff000 	.word	0x0ffff000
 8006718:	20002168 	.word	0x20002168

0800671c <xTraceEventCreateData4>:
	TraceUnsignedBaseType_t uxParam3,
	TraceUnsignedBaseType_t uxParam4,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	b083      	sub	sp, #12
 8006722:	461d      	mov	r5, r3
 8006724:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
	if (sizeof(TraceEvent4_t) + uxSize > TRC_MAX_BLOB_SIZE)
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent4_t);
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t) + uxSize);
 8006726:	4b36      	ldr	r3, [pc, #216]	@ (8006800 <xTraceEventCreateData4+0xe4>)
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8006728:	3403      	adds	r4, #3
 800672a:	f024 0403 	bic.w	r4, r4, #3
{
 800672e:	4616      	mov	r6, r2
	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t) + uxSize);
 8006730:	681a      	ldr	r2, [r3, #0]
	if (sizeof(TraceEvent4_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8006732:	f104 0318 	add.w	r3, r4, #24
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent4_t);
 8006736:	2b41      	cmp	r3, #65	@ 0x41
	TraceEvent4_t* pxEventData = (void*)0;
 8006738:	f04f 0300 	mov.w	r3, #0
	int32_t iBytesCommitted = 0;
 800673c:	e9cd 3300 	strd	r3, r3, [sp]
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent4_t);
 8006740:	bf28      	it	cs
 8006742:	2428      	movcs	r4, #40	@ 0x28
	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t) + uxSize);
 8006744:	07d3      	lsls	r3, r2, #31
 8006746:	d503      	bpl.n	8006750 <xTraceEventCreateData4+0x34>
 8006748:	4b2e      	ldr	r3, [pc, #184]	@ (8006804 <xTraceEventCreateData4+0xe8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	b90b      	cbnz	r3, 8006754 <xTraceEventCreateData4+0x38>
 8006750:	2001      	movs	r0, #1
 8006752:	e04a      	b.n	80067ea <xTraceEventCreateData4+0xce>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006754:	4680      	mov	r8, r0
 8006756:	460f      	mov	r7, r1
 8006758:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675c:	2301      	movs	r3, #1
 800675e:	f383 8810 	msr	PRIMASK, r3
 8006762:	4b29      	ldr	r3, [pc, #164]	@ (8006808 <xTraceEventCreateData4+0xec>)
 8006764:	f8df b0b0 	ldr.w	fp, [pc, #176]	@ 8006818 <xTraceEventCreateData4+0xfc>
 8006768:	6819      	ldr	r1, [r3, #0]
 800676a:	f8db 2000 	ldr.w	r2, [fp]
 800676e:	6810      	ldr	r0, [r2, #0]
 8006770:	680a      	ldr	r2, [r1, #0]
 8006772:	f104 0918 	add.w	r9, r4, #24
 8006776:	3201      	adds	r2, #1
 8006778:	600a      	str	r2, [r1, #0]
 800677a:	466a      	mov	r2, sp
 800677c:	4649      	mov	r1, r9
 800677e:	f000 f975 	bl	8006a6c <xTraceEventBufferAlloc>
 8006782:	2801      	cmp	r0, #1
 8006784:	4b20      	ldr	r3, [pc, #128]	@ (8006808 <xTraceEventCreateData4+0xec>)
 8006786:	d037      	beq.n	80067f8 <xTraceEventCreateData4+0xdc>
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a20      	ldr	r2, [pc, #128]	@ (800680c <xTraceEventCreateData4+0xf0>)
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	4b20      	ldr	r3, [pc, #128]	@ (8006810 <xTraceEventCreateData4+0xf4>)
 8006790:	6852      	ldr	r2, [r2, #4]
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	4b1f      	ldr	r3, [pc, #124]	@ (8006814 <xTraceEventCreateData4+0xf8>)
 8006796:	f104 0c10 	add.w	ip, r4, #16
 800679a:	ea03 238c 	and.w	r3, r3, ip, lsl #10
 800679e:	ea43 0308 	orr.w	r3, r3, r8
 80067a2:	f8dd 8000 	ldr.w	r8, [sp]
 80067a6:	f8a8 3000 	strh.w	r3, [r8]
 80067aa:	694b      	ldr	r3, [r1, #20]
 80067ac:	f8a8 0002 	strh.w	r0, [r8, #2]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	f8c8 2004 	str.w	r2, [r8, #4]
 80067b6:	d31b      	bcc.n	80067f0 <xTraceEventCreateData4+0xd4>

	TRACE_EVENT_ADD_4_DATA(uxParam1, uxParam2, uxParam3, uxParam4, puxData, uxSize);
 80067b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t) + uxSize);
 80067ba:	614a      	str	r2, [r1, #20]
	TRACE_EVENT_ADD_4_DATA(uxParam1, uxParam2, uxParam3, uxParam4, puxData, uxSize);
 80067bc:	f108 0018 	add.w	r0, r8, #24
 80067c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80067c2:	f8c8 3014 	str.w	r3, [r8, #20]
 80067c6:	4622      	mov	r2, r4
 80067c8:	e9c8 7602 	strd	r7, r6, [r8, #8]
 80067cc:	f8c8 5010 	str.w	r5, [r8, #16]
 80067d0:	f001 fee1 	bl	8008596 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent4_t) + uxSize);
 80067d4:	f8db 2000 	ldr.w	r2, [fp]
 80067d8:	ab01      	add	r3, sp, #4
 80067da:	6810      	ldr	r0, [r2, #0]
 80067dc:	4641      	mov	r1, r8
 80067de:	464a      	mov	r2, r9
 80067e0:	f000 fa08 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 80067e4:	f38a 8810 	msr	PRIMASK, sl

	return TRC_SUCCESS;
 80067e8:	2000      	movs	r0, #0
}
 80067ea:	b003      	add	sp, #12
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t) + uxSize);
 80067f0:	68cb      	ldr	r3, [r1, #12]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60cb      	str	r3, [r1, #12]
 80067f6:	e7df      	b.n	80067b8 <xTraceEventCreateData4+0x9c>
 80067f8:	f38a 8810 	msr	PRIMASK, sl
 80067fc:	e7a8      	b.n	8006750 <xTraceEventCreateData4+0x34>
 80067fe:	bf00      	nop
 8006800:	20002644 	.word	0x20002644
 8006804:	20002648 	.word	0x20002648
 8006808:	20002184 	.word	0x20002184
 800680c:	e0001000 	.word	0xe0001000
 8006810:	20005c48 	.word	0x20005c48
 8006814:	0ffff000 	.word	0x0ffff000
 8006818:	20002168 	.word	0x20002168

0800681c <xTraceEventCreateData5>:
	TraceUnsignedBaseType_t uxParam4,
	TraceUnsignedBaseType_t uxParam5,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	b083      	sub	sp, #12
 8006822:	461d      	mov	r5, r3
 8006824:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
	if (sizeof(TraceEvent5_t) + uxSize > TRC_MAX_BLOB_SIZE)
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent5_t);
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent5_t) + uxSize);
 8006826:	4b37      	ldr	r3, [pc, #220]	@ (8006904 <xTraceEventCreateData5+0xe8>)
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 8006828:	3403      	adds	r4, #3
 800682a:	f024 0403 	bic.w	r4, r4, #3
{
 800682e:	4616      	mov	r6, r2
	TRACE_EVENT_BEGIN(sizeof(TraceEvent5_t) + uxSize);
 8006830:	681a      	ldr	r2, [r3, #0]
	if (sizeof(TraceEvent5_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8006832:	f104 031c 	add.w	r3, r4, #28
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent5_t);
 8006836:	2b41      	cmp	r3, #65	@ 0x41
	TraceEvent5_t* pxEventData = (void*)0;
 8006838:	f04f 0300 	mov.w	r3, #0
	int32_t iBytesCommitted = 0;
 800683c:	e9cd 3300 	strd	r3, r3, [sp]
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent5_t);
 8006840:	bf28      	it	cs
 8006842:	2424      	movcs	r4, #36	@ 0x24
	TRACE_EVENT_BEGIN(sizeof(TraceEvent5_t) + uxSize);
 8006844:	07d3      	lsls	r3, r2, #31
 8006846:	d503      	bpl.n	8006850 <xTraceEventCreateData5+0x34>
 8006848:	4b2f      	ldr	r3, [pc, #188]	@ (8006908 <xTraceEventCreateData5+0xec>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	b90b      	cbnz	r3, 8006854 <xTraceEventCreateData5+0x38>
 8006850:	2001      	movs	r0, #1
 8006852:	e04d      	b.n	80068f0 <xTraceEventCreateData5+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006854:	4680      	mov	r8, r0
 8006856:	460f      	mov	r7, r1
 8006858:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685c:	2301      	movs	r3, #1
 800685e:	f383 8810 	msr	PRIMASK, r3
 8006862:	4b2a      	ldr	r3, [pc, #168]	@ (800690c <xTraceEventCreateData5+0xf0>)
 8006864:	f8df b0b4 	ldr.w	fp, [pc, #180]	@ 800691c <xTraceEventCreateData5+0x100>
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	f8db 2000 	ldr.w	r2, [fp]
 800686e:	6810      	ldr	r0, [r2, #0]
 8006870:	680a      	ldr	r2, [r1, #0]
 8006872:	f104 091c 	add.w	r9, r4, #28
 8006876:	3201      	adds	r2, #1
 8006878:	600a      	str	r2, [r1, #0]
 800687a:	466a      	mov	r2, sp
 800687c:	4649      	mov	r1, r9
 800687e:	f000 f8f5 	bl	8006a6c <xTraceEventBufferAlloc>
 8006882:	2801      	cmp	r0, #1
 8006884:	4b21      	ldr	r3, [pc, #132]	@ (800690c <xTraceEventCreateData5+0xf0>)
 8006886:	d03a      	beq.n	80068fe <xTraceEventCreateData5+0xe2>
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a21      	ldr	r2, [pc, #132]	@ (8006910 <xTraceEventCreateData5+0xf4>)
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	4b21      	ldr	r3, [pc, #132]	@ (8006914 <xTraceEventCreateData5+0xf8>)
 8006890:	6852      	ldr	r2, [r2, #4]
 8006892:	6819      	ldr	r1, [r3, #0]
 8006894:	4b20      	ldr	r3, [pc, #128]	@ (8006918 <xTraceEventCreateData5+0xfc>)
 8006896:	f104 0c14 	add.w	ip, r4, #20
 800689a:	ea03 238c 	and.w	r3, r3, ip, lsl #10
 800689e:	ea43 0308 	orr.w	r3, r3, r8
 80068a2:	f8dd 8000 	ldr.w	r8, [sp]
 80068a6:	f8a8 3000 	strh.w	r3, [r8]
 80068aa:	694b      	ldr	r3, [r1, #20]
 80068ac:	f8a8 0002 	strh.w	r0, [r8, #2]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	f8c8 2004 	str.w	r2, [r8, #4]
 80068b6:	d31e      	bcc.n	80068f6 <xTraceEventCreateData5+0xda>

	TRACE_EVENT_ADD_5_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, puxData, uxSize);
 80068b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	TRACE_EVENT_BEGIN(sizeof(TraceEvent5_t) + uxSize);
 80068ba:	614a      	str	r2, [r1, #20]
	TRACE_EVENT_ADD_5_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, puxData, uxSize);
 80068bc:	f8c8 3014 	str.w	r3, [r8, #20]
 80068c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068c2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80068c4:	f8c8 3018 	str.w	r3, [r8, #24]
 80068c8:	4622      	mov	r2, r4
 80068ca:	e9c8 7602 	strd	r7, r6, [r8, #8]
 80068ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80068d2:	f108 001c 	add.w	r0, r8, #28
 80068d6:	f001 fe5e 	bl	8008596 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent5_t) + uxSize);
 80068da:	f8db 2000 	ldr.w	r2, [fp]
 80068de:	ab01      	add	r3, sp, #4
 80068e0:	6810      	ldr	r0, [r2, #0]
 80068e2:	4641      	mov	r1, r8
 80068e4:	464a      	mov	r2, r9
 80068e6:	f000 f985 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 80068ea:	f38a 8810 	msr	PRIMASK, sl

	return TRC_SUCCESS;
 80068ee:	2000      	movs	r0, #0
}
 80068f0:	b003      	add	sp, #12
 80068f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent5_t) + uxSize);
 80068f6:	68cb      	ldr	r3, [r1, #12]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60cb      	str	r3, [r1, #12]
 80068fc:	e7dc      	b.n	80068b8 <xTraceEventCreateData5+0x9c>
 80068fe:	f38a 8810 	msr	PRIMASK, sl
 8006902:	e7a5      	b.n	8006850 <xTraceEventCreateData5+0x34>
 8006904:	20002644 	.word	0x20002644
 8006908:	20002648 	.word	0x20002648
 800690c:	20002184 	.word	0x20002184
 8006910:	e0001000 	.word	0xe0001000
 8006914:	20005c48 	.word	0x20005c48
 8006918:	0ffff000 	.word	0x0ffff000
 800691c:	20002168 	.word	0x20002168

08006920 <xTraceEventCreateData6>:
	TraceUnsignedBaseType_t uxParam5,
	TraceUnsignedBaseType_t uxParam6,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	b083      	sub	sp, #12
 8006926:	461d      	mov	r5, r3
 8006928:	9c10      	ldr	r4, [sp, #64]	@ 0x40
	if (sizeof(TraceEvent6_t) + uxSize > TRC_MAX_BLOB_SIZE)
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent6_t);
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent6_t) + uxSize);
 800692a:	4b39      	ldr	r3, [pc, #228]	@ (8006a10 <xTraceEventCreateData6+0xf0>)
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800692c:	3403      	adds	r4, #3
 800692e:	f024 0403 	bic.w	r4, r4, #3
{
 8006932:	4616      	mov	r6, r2
	TRACE_EVENT_BEGIN(sizeof(TraceEvent6_t) + uxSize);
 8006934:	681a      	ldr	r2, [r3, #0]
	if (sizeof(TraceEvent6_t) + uxSize > TRC_MAX_BLOB_SIZE)
 8006936:	f104 0320 	add.w	r3, r4, #32
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent6_t);
 800693a:	2b41      	cmp	r3, #65	@ 0x41
	TraceEvent6_t* pxEventData = (void*)0;
 800693c:	f04f 0300 	mov.w	r3, #0
	int32_t iBytesCommitted = 0;
 8006940:	e9cd 3300 	strd	r3, r3, [sp]
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent6_t);
 8006944:	bf28      	it	cs
 8006946:	2420      	movcs	r4, #32
	TRACE_EVENT_BEGIN(sizeof(TraceEvent6_t) + uxSize);
 8006948:	07d3      	lsls	r3, r2, #31
 800694a:	d503      	bpl.n	8006954 <xTraceEventCreateData6+0x34>
 800694c:	4b31      	ldr	r3, [pc, #196]	@ (8006a14 <xTraceEventCreateData6+0xf4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	b90b      	cbnz	r3, 8006958 <xTraceEventCreateData6+0x38>
 8006954:	2001      	movs	r0, #1
 8006956:	e050      	b.n	80069fa <xTraceEventCreateData6+0xda>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006958:	4680      	mov	r8, r0
 800695a:	460f      	mov	r7, r1
 800695c:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006960:	2301      	movs	r3, #1
 8006962:	f383 8810 	msr	PRIMASK, r3
 8006966:	4b2c      	ldr	r3, [pc, #176]	@ (8006a18 <xTraceEventCreateData6+0xf8>)
 8006968:	f8df b0bc 	ldr.w	fp, [pc, #188]	@ 8006a28 <xTraceEventCreateData6+0x108>
 800696c:	6819      	ldr	r1, [r3, #0]
 800696e:	f8db 2000 	ldr.w	r2, [fp]
 8006972:	6810      	ldr	r0, [r2, #0]
 8006974:	680a      	ldr	r2, [r1, #0]
 8006976:	f104 0920 	add.w	r9, r4, #32
 800697a:	3201      	adds	r2, #1
 800697c:	600a      	str	r2, [r1, #0]
 800697e:	466a      	mov	r2, sp
 8006980:	4649      	mov	r1, r9
 8006982:	f000 f873 	bl	8006a6c <xTraceEventBufferAlloc>
 8006986:	2801      	cmp	r0, #1
 8006988:	4b23      	ldr	r3, [pc, #140]	@ (8006a18 <xTraceEventCreateData6+0xf8>)
 800698a:	d03d      	beq.n	8006a08 <xTraceEventCreateData6+0xe8>
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a23      	ldr	r2, [pc, #140]	@ (8006a1c <xTraceEventCreateData6+0xfc>)
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	4b23      	ldr	r3, [pc, #140]	@ (8006a20 <xTraceEventCreateData6+0x100>)
 8006994:	6852      	ldr	r2, [r2, #4]
 8006996:	6819      	ldr	r1, [r3, #0]
 8006998:	4b22      	ldr	r3, [pc, #136]	@ (8006a24 <xTraceEventCreateData6+0x104>)
 800699a:	f104 0c18 	add.w	ip, r4, #24
 800699e:	ea03 238c 	and.w	r3, r3, ip, lsl #10
 80069a2:	ea43 0308 	orr.w	r3, r3, r8
 80069a6:	f8dd 8000 	ldr.w	r8, [sp]
 80069aa:	f8a8 3000 	strh.w	r3, [r8]
 80069ae:	694b      	ldr	r3, [r1, #20]
 80069b0:	f8a8 0002 	strh.w	r0, [r8, #2]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	f8c8 2004 	str.w	r2, [r8, #4]
 80069ba:	d321      	bcc.n	8006a00 <xTraceEventCreateData6+0xe0>

	TRACE_EVENT_ADD_6_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, uxParam6, puxData, uxSize);
 80069bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
	TRACE_EVENT_BEGIN(sizeof(TraceEvent6_t) + uxSize);
 80069be:	614a      	str	r2, [r1, #20]
	TRACE_EVENT_ADD_6_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, uxParam6, puxData, uxSize);
 80069c0:	f8c8 3014 	str.w	r3, [r8, #20]
 80069c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069c6:	f8c8 3018 	str.w	r3, [r8, #24]
 80069ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80069ce:	f8c8 301c 	str.w	r3, [r8, #28]
 80069d2:	4622      	mov	r2, r4
 80069d4:	e9c8 7602 	strd	r7, r6, [r8, #8]
 80069d8:	f8c8 5010 	str.w	r5, [r8, #16]
 80069dc:	f108 0020 	add.w	r0, r8, #32
 80069e0:	f001 fdd9 	bl	8008596 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent6_t) + uxSize);
 80069e4:	f8db 2000 	ldr.w	r2, [fp]
 80069e8:	ab01      	add	r3, sp, #4
 80069ea:	6810      	ldr	r0, [r2, #0]
 80069ec:	4641      	mov	r1, r8
 80069ee:	464a      	mov	r2, r9
 80069f0:	f000 f900 	bl	8006bf4 <xTraceEventBufferAllocCommit>
 80069f4:	f38a 8810 	msr	PRIMASK, sl

	return TRC_SUCCESS;
 80069f8:	2000      	movs	r0, #0
}
 80069fa:	b003      	add	sp, #12
 80069fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TRACE_EVENT_BEGIN(sizeof(TraceEvent6_t) + uxSize);
 8006a00:	68cb      	ldr	r3, [r1, #12]
 8006a02:	3301      	adds	r3, #1
 8006a04:	60cb      	str	r3, [r1, #12]
 8006a06:	e7d9      	b.n	80069bc <xTraceEventCreateData6+0x9c>
 8006a08:	f38a 8810 	msr	PRIMASK, sl
 8006a0c:	e7a2      	b.n	8006954 <xTraceEventCreateData6+0x34>
 8006a0e:	bf00      	nop
 8006a10:	20002644 	.word	0x20002644
 8006a14:	20002648 	.word	0x20002648
 8006a18:	20002184 	.word	0x20002184
 8006a1c:	e0001000 	.word	0xe0001000
 8006a20:	20005c48 	.word	0x20005c48
 8006a24:	0ffff000 	.word	0x0ffff000
 8006a28:	20002168 	.word	0x20002168

08006a2c <xTraceEventGetSize>:
	TRC_ASSERT(puiSize != (void*)0);

	/* This should never fail */
	TRC_ASSERT((sizeof(TraceEvent0_t) + ((uint32_t)(uint16_t)(TRC_EVENT_GET_PARAM_COUNT(((const TraceEvent0_t*)pvAddress)->EventID)) * sizeof(uint32_t))) <= (uint32_t)(TRC_MAX_BLOB_SIZE)); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
	
	return TRC_EVENT_GET_SIZE(pvAddress, puiSize);
 8006a2c:	8803      	ldrh	r3, [r0, #0]
 8006a2e:	0b1b      	lsrs	r3, r3, #12
 8006a30:	3302      	adds	r3, #2
 8006a32:	009b      	lsls	r3, r3, #2
}
 8006a34:	2000      	movs	r0, #0
	return TRC_EVENT_GET_SIZE(pvAddress, puiSize);
 8006a36:	600b      	str	r3, [r1, #0]
}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop

08006a3c <xTraceEventBufferInitialize>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

traceResult xTraceEventBufferInitialize(TraceEventBuffer_t* pxTraceEventBuffer, uint32_t uiOptions,
	uint8_t* puiBuffer, uint32_t uiSize)
{
 8006a3c:	4684      	mov	ip, r0

	/* This should never fail */
	TRC_ASSERT(uiSize != 0u);

	pxTraceEventBuffer->uiOptions = uiOptions;
	pxTraceEventBuffer->uiHead = 0u;
 8006a3e:	2000      	movs	r0, #0
	pxTraceEventBuffer->uiOptions = uiOptions;
 8006a40:	f8cc 100c 	str.w	r1, [ip, #12]
	pxTraceEventBuffer->puiBuffer = puiBuffer;
	pxTraceEventBuffer->uiSlack = 0u;
	pxTraceEventBuffer->uiNextHead = 0u;
	pxTraceEventBuffer->uiTimerWraparounds = 0u;

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT_BUFFER);
 8006a44:	4908      	ldr	r1, [pc, #32]	@ (8006a68 <xTraceEventBufferInitialize+0x2c>)
	pxTraceEventBuffer->uiHead = 0u;
 8006a46:	f8cc 0000 	str.w	r0, [ip]
	pxTraceEventBuffer->uiSize = uiSize;
 8006a4a:	e9cc 0301 	strd	r0, r3, [ip, #4]
	pxTraceEventBuffer->uiFree = uiSize;
 8006a4e:	f8cc 3014 	str.w	r3, [ip, #20]
	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT_BUFFER);
 8006a52:	680b      	ldr	r3, [r1, #0]
	pxTraceEventBuffer->puiBuffer = puiBuffer;
 8006a54:	f8cc 2028 	str.w	r2, [ip, #40]	@ 0x28
	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT_BUFFER);
 8006a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
	pxTraceEventBuffer->uiTimerWraparounds = 0u;
 8006a5c:	e9cc 0007 	strd	r0, r0, [ip, #28]
	pxTraceEventBuffer->uiSlack = 0u;
 8006a60:	f8cc 0018 	str.w	r0, [ip, #24]
	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT_BUFFER);
 8006a64:	600b      	str	r3, [r1, #0]

	return TRC_SUCCESS;
}
 8006a66:	4770      	bx	lr
 8006a68:	20002644 	.word	0x20002644

08006a6c <xTraceEventBufferAlloc>:

	return TRC_SUCCESS;
}

traceResult xTraceEventBufferAlloc(TraceEventBuffer_t *pxTraceEventBuffer, uint32_t uiSize, void **ppvData)
{
 8006a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a70:	4617      	mov	r7, r2

	/* Handle overwrite buffer allocation, since this kind of allocation modifies
	 * both head and tail it should only be used for internal buffers without any
	 * flushing calls (Streaming Ringbuffer)
	 */
	if (pxTraceEventBuffer->uiOptions == TRC_EVENT_BUFFER_OPTION_OVERWRITE)
 8006a72:	68c2      	ldr	r2, [r0, #12]
	uiBufferSize = pxTraceEventBuffer->uiSize;
 8006a74:	6886      	ldr	r6, [r0, #8]
	if (pxTraceEventBuffer->uiOptions == TRC_EVENT_BUFFER_OPTION_OVERWRITE)
 8006a76:	2a01      	cmp	r2, #1
{
 8006a78:	460d      	mov	r5, r1
 8006a7a:	b083      	sub	sp, #12
	{
		if (pxTraceEventBuffer->uiHead >= pxTraceEventBuffer->uiTail)
 8006a7c:	e9d0 1300 	ldrd	r1, r3, [r0]
{
 8006a80:	4604      	mov	r4, r0
	if (pxTraceEventBuffer->uiOptions == TRC_EVENT_BUFFER_OPTION_OVERWRITE)
 8006a82:	d01f      	beq.n	8006ac4 <xTraceEventBufferAlloc+0x58>
		 * we have to save it here to avoid problems with it changing during this call.
		 */
		uiHead = pxTraceEventBuffer->uiHead;
		uiTail = pxTraceEventBuffer->uiTail;

		if (uiHead >= uiTail)
 8006a84:	4299      	cmp	r1, r3
 8006a86:	f1a3 0204 	sub.w	r2, r3, #4
 8006a8a:	d20b      	bcs.n	8006aa4 <xTraceEventBufferAlloc+0x38>
				pxTraceEventBuffer->uiNextHead = (uiHead + pxTraceEventBuffer->uiSlack + uiSize) % uiBufferSize;
			}
		}
		else
		{
			uiFreeSpace = uiTail - uiHead - sizeof(uint32_t);
 8006a8c:	1a52      	subs	r2, r2, r1

			if (uiFreeSpace < uiSize)
 8006a8e:	42aa      	cmp	r2, r5
 8006a90:	d325      	bcc.n	8006ade <xTraceEventBufferAlloc+0x72>

				return TRC_FAIL;
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006a92:	6aa0      	ldr	r0, [r4, #40]	@ 0x28

			pxTraceEventBuffer->uiNextHead = (uiHead + uiSize);
 8006a94:	440d      	add	r5, r1
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006a96:	4408      	add	r0, r1
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006a98:	6038      	str	r0, [r7, #0]
		}
	}

	return TRC_SUCCESS;
 8006a9a:	2000      	movs	r0, #0
				pxTraceEventBuffer->uiNextHead = (uiHead + uiSize) % uiBufferSize;
 8006a9c:	61e5      	str	r5, [r4, #28]
}
 8006a9e:	b003      	add	sp, #12
 8006aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uiFreeSpace = (uiBufferSize - uiHead - sizeof(uint32_t)) + uiTail;
 8006aa4:	1a70      	subs	r0, r6, r1
 8006aa6:	4402      	add	r2, r0
			if (uiFreeSpace < uiSize)
 8006aa8:	4295      	cmp	r5, r2
 8006aaa:	d818      	bhi.n	8006ade <xTraceEventBufferAlloc+0x72>
			if ((uiBufferSize - uiHead) > uiSize)
 8006aac:	42a8      	cmp	r0, r5
 8006aae:	d846      	bhi.n	8006b3e <xTraceEventBufferAlloc+0xd2>
				if (uiFreeSpace < uiSize)
 8006ab0:	429d      	cmp	r5, r3
 8006ab2:	d814      	bhi.n	8006ade <xTraceEventBufferAlloc+0x72>
				pxTraceEventBuffer->uiNextHead = (uiHead + pxTraceEventBuffer->uiSlack + uiSize) % uiBufferSize;
 8006ab4:	4435      	add	r5, r6
				pxTraceEventBuffer->uiSlack = uiBufferSize - uiHead;
 8006ab6:	61a0      	str	r0, [r4, #24]
				pxTraceEventBuffer->uiNextHead = (uiHead + pxTraceEventBuffer->uiSlack + uiSize) % uiBufferSize;
 8006ab8:	fbb5 f3f6 	udiv	r3, r5, r6
				*ppvData = pxTraceEventBuffer->puiBuffer;
 8006abc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
				pxTraceEventBuffer->uiNextHead = (uiHead + pxTraceEventBuffer->uiSlack + uiSize) % uiBufferSize;
 8006abe:	fb06 5513 	mls	r5, r6, r3, r5
 8006ac2:	e7e9      	b.n	8006a98 <xTraceEventBufferAlloc+0x2c>
		if (pxTraceEventBuffer->uiHead >= pxTraceEventBuffer->uiTail)
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	d310      	bcc.n	8006aea <xTraceEventBufferAlloc+0x7e>
			if ((uiBufferSize - pxTraceEventBuffer->uiHead) > uiSize)
 8006ac8:	1a72      	subs	r2, r6, r1
 8006aca:	42aa      	cmp	r2, r5
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006acc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
			if ((uiBufferSize - pxTraceEventBuffer->uiHead) > uiSize)
 8006ace:	d93e      	bls.n	8006b4e <xTraceEventBufferAlloc+0xe2>
				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 8006ad0:	440d      	add	r5, r1
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006ad2:	4408      	add	r0, r1
				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 8006ad4:	fbb5 f3f6 	udiv	r3, r5, r6
 8006ad8:	fb06 5513 	mls	r5, r6, r3, r5
 8006adc:	e7dc      	b.n	8006a98 <xTraceEventBufferAlloc+0x2c>
				*ppvData = 0;
 8006ade:	2300      	movs	r3, #0
				return TRC_FAIL;
 8006ae0:	2001      	movs	r0, #1
				*ppvData = 0;
 8006ae2:	603b      	str	r3, [r7, #0]
}
 8006ae4:	b003      	add	sp, #12
 8006ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 8006aea:	1f1a      	subs	r2, r3, #4
 8006aec:	1a52      	subs	r2, r2, r1
			if (uiFreeSpace < uiSize)
 8006aee:	4295      	cmp	r5, r2
 8006af0:	d9cf      	bls.n	8006a92 <xTraceEventBufferAlloc+0x26>
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8006af2:	6980      	ldr	r0, [r0, #24]
				if ((pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead) < uiSize)
 8006af4:	eba6 0c01 	sub.w	ip, r6, r1
 8006af8:	45ac      	cmp	ip, r5
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8006afa:	4602      	mov	r2, r0
				if ((pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead) < uiSize)
 8006afc:	d357      	bcc.n	8006bae <xTraceEventBufferAlloc+0x142>
	uint32_t uiFreeSize = 0u;
 8006afe:	f04f 0800 	mov.w	r8, #0
 8006b02:	e007      	b.n	8006b14 <xTraceEventBufferAlloc+0xa8>
 8006b04:	f06f 0203 	mvn.w	r2, #3
 8006b08:	2300      	movs	r3, #0
					uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 8006b0a:	1a52      	subs	r2, r2, r1
				} while (uiFreeSpace < uiSize);
 8006b0c:	4295      	cmp	r5, r2
		pxTraceEventBuffer->uiTail = 0u;
 8006b0e:	6063      	str	r3, [r4, #4]
				} while (uiFreeSpace < uiSize);
 8006b10:	d93c      	bls.n	8006b8c <xTraceEventBufferAlloc+0x120>
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8006b12:	69a2      	ldr	r2, [r4, #24]
	uint32_t uiFreeSize = 0u;
 8006b14:	f8cd 8004 	str.w	r8, [sp, #4]
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8006b18:	1ab2      	subs	r2, r6, r2
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d9f2      	bls.n	8006b04 <xTraceEventBufferAlloc+0x98>
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventGetSize(((void*)&(pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiTail])), &uiFreeSize) == TRC_SUCCESS); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006b1e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006b20:	a901      	add	r1, sp, #4
 8006b22:	4418      	add	r0, r3
 8006b24:	f7ff ff82 	bl	8006a2c <xTraceEventGetSize>
		pxTraceEventBuffer->uiTail = (pxTraceEventBuffer->uiTail + uiFreeSize) % pxTraceEventBuffer->uiSize;
 8006b28:	9a01      	ldr	r2, [sp, #4]
 8006b2a:	6863      	ldr	r3, [r4, #4]
 8006b2c:	68a6      	ldr	r6, [r4, #8]
 8006b2e:	6821      	ldr	r1, [r4, #0]
 8006b30:	4413      	add	r3, r2
 8006b32:	fbb3 f2f6 	udiv	r2, r3, r6
 8006b36:	fb06 3312 	mls	r3, r6, r2, r3
 8006b3a:	1f1a      	subs	r2, r3, #4
 8006b3c:	e7e5      	b.n	8006b0a <xTraceEventBufferAlloc+0x9e>
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006b3e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
				pxTraceEventBuffer->uiNextHead = (uiHead + uiSize) % uiBufferSize;
 8006b40:	440d      	add	r5, r1
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006b42:	4408      	add	r0, r1
				pxTraceEventBuffer->uiNextHead = (uiHead + uiSize) % uiBufferSize;
 8006b44:	fbb5 f3f6 	udiv	r3, r5, r6
 8006b48:	fb06 5513 	mls	r5, r6, r3, r5
 8006b4c:	e7a4      	b.n	8006a98 <xTraceEventBufferAlloc+0x2c>
 8006b4e:	46b0      	mov	r8, r6
	uint32_t uiFreeSize = 0u;
 8006b50:	f04f 0900 	mov.w	r9, #0
 8006b54:	e005      	b.n	8006b62 <xTraceEventBufferAlloc+0xf6>
 8006b56:	f06f 0203 	mvn.w	r2, #3
 8006b5a:	2300      	movs	r3, #0
				} while (uiFreeSpace < uiSize);
 8006b5c:	4295      	cmp	r5, r2
		pxTraceEventBuffer->uiTail = 0u;
 8006b5e:	6063      	str	r3, [r4, #4]
				} while (uiFreeSpace < uiSize);
 8006b60:	d91a      	bls.n	8006b98 <xTraceEventBufferAlloc+0x12c>
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8006b62:	69a2      	ldr	r2, [r4, #24]
	uint32_t uiFreeSize = 0u;
 8006b64:	f8cd 9004 	str.w	r9, [sp, #4]
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8006b68:	1ab2      	subs	r2, r6, r2
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d9f3      	bls.n	8006b56 <xTraceEventBufferAlloc+0xea>
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventGetSize(((void*)&(pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiTail])), &uiFreeSize) == TRC_SUCCESS); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006b6e:	4418      	add	r0, r3
 8006b70:	a901      	add	r1, sp, #4
 8006b72:	f7ff ff5b 	bl	8006a2c <xTraceEventGetSize>
		pxTraceEventBuffer->uiTail = (pxTraceEventBuffer->uiTail + uiFreeSize) % pxTraceEventBuffer->uiSize;
 8006b76:	9a01      	ldr	r2, [sp, #4]
 8006b78:	6863      	ldr	r3, [r4, #4]
 8006b7a:	68a6      	ldr	r6, [r4, #8]
 8006b7c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006b7e:	4413      	add	r3, r2
 8006b80:	fbb3 f2f6 	udiv	r2, r3, r6
 8006b84:	fb06 3312 	mls	r3, r6, r2, r3
					uiFreeSpace = pxTraceEventBuffer->uiTail - sizeof(uint32_t);
 8006b88:	1f1a      	subs	r2, r3, #4
 8006b8a:	e7e7      	b.n	8006b5c <xTraceEventBufferAlloc+0xf0>
				if (pxTraceEventBuffer->uiTail == 0u)
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d180      	bne.n	8006a92 <xTraceEventBufferAlloc+0x26>
					*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006b90:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006b92:	440b      	add	r3, r1
 8006b94:	603b      	str	r3, [r7, #0]
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006b96:	e77c      	b.n	8006a92 <xTraceEventBufferAlloc+0x26>
				pxTraceEventBuffer->uiSlack = uiBufferSize - pxTraceEventBuffer->uiHead;
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	eba8 0303 	sub.w	r3, r8, r3
 8006b9e:	61a3      	str	r3, [r4, #24]
				pxTraceEventBuffer->uiHead = 0u;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6023      	str	r3, [r4, #0]
				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 8006ba4:	fbb5 f3f8 	udiv	r3, r5, r8
 8006ba8:	fb08 5513 	mls	r5, r8, r3, r5
 8006bac:	e774      	b.n	8006a98 <xTraceEventBufferAlloc+0x2c>
	uint32_t uiFreeSize = 0u;
 8006bae:	f04f 0800 	mov.w	r8, #0
 8006bb2:	e002      	b.n	8006bba <xTraceEventBufferAlloc+0x14e>
		pxTraceEventBuffer->uiTail = 0u;
 8006bb4:	f8c4 8004 	str.w	r8, [r4, #4]
					} while (pxTraceEventBuffer->uiTail == 0u);
 8006bb8:	2300      	movs	r3, #0
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8006bba:	1a32      	subs	r2, r6, r0
 8006bbc:	429a      	cmp	r2, r3
	uint32_t uiFreeSize = 0u;
 8006bbe:	f8cd 8004 	str.w	r8, [sp, #4]
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 8006bc2:	d9f7      	bls.n	8006bb4 <xTraceEventBufferAlloc+0x148>
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventGetSize(((void*)&(pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiTail])), &uiFreeSize) == TRC_SUCCESS); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 8006bc4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006bc6:	a901      	add	r1, sp, #4
 8006bc8:	4418      	add	r0, r3
 8006bca:	f7ff ff2f 	bl	8006a2c <xTraceEventGetSize>
		pxTraceEventBuffer->uiTail = (pxTraceEventBuffer->uiTail + uiFreeSize) % pxTraceEventBuffer->uiSize;
 8006bce:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8006bd2:	9a01      	ldr	r2, [sp, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	fbb3 f2f6 	udiv	r2, r3, r6
 8006bda:	fb06 3312 	mls	r3, r6, r2, r3
		pxTraceEventBuffer->uiTail = 0u;
 8006bde:	6063      	str	r3, [r4, #4]
					} while (pxTraceEventBuffer->uiTail == 0u);
 8006be0:	b90b      	cbnz	r3, 8006be6 <xTraceEventBufferAlloc+0x17a>
 8006be2:	69a0      	ldr	r0, [r4, #24]
 8006be4:	e7e8      	b.n	8006bb8 <xTraceEventBufferAlloc+0x14c>
					pxTraceEventBuffer->uiSlack = pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead;
 8006be6:	6821      	ldr	r1, [r4, #0]
					pxTraceEventBuffer->uiHead = 0u;
 8006be8:	f8c4 8000 	str.w	r8, [r4]
					pxTraceEventBuffer->uiSlack = pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead;
 8006bec:	1a72      	subs	r2, r6, r1
 8006bee:	61a2      	str	r2, [r4, #24]
					pxTraceEventBuffer->uiHead = 0u;
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	e784      	b.n	8006afe <xTraceEventBufferAlloc+0x92>

08006bf4 <xTraceEventBufferAllocCommit>:
traceResult xTraceEventBufferAllocCommit(TraceEventBuffer_t *pxTraceEventBuffer, const void *pvData, uint32_t uiSize, int32_t *piBytesWritten)
{
	(void)pvData;

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceTimestampGetWraparounds(&pxTraceEventBuffer->uiTimerWraparounds) == TRC_SUCCESS);
 8006bf4:	4905      	ldr	r1, [pc, #20]	@ (8006c0c <xTraceEventBufferAllocCommit+0x18>)
 8006bf6:	6809      	ldr	r1, [r1, #0]
{
 8006bf8:	b410      	push	{r4}
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceTimestampGetWraparounds(&pxTraceEventBuffer->uiTimerWraparounds) == TRC_SUCCESS);
 8006bfa:	68cc      	ldr	r4, [r1, #12]

	/* Advance head location */
	pxTraceEventBuffer->uiHead = pxTraceEventBuffer->uiNextHead;
 8006bfc:	69c1      	ldr	r1, [r0, #28]
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceTimestampGetWraparounds(&pxTraceEventBuffer->uiTimerWraparounds) == TRC_SUCCESS);
 8006bfe:	6204      	str	r4, [r0, #32]
	pxTraceEventBuffer->uiHead = pxTraceEventBuffer->uiNextHead;
 8006c00:	6001      	str	r1, [r0, #0]

	/* Update bytes written */
	*piBytesWritten = (int32_t)uiSize;

	return TRC_SUCCESS;
}
 8006c02:	f85d 4b04 	ldr.w	r4, [sp], #4
	*piBytesWritten = (int32_t)uiSize;
 8006c06:	601a      	str	r2, [r3, #0]
}
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4770      	bx	lr
 8006c0c:	20005c48 	.word	0x20005c48

08006c10 <xTraceEventBufferClear>:

	return TRC_SUCCESS;
}

traceResult xTraceEventBufferClear(TraceEventBuffer_t* pxTraceEventBuffer)
{
 8006c10:	4603      	mov	r3, r0
	/* This should never fail */
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);

	pxTraceEventBuffer->uiHead = 0u;
 8006c12:	2000      	movs	r0, #0
	pxTraceEventBuffer->uiTail = 0u;
	pxTraceEventBuffer->uiFree = pxTraceEventBuffer->uiSize;
 8006c14:	689a      	ldr	r2, [r3, #8]
	pxTraceEventBuffer->uiSlack = 0u;
	pxTraceEventBuffer->uiNextHead = 0u;
 8006c16:	61d8      	str	r0, [r3, #28]
	pxTraceEventBuffer->uiHead = 0u;
 8006c18:	e9c3 0000 	strd	r0, r0, [r3]
	pxTraceEventBuffer->uiSlack = 0u;
 8006c1c:	e9c3 2005 	strd	r2, r0, [r3, #20]

	return TRC_SUCCESS;
}
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop

08006c24 <xTraceExtensionInitialize>:
	
	pxExtensionData = pxBuffer;
	
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 8006c24:	4a05      	ldr	r2, [pc, #20]	@ (8006c3c <xTraceExtensionInitialize+0x18>)
	pxExtensionData = pxBuffer;
 8006c26:	4906      	ldr	r1, [pc, #24]	@ (8006c40 <xTraceExtensionInitialize+0x1c>)
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
 8006c28:	23fd      	movs	r3, #253	@ 0xfd
 8006c2a:	6003      	str	r3, [r0, #0]
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 8006c2c:	6813      	ldr	r3, [r2, #0]
	pxExtensionData = pxBuffer;
 8006c2e:	6008      	str	r0, [r1, #0]
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 8006c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c34:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
}
 8006c36:	2000      	movs	r0, #0
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20002644 	.word	0x20002644
 8006c40:	20002188 	.word	0x20002188

08006c44 <xTraceHardwarePortInitCortexM>:
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK

void xTraceHardwarePortInitCortexM(void)
{
	/* Make sure the DWT registers are unlocked, in case the debugger doesn't do this. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8006c44:	4b0f      	ldr	r3, [pc, #60]	@ (8006c84 <xTraceHardwarePortInitCortexM+0x40>)
 8006c46:	4910      	ldr	r1, [pc, #64]	@ (8006c88 <xTraceHardwarePortInitCortexM+0x44>)
 8006c48:	f8c3 1fb0 	str.w	r1, [r3, #4016]	@ 0xfb0

	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8006c4c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006c50:	f8d2 1dfc 	ldr.w	r1, [r2, #3580]	@ 0xdfc
 8006c54:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8006c58:	f8c2 1dfc 	str.w	r1, [r2, #3580]	@ 0xdfc

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8006c5c:	f8d2 2dfc 	ldr.w	r2, [r2, #3580]	@ 0xdfc
 8006c60:	b162      	cbz	r2, 8006c7c <xTraceHardwarePortInitCortexM+0x38>
			xTraceError(TRC_ERROR_DWT_NOT_SUPPORTED);
			break;
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	f012 7200 	ands.w	r2, r2, #33554432	@ 0x2000000
 8006c68:	d105      	bne.n	8006c76 <xTraceHardwarePortInitCortexM+0x32>
			xTraceError(TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
			break;
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8006c6a:	605a      	str	r2, [r3, #4]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

	} while (0);	/* breaks above jump here */
}
 8006c74:	4770      	bx	lr
			xTraceError(TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 8006c76:	2005      	movs	r0, #5
 8006c78:	f7ff b9c6 	b.w	8006008 <xTraceError>
			xTraceError(TRC_ERROR_DWT_NOT_SUPPORTED);
 8006c7c:	2004      	movs	r0, #4
 8006c7e:	f7ff b9c3 	b.w	8006008 <xTraceError>
 8006c82:	bf00      	nop
 8006c84:	e0001000 	.word	0xe0001000
 8006c88:	c5acce55 	.word	0xc5acce55

08006c8c <xTraceHeapCreate>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING) && (TRC_USE_HEAPS == 1)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 8006c8c:	b530      	push	{r4, r5, lr}
 8006c8e:	b089      	sub	sp, #36	@ 0x24
 8006c90:	461c      	mov	r4, r3

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 8006c92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c94:	9302      	str	r3, [sp, #8]
 8006c96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
{
 8006c9a:	4615      	mov	r5, r2
	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	ab05      	add	r3, sp, #20
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 8006ca0:	e9cd 1505 	strd	r1, r5, [sp, #20]
	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	2303      	movs	r3, #3
 8006caa:	2100      	movs	r1, #0
 8006cac:	20f2      	movs	r0, #242	@ 0xf2
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 8006cae:	9407      	str	r4, [sp, #28]
	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 8006cb0:	f000 f8ae 	bl	8006e10 <xTraceObjectRegisterInternal>
}
 8006cb4:	b009      	add	sp, #36	@ 0x24
 8006cb6:	bd30      	pop	{r4, r5, pc}

08006cb8 <xTraceHeapAlloc>:

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 8006cb8:	b190      	cbz	r0, 8006ce0 <xTraceHeapAlloc+0x28>
{
 8006cba:	b510      	push	{r4, lr}
		/* This can happen */
		return TRC_FAIL;
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8006cbc:	b159      	cbz	r1, 8006cd6 <xTraceHeapAlloc+0x1e>
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);

		uxCurrent += uxSize;
 8006cbe:	6843      	ldr	r3, [r0, #4]

		if (uxCurrent > uxHighWaterMark)
 8006cc0:	6884      	ldr	r4, [r0, #8]
		uxCurrent += uxSize;
 8006cc2:	4413      	add	r3, r2
		if (uxCurrent > uxHighWaterMark)
 8006cc4:	429c      	cmp	r4, r3
		{
			uxHighWaterMark = uxCurrent;
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 8006cc6:	bf38      	it	cc
 8006cc8:	6083      	strcc	r3, [r0, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8006cca:	6043      	str	r3, [r0, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8006ccc:	2038      	movs	r0, #56	@ 0x38
 8006cce:	f7ff fa33 	bl	8006138 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8006cd2:	2000      	movs	r0, #0
}
 8006cd4:	bd10      	pop	{r4, pc}
	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8006cd6:	20e9      	movs	r0, #233	@ 0xe9
 8006cd8:	f7ff fa2e 	bl	8006138 <xTraceEventCreate2>
	return TRC_SUCCESS;
 8006cdc:	2000      	movs	r0, #0
}
 8006cde:	bd10      	pop	{r4, pc}
		return TRC_FAIL;
 8006ce0:	2001      	movs	r0, #1
}
 8006ce2:	4770      	bx	lr

08006ce4 <xTraceHeapFree>:

traceResult xTraceHeapFree(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
	TraceUnsignedBaseType_t uxCurrent;

	if (xHeapHandle == 0)
 8006ce4:	b178      	cbz	r0, 8006d06 <xTraceHeapFree+0x22>
{
 8006ce6:	b510      	push	{r4, lr}
		/* This can happen */
		return TRC_FAIL;
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 8006ce8:	b141      	cbz	r1, 8006cfc <xTraceHeapFree+0x18>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);

		uxCurrent -= uxSize;
 8006cea:	6844      	ldr	r4, [r0, #4]
 8006cec:	4603      	mov	r3, r0
 8006cee:	1aa4      	subs	r4, r4, r2

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 8006cf0:	605c      	str	r4, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_FREE : PSF_EVENT_FREE_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8006cf2:	2039      	movs	r0, #57	@ 0x39
 8006cf4:	f7ff fa20 	bl	8006138 <xTraceEventCreate2>

	return TRC_SUCCESS;
 8006cf8:	2000      	movs	r0, #0
}
 8006cfa:	bd10      	pop	{r4, pc}
	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_FREE : PSF_EVENT_FREE_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8006cfc:	20ea      	movs	r0, #234	@ 0xea
 8006cfe:	f7ff fa1b 	bl	8006138 <xTraceEventCreate2>
	return TRC_SUCCESS;
 8006d02:	2000      	movs	r0, #0
}
 8006d04:	bd10      	pop	{r4, pc}
		return TRC_FAIL;
 8006d06:	2001      	movs	r0, #1
}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop

08006d0c <xTraceISRInitialize>:
	uint32_t uiStackIndex;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceISRData = pxBuffer;
 8006d0c:	4b09      	ldr	r3, [pc, #36]	@ (8006d34 <xTraceISRInitialize+0x28>)
{
 8006d0e:	b510      	push	{r4, lr}
		TraceISRCoreData_t* pxCoreData = &pxTraceISRData->cores[uiCoreIndex];

		/* Initialize ISR stack */
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
		{
			pxCoreData->handleStack[uiStackIndex] = 0;
 8006d10:	2220      	movs	r2, #32
 8006d12:	2100      	movs	r1, #0
{
 8006d14:	4604      	mov	r4, r0
	pxTraceISRData = pxBuffer;
 8006d16:	6018      	str	r0, [r3, #0]
			pxCoreData->handleStack[uiStackIndex] = 0;
 8006d18:	f001 fb67 	bl	80083ea <memset>
		
		pxCoreData->stackIndex = -1;
		pxCoreData->isPendingContextSwitch = 0u;
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 8006d1c:	4a06      	ldr	r2, [pc, #24]	@ (8006d38 <xTraceISRInitialize+0x2c>)
 8006d1e:	6813      	ldr	r3, [r2, #0]
		pxCoreData->isPendingContextSwitch = 0u;
 8006d20:	2000      	movs	r0, #0
		pxCoreData->stackIndex = -1;
 8006d22:	f04f 31ff 	mov.w	r1, #4294967295
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 8006d26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
		pxCoreData->isPendingContextSwitch = 0u;
 8006d2a:	e9c4 1008 	strd	r1, r0, [r4, #32]
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 8006d2e:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
}
 8006d30:	bd10      	pop	{r4, pc}
 8006d32:	bf00      	nop
 8006d34:	2000218c 	.word	0x2000218c
 8006d38:	20002644 	.word	0x20002644

08006d3c <TzCtrl>:
	
	return TRC_SUCCESS;
}

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8006d3c:	b508      	push	{r3, lr}
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 8006d3e:	f000 fb2f 	bl	80073a0 <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 8006d42:	200a      	movs	r0, #10
 8006d44:	f7fe f9de 	bl	8005104 <vTaskDelay>
	while (1)
 8006d48:	e7f9      	b.n	8006d3e <TzCtrl+0x2>
 8006d4a:	bf00      	nop

08006d4c <xTraceKernelPortInitialize>:
	if (pxBuffer == 0)
 8006d4c:	b130      	cbz	r0, 8006d5c <xTraceKernelPortInitialize+0x10>
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 8006d4e:	4a04      	ldr	r2, [pc, #16]	@ (8006d60 <xTraceKernelPortInitialize+0x14>)
	pxKernelPortData->xSystemHeapHandle = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e9c0 3300 	strd	r3, r3, [r0]
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 8006d56:	6010      	str	r0, [r2, #0]
	return TRC_SUCCESS;
 8006d58:	4618      	mov	r0, r3
 8006d5a:	4770      	bx	lr
		return TRC_FAIL;
 8006d5c:	2001      	movs	r0, #1
}
 8006d5e:	4770      	bx	lr
 8006d60:	20002190 	.word	0x20002190

08006d64 <xTraceKernelPortEnable>:
{
 8006d64:	b570      	push	{r4, r5, r6, lr}
	if (pxKernelPortData->xSystemHeapHandle == 0)
 8006d66:	4e15      	ldr	r6, [pc, #84]	@ (8006dbc <xTraceKernelPortEnable+0x58>)
 8006d68:	6834      	ldr	r4, [r6, #0]
 8006d6a:	6822      	ldr	r2, [r4, #0]
{
 8006d6c:	b084      	sub	sp, #16
	if (pxKernelPortData->xSystemHeapHandle == 0)
 8006d6e:	b122      	cbz	r2, 8006d7a <xTraceKernelPortEnable+0x16>
	if (pxKernelPortData->xTzCtrlHandle == 0)
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	b16b      	cbz	r3, 8006d90 <xTraceKernelPortEnable+0x2c>
	return TRC_SUCCESS;
 8006d74:	2000      	movs	r0, #0
}
 8006d76:	b004      	add	sp, #16
 8006d78:	bd70      	pop	{r4, r5, r6, pc}
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 8006d7a:	9400      	str	r4, [sp, #0]
 8006d7c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006d80:	480f      	ldr	r0, [pc, #60]	@ (8006dc0 <xTraceKernelPortEnable+0x5c>)
 8006d82:	4611      	mov	r1, r2
 8006d84:	f7ff ff82 	bl	8006c8c <xTraceHeapCreate>
	if (pxKernelPortData->xTzCtrlHandle == 0)
 8006d88:	6834      	ldr	r4, [r6, #0]
 8006d8a:	6863      	ldr	r3, [r4, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f1      	bne.n	8006d74 <xTraceKernelPortEnable+0x10>
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 8006d90:	490c      	ldr	r1, [pc, #48]	@ (8006dc4 <xTraceKernelPortEnable+0x60>)
 8006d92:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc8 <xTraceKernelPortEnable+0x64>)
 8006d94:	480d      	ldr	r0, [pc, #52]	@ (8006dcc <xTraceKernelPortEnable+0x68>)
 8006d96:	2501      	movs	r5, #1
 8006d98:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006d9c:	9500      	str	r5, [sp, #0]
 8006d9e:	490c      	ldr	r1, [pc, #48]	@ (8006dd0 <xTraceKernelPortEnable+0x6c>)
 8006da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006da4:	f7fd ff74 	bl	8004c90 <xTaskCreateStatic>
		if (pxKernelPortData->xTzCtrlHandle == 0)
 8006da8:	6833      	ldr	r3, [r6, #0]
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 8006daa:	6060      	str	r0, [r4, #4]
		if (pxKernelPortData->xTzCtrlHandle == 0)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e0      	bne.n	8006d74 <xTraceKernelPortEnable+0x10>
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 8006db2:	2006      	movs	r0, #6
 8006db4:	f7ff f928 	bl	8006008 <xTraceError>
			return TRC_FAIL;
 8006db8:	4628      	mov	r0, r5
 8006dba:	e7dc      	b.n	8006d76 <xTraceKernelPortEnable+0x12>
 8006dbc:	20002190 	.word	0x20002190
 8006dc0:	0800bf50 	.word	0x0800bf50
 8006dc4:	20002194 	.word	0x20002194
 8006dc8:	2000223c 	.word	0x2000223c
 8006dcc:	08006d3d 	.word	0x08006d3d
 8006dd0:	0800bf5c 	.word	0x0800bf5c

08006dd4 <xTraceKernelPortGetSystemHeapHandle>:

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
	return pxKernelPortData->xSystemHeapHandle;
 8006dd4:	4b01      	ldr	r3, [pc, #4]	@ (8006ddc <xTraceKernelPortGetSystemHeapHandle+0x8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
}
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	4770      	bx	lr
 8006ddc:	20002190 	.word	0x20002190

08006de0 <xTraceMultiCoreEventBufferInitialize>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

traceResult xTraceMultiCoreEventBufferInitialize(TraceMultiCoreEventBuffer_t* const pxTraceMultiCoreEventBuffer, uint32_t uiOptions,
	uint8_t* puiBuffer, uint32_t uiSize)
{
 8006de0:	4684      	mov	ip, r0
 8006de2:	b508      	push	{r3, lr}
	TRC_ASSERT(pxTraceMultiCoreEventBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT(puiBuffer != (void*)0);

	uiBufferSizePerCore = ((uiSize / (uint32_t)(TRC_CFG_CORE_COUNT)) / sizeof(TraceUnsignedBaseType_t)) * sizeof(TraceUnsignedBaseType_t); /* BaseType aligned */
 8006de4:	f023 0303 	bic.w	r3, r3, #3

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
	{
		/* Set the event buffer pointers to point into the allocated space we have been given, this ensures
		 * a flat memory layout necessary for usage in streaming snaphot. */
		pxTraceMultiCoreEventBuffer->xEventBuffer[i] = (TraceEventBuffer_t*)(&puiBuffer[i * uiBufferSizePerCore]); /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/ /*cstat !MISRAC2004-17.4_b We need to access a spcific point in the buffer*/
 8006de8:	f8cc 2000 	str.w	r2, [ip]
{
 8006dec:	4610      	mov	r0, r2

		/* Initialize the event buffer structure with its memory buffer placed following its own structure data. */
		/* We need to check this */
		if (xTraceEventBufferInitialize(pxTraceMultiCoreEventBuffer->xEventBuffer[i], uiOptions,
 8006dee:	3b2c      	subs	r3, #44	@ 0x2c
 8006df0:	322c      	adds	r2, #44	@ 0x2c
 8006df2:	f7ff fe23 	bl	8006a3c <xTraceEventBufferInitialize>
			return TRC_FAIL;
		}
	}

	return TRC_SUCCESS;
}
 8006df6:	f1a0 0001 	sub.w	r0, r0, #1
 8006dfa:	fab0 f080 	clz	r0, r0
 8006dfe:	0940      	lsrs	r0, r0, #5
 8006e00:	bd08      	pop	{r3, pc}
 8006e02:	bf00      	nop

08006e04 <xTraceMultiCoreEventBufferClear>:

	return TRC_SUCCESS;
}

traceResult xTraceMultiCoreEventBufferClear(const TraceMultiCoreEventBuffer_t* const pxTraceMultiCoreEventBuffer)
{
 8006e04:	b508      	push	{r3, lr}
	TRC_ASSERT(pxTraceMultiCoreEventBuffer != (void*)0);

	for (uiCoreId = 0u; uiCoreId < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreId++)
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventBufferClear(pxTraceMultiCoreEventBuffer->xEventBuffer[uiCoreId]) == TRC_SUCCESS);
 8006e06:	6800      	ldr	r0, [r0, #0]
 8006e08:	f7ff ff02 	bl	8006c10 <xTraceEventBufferClear>
	}

	return TRC_SUCCESS;
}
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	bd08      	pop	{r3, pc}

08006e10 <xTraceObjectRegisterInternal>:
#define TRC_SEND_NAME_ONLY_ON_DELETE 0
#endif

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8006e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e14:	b085      	sub	sp, #20
 8006e16:	4606      	mov	r6, r0
 8006e18:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006e1a:	4690      	mov	r8, r2
 8006e1c:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1e:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e22:	2301      	movs	r3, #1
 8006e24:	f383 8810 	msr	PRIMASK, r3
	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();

	if (pvObject != (void*)0)
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	d034      	beq.n	8006e96 <xTraceObjectRegisterInternal+0x86>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8006e2c:	a803      	add	r0, sp, #12
 8006e2e:	460d      	mov	r5, r1
 8006e30:	f7fe ffdc 	bl	8005dec <xTraceEntryCreate>
 8006e34:	bb48      	cbnz	r0, 8006e8a <xTraceObjectRegisterInternal+0x7a>
 8006e36:	9a03      	ldr	r2, [sp, #12]
 8006e38:	6015      	str	r5, [r2, #0]
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
	}

	for (i = 0u; i < uxStateCount; i++)
 8006e3a:	2c00      	cmp	r4, #0
 8006e3c:	d034      	beq.n	8006ea8 <xTraceObjectRegisterInternal+0x98>
 8006e3e:	1f3b      	subs	r3, r7, #4
 8006e40:	4694      	mov	ip, r2
 8006e42:	eb02 0084 	add.w	r0, r2, r4, lsl #2
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 8006e46:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8006e4a:	f84c 1f04 	str.w	r1, [ip, #4]!
	for (i = 0u; i < uxStateCount; i++)
 8006e4e:	4584      	cmp	ip, r0
 8006e50:	d1f9      	bne.n	8006e46 <xTraceObjectRegisterInternal+0x36>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 8006e52:	6913      	ldr	r3, [r2, #16]
 8006e54:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006e56:	430b      	orrs	r3, r1
 8006e58:	6113      	str	r3, [r2, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 8006e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	f389 8810 	msr	PRIMASK, r9

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8006e62:	f1b8 0f00 	cmp.w	r8, #0
 8006e66:	d002      	beq.n	8006e6e <xTraceObjectRegisterInternal+0x5e>
 8006e68:	f898 3000 	ldrb.w	r3, [r8]
 8006e6c:	bb5b      	cbnz	r3, 8006ec6 <xTraceObjectRegisterInternal+0xb6>
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
	}

	switch (uxStateCount)
 8006e6e:	2c02      	cmp	r4, #2
 8006e70:	d03b      	beq.n	8006eea <xTraceObjectRegisterInternal+0xda>
 8006e72:	2c03      	cmp	r4, #3
 8006e74:	d040      	beq.n	8006ef8 <xTraceObjectRegisterInternal+0xe8>
 8006e76:	2c01      	cmp	r4, #1
 8006e78:	d047      	beq.n	8006f0a <xTraceObjectRegisterInternal+0xfa>
	{
		case 0:
			xTraceEventCreate1(uiEventCode, (TraceUnsignedBaseType_t)pvAddress);
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff f903 	bl	8006088 <xTraceEventCreate1>
		default:
			return TRC_FAIL;
			break;
	}

	return TRC_SUCCESS;
 8006e82:	2000      	movs	r0, #0
}
 8006e84:	b005      	add	sp, #20
 8006e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e8a:	f389 8810 	msr	PRIMASK, r9
			return TRC_FAIL;
 8006e8e:	2001      	movs	r0, #1
}
 8006e90:	b005      	add	sp, #20
 8006e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8006e96:	a803      	add	r0, sp, #12
 8006e98:	f7fe ffa8 	bl	8005dec <xTraceEntryCreate>
 8006e9c:	2801      	cmp	r0, #1
 8006e9e:	d0f4      	beq.n	8006e8a <xTraceObjectRegisterInternal+0x7a>
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 8006ea0:	9a03      	ldr	r2, [sp, #12]
 8006ea2:	6815      	ldr	r5, [r2, #0]
	for (i = 0u; i < uxStateCount; i++)
 8006ea4:	2c00      	cmp	r4, #0
 8006ea6:	d1ca      	bne.n	8006e3e <xTraceObjectRegisterInternal+0x2e>
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 8006ea8:	6913      	ldr	r3, [r2, #16]
 8006eaa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006eac:	430b      	orrs	r3, r1
 8006eae:	6113      	str	r3, [r2, #16]
	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 8006eb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	f389 8810 	msr	PRIMASK, r9
	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8006eb8:	f1b8 0f00 	cmp.w	r8, #0
 8006ebc:	d0dd      	beq.n	8006e7a <xTraceObjectRegisterInternal+0x6a>
 8006ebe:	f898 3000 	ldrb.w	r3, [r8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0d9      	beq.n	8006e7a <xTraceObjectRegisterInternal+0x6a>
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 8006ec6:	f8dd c00c 	ldr.w	ip, [sp, #12]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8006eca:	4643      	mov	r3, r8
 8006ecc:	2200      	movs	r2, #0
 8006ece:	e001      	b.n	8006ed4 <xTraceObjectRegisterInternal+0xc4>
 8006ed0:	2a80      	cmp	r2, #128	@ 0x80
 8006ed2:	d004      	beq.n	8006ede <xTraceObjectRegisterInternal+0xce>
 8006ed4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006ed8:	3201      	adds	r2, #1
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d1f8      	bne.n	8006ed0 <xTraceObjectRegisterInternal+0xc0>
#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Attempt to send name event now since we don't do it on delete events */
	(void)xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 8006ede:	4641      	mov	r1, r8
 8006ee0:	4660      	mov	r0, ip
 8006ee2:	f7fe ffc5 	bl	8005e70 <xTraceEntrySetSymbol>
	switch (uxStateCount)
 8006ee6:	2c02      	cmp	r4, #2
 8006ee8:	d1c3      	bne.n	8006e72 <xTraceObjectRegisterInternal+0x62>
			xTraceEventCreate3(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1]);
 8006eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f7ff f97f 	bl	80061f4 <xTraceEventCreate3>
			break;
 8006ef6:	e7c4      	b.n	8006e82 <xTraceObjectRegisterInternal+0x72>
			xTraceEventCreate4(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1], uxStates[2]);
 8006ef8:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	9100      	str	r1, [sp, #0]
 8006f00:	4630      	mov	r0, r6
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7ff f9da 	bl	80062bc <xTraceEventCreate4>
			break;
 8006f08:	e7bb      	b.n	8006e82 <xTraceObjectRegisterInternal+0x72>
			xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0]);
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff f912 	bl	8006138 <xTraceEventCreate2>
			break;
 8006f14:	e7b5      	b.n	8006e82 <xTraceObjectRegisterInternal+0x72>
 8006f16:	bf00      	nop

08006f18 <xTraceObjectRegisterWithoutHandle>:
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	b088      	sub	sp, #32
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 8006f1c:	ac07      	add	r4, sp, #28
{
 8006f1e:	9305      	str	r3, [sp, #20]
	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 8006f20:	9402      	str	r4, [sp, #8]
 8006f22:	ab05      	add	r3, sp, #20
 8006f24:	2400      	movs	r4, #0
 8006f26:	e9cd 3400 	strd	r3, r4, [sp]
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f7ff ff70 	bl	8006e10 <xTraceObjectRegisterInternal>
}
 8006f30:	b008      	add	sp, #32
 8006f32:	bd10      	pop	{r4, pc}

08006f34 <xTraceVPrintF.part.0>:

	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
traceResult xTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, va_list* pxVariableList)
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f38:	4690      	mov	r8, r2
 8006f3a:	b086      	sub	sp, #24
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
	{
		return TRC_FAIL;
	}

	if (szFormat == (void*)0)
 8006f3c:	b1f1      	cbz	r1, 8006f7c <xTraceVPrintF.part.0+0x48>
	{
		szFormat = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
	}

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8006f3e:	780c      	ldrb	r4, [r1, #0]
 8006f40:	460d      	mov	r5, r1
 8006f42:	b1e4      	cbz	r4, 8006f7e <xTraceVPrintF.part.0+0x4a>
	uint32_t uiArgs = 0u;
 8006f44:	2700      	movs	r7, #0
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8006f46:	46bc      	mov	ip, r7
 8006f48:	e004      	b.n	8006f54 <xTraceVPrintF.part.0+0x20>
 8006f4a:	5cec      	ldrb	r4, [r5, r3]
 8006f4c:	469c      	mov	ip, r3
 8006f4e:	b164      	cbz	r4, 8006f6a <xTraceVPrintF.part.0+0x36>
 8006f50:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f52:	d80a      	bhi.n	8006f6a <xTraceVPrintF.part.0+0x36>
	{
		if (szFormat[i] == '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
		{
			if (szFormat[i + 1u] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8006f54:	f10c 0301 	add.w	r3, ip, #1
		if (szFormat[i] == '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8006f58:	2c25      	cmp	r4, #37	@ 0x25
			if (szFormat[i + 1u] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8006f5a:	5cee      	ldrb	r6, [r5, r3]
		if (szFormat[i] == '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8006f5c:	d1f5      	bne.n	8006f4a <xTraceVPrintF.part.0+0x16>
			if (szFormat[i + 1u] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8006f5e:	b126      	cbz	r6, 8006f6a <xTraceVPrintF.part.0+0x36>
			{
				/* Found end of string, let for loop detect it */
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
			}

			if (szFormat[i + 1u] != '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 8006f60:	2e25      	cmp	r6, #37	@ 0x25
			{
				uiArgs++;        /* Found an argument */
 8006f62:	bf18      	it	ne
 8006f64:	3701      	addne	r7, #1
 8006f66:	3301      	adds	r3, #1
 8006f68:	e7ef      	b.n	8006f4a <xTraceVPrintF.part.0+0x16>
			/* Move past format specifier or non-argument '%' */
			i++; /*cstat !MISRAC2004-13.6 Suppress i increment inside for loop check*/
		}
	}

	uiLength = i + 1u; /* Null termination */
 8006f6a:	1c5c      	adds	r4, r3, #1
	TraceUnsignedBaseType_t uxParam2;
	TraceUnsignedBaseType_t uxParam3;
	TraceUnsignedBaseType_t uxParam4;
	TraceUnsignedBaseType_t uxParam5;

	if (xChannel == 0)
 8006f6c:	b150      	cbz	r0, 8006f84 <xTraceVPrintF.part.0+0x50>
		}

		xChannel = pxPrintData->defaultChannel; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
	}

	switch (uiArgs)
 8006f6e:	2f05      	cmp	r7, #5
 8006f70:	d87c      	bhi.n	800706c <xTraceVPrintF.part.0+0x138>
 8006f72:	e8df f007 	tbb	[pc, r7]
 8006f76:	1e15      	.short	0x1e15
 8006f78:	65513e2d 	.word	0x65513e2d
		szFormat = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8006f7c:	4d3d      	ldr	r5, [pc, #244]	@ (8007074 <xTraceVPrintF.part.0+0x140>)
	if (xChannel == 0)
 8006f7e:	b970      	cbnz	r0, 8006f9e <xTraceVPrintF.part.0+0x6a>
	uint32_t uiArgs = 0u;
 8006f80:	4607      	mov	r7, r0
	uiLength = i + 1u; /* Null termination */
 8006f82:	2401      	movs	r4, #1
		if (pxPrintData->defaultChannel == 0)
 8006f84:	4e3c      	ldr	r6, [pc, #240]	@ (8007078 <xTraceVPrintF.part.0+0x144>)
 8006f86:	6831      	ldr	r1, [r6, #0]
 8006f88:	6808      	ldr	r0, [r1, #0]
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d1ef      	bne.n	8006f6e <xTraceVPrintF.part.0+0x3a>
			if (xTraceStringRegister("Default", &pxPrintData->defaultChannel) == TRC_FAIL)
 8006f8e:	483b      	ldr	r0, [pc, #236]	@ (800707c <xTraceVPrintF.part.0+0x148>)
 8006f90:	f000 fa1a 	bl	80073c8 <xTraceStringRegister>
 8006f94:	2801      	cmp	r0, #1
 8006f96:	d069      	beq.n	800706c <xTraceVPrintF.part.0+0x138>
		xChannel = pxPrintData->defaultChannel; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8006f98:	6833      	ldr	r3, [r6, #0]
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	e7e7      	b.n	8006f6e <xTraceVPrintF.part.0+0x3a>
	uiLength = i + 1u; /* Null termination */
 8006f9e:	2401      	movs	r4, #1
	{
		case 0:
			xResult = xTraceEventCreateData1(uiEventCode, (TraceUnsignedBaseType_t)xChannel, (TraceUnsignedBaseType_t*)szFormat, uiLength);
 8006fa0:	4601      	mov	r1, r0
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	2091      	movs	r0, #145	@ 0x91
}
 8006fa8:	b006      	add	sp, #24
 8006faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			xResult = xTraceEventCreateData1(uiEventCode, (TraceUnsignedBaseType_t)xChannel, (TraceUnsignedBaseType_t*)szFormat, uiLength);
 8006fae:	f7ff ba4b 	b.w	8006448 <xTraceEventCreateData1>
			break;
		case 1:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8006fb2:	f8d8 6000 	ldr.w	r6, [r8]
			xResult = xTraceEventCreateData2(
 8006fb6:	6832      	ldr	r2, [r6, #0]
 8006fb8:	9400      	str	r4, [sp, #0]
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8006fba:	3604      	adds	r6, #4
			xResult = xTraceEventCreateData2(
 8006fbc:	4601      	mov	r1, r0
 8006fbe:	462b      	mov	r3, r5
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8006fc0:	f8c8 6000 	str.w	r6, [r8]
			xResult = xTraceEventCreateData2(
 8006fc4:	2092      	movs	r0, #146	@ 0x92
 8006fc6:	f7ff fab3 	bl	8006530 <xTraceEventCreateData2>
}
 8006fca:	b006      	add	sp, #24
 8006fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
		case 2:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8006fd0:	f8d8 3000 	ldr.w	r3, [r8]
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
			xResult = xTraceEventCreateData3(
 8006fd4:	4601      	mov	r1, r0
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8006fd6:	4618      	mov	r0, r3
			xResult = xTraceEventCreateData3(
 8006fd8:	685b      	ldr	r3, [r3, #4]
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8006fda:	f850 2b08 	ldr.w	r2, [r0], #8
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8006fde:	f8c8 0000 	str.w	r0, [r8]
			xResult = xTraceEventCreateData3(
 8006fe2:	e9cd 5400 	strd	r5, r4, [sp]
 8006fe6:	2093      	movs	r0, #147	@ 0x93
 8006fe8:	f7ff fb1c 	bl	8006624 <xTraceEventCreateData3>
}
 8006fec:	b006      	add	sp, #24
 8006fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
		case 3:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8006ff2:	f8d8 6000 	ldr.w	r6, [r8]
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8006ff6:	e9d6 2300 	ldrd	r2, r3, [r6]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
			xResult = xTraceEventCreateData4(
 8006ffa:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8006ffe:	4601      	mov	r1, r0
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8007000:	360c      	adds	r6, #12
			xResult = xTraceEventCreateData4(
 8007002:	f856 0c04 	ldr.w	r0, [r6, #-4]
 8007006:	9000      	str	r0, [sp, #0]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8007008:	f8c8 6000 	str.w	r6, [r8]
			xResult = xTraceEventCreateData4(
 800700c:	2094      	movs	r0, #148	@ 0x94
 800700e:	f7ff fb85 	bl	800671c <xTraceEventCreateData4>
}
 8007012:	b006      	add	sp, #24
 8007014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
		case 4:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8007018:	f8d8 6000 	ldr.w	r6, [r8]
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
			xResult = xTraceEventCreateData5(
 800701c:	4601      	mov	r1, r0
 800701e:	e9d6 2300 	ldrd	r2, r3, [r6]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8007022:	68b0      	ldr	r0, [r6, #8]
			xResult = xTraceEventCreateData5(
 8007024:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8007028:	68f4      	ldr	r4, [r6, #12]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800702a:	3610      	adds	r6, #16
			xResult = xTraceEventCreateData5(
 800702c:	e9cd 0400 	strd	r0, r4, [sp]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8007030:	f8c8 6000 	str.w	r6, [r8]
			xResult = xTraceEventCreateData5(
 8007034:	2095      	movs	r0, #149	@ 0x95
 8007036:	f7ff fbf1 	bl	800681c <xTraceEventCreateData5>
}
 800703a:	b006      	add	sp, #24
 800703c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
		case 5:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8007040:	f8d8 6000 	ldr.w	r6, [r8]
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
			uxParam5 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
			xResult = xTraceEventCreateData6(
 8007044:	4601      	mov	r1, r0
 8007046:	e9d6 2300 	ldrd	r2, r3, [r6]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800704a:	e9d6 0702 	ldrd	r0, r7, [r6, #8]
			xResult = xTraceEventCreateData6(
 800704e:	e9cd 5403 	strd	r5, r4, [sp, #12]
 8007052:	6934      	ldr	r4, [r6, #16]
 8007054:	9000      	str	r0, [sp, #0]
			uxParam5 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 8007056:	3614      	adds	r6, #20
			xResult = xTraceEventCreateData6(
 8007058:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800705c:	2096      	movs	r0, #150	@ 0x96
			uxParam5 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800705e:	f8c8 6000 	str.w	r6, [r8]
			xResult = xTraceEventCreateData6(
 8007062:	f7ff fc5d 	bl	8006920 <xTraceEventCreateData6>
}
 8007066:	b006      	add	sp, #24
 8007068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return TRC_FAIL;
 800706c:	2001      	movs	r0, #1
}
 800706e:	b006      	add	sp, #24
 8007070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007074:	0800bcf0 	.word	0x0800bcf0
 8007078:	2000263c 	.word	0x2000263c
 800707c:	0800bf64 	.word	0x0800bf64

08007080 <xTracePrintInitialize>:
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 8007080:	4907      	ldr	r1, [pc, #28]	@ (80070a0 <xTracePrintInitialize+0x20>)
 8007082:	680a      	ldr	r2, [r1, #0]
{
 8007084:	b410      	push	{r4}
 8007086:	4603      	mov	r3, r0
	pxPrintData = pxBuffer;
 8007088:	4c06      	ldr	r4, [pc, #24]	@ (80070a4 <xTracePrintInitialize+0x24>)
	pxPrintData->defaultChannel = 0;
 800708a:	2000      	movs	r0, #0
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 800708c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
	pxPrintData->defaultChannel = 0;
 8007090:	6018      	str	r0, [r3, #0]
	pxPrintData = pxBuffer;
 8007092:	6023      	str	r3, [r4, #0]
	pxPrintData->defaultChannel = 0;
 8007094:	6058      	str	r0, [r3, #4]
}
 8007096:	f85d 4b04 	ldr.w	r4, [sp], #4
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 800709a:	600a      	str	r2, [r1, #0]
}
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	20002644 	.word	0x20002644
 80070a4:	2000263c 	.word	0x2000263c

080070a8 <xTracePrint>:
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 80070a8:	4b22      	ldr	r3, [pc, #136]	@ (8007134 <xTracePrint+0x8c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	d533      	bpl.n	8007118 <xTracePrint+0x70>
{
 80070b0:	b510      	push	{r4, lr}
 80070b2:	460a      	mov	r2, r1
 80070b4:	b082      	sub	sp, #8
	if (szString == (void*)0)
 80070b6:	b351      	cbz	r1, 800710e <xTracePrint+0x66>
	for (i = 0u; (szString[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80070b8:	780b      	ldrb	r3, [r1, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d035      	beq.n	800712a <xTracePrint+0x82>
 80070be:	468e      	mov	lr, r1
 80070c0:	f04f 0c00 	mov.w	ip, #0
 80070c4:	e002      	b.n	80070cc <xTracePrint+0x24>
 80070c6:	f1bc 0f80 	cmp.w	ip, #128	@ 0x80
 80070ca:	d027      	beq.n	800711c <xTracePrint+0x74>
 80070cc:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 80070d0:	4664      	mov	r4, ip
 80070d2:	f10c 0c01 	add.w	ip, ip, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f5      	bne.n	80070c6 <xTracePrint+0x1e>
	uiLength = i + 1u; /* Null termination */
 80070da:	1ca3      	adds	r3, r4, #2
	if (xChannel == 0)
 80070dc:	b130      	cbz	r0, 80070ec <xTracePrint+0x44>
			xResult = xTraceEventCreateData1(uiEventCode, (TraceUnsignedBaseType_t)xChannel, (TraceUnsignedBaseType_t*)szFormat, uiLength);
 80070de:	4601      	mov	r1, r0
 80070e0:	2091      	movs	r0, #145	@ 0x91
}
 80070e2:	b002      	add	sp, #8
 80070e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			xResult = xTraceEventCreateData1(uiEventCode, (TraceUnsignedBaseType_t)xChannel, (TraceUnsignedBaseType_t*)szFormat, uiLength);
 80070e8:	f7ff b9ae 	b.w	8006448 <xTraceEventCreateData1>
		if (pxPrintData->defaultChannel == 0)
 80070ec:	4c12      	ldr	r4, [pc, #72]	@ (8007138 <xTracePrint+0x90>)
 80070ee:	6821      	ldr	r1, [r4, #0]
 80070f0:	6808      	ldr	r0, [r1, #0]
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d1f3      	bne.n	80070de <xTracePrint+0x36>
			if (xTraceStringRegister("Default", &pxPrintData->defaultChannel) == TRC_FAIL)
 80070f6:	4811      	ldr	r0, [pc, #68]	@ (800713c <xTracePrint+0x94>)
 80070f8:	e9cd 3200 	strd	r3, r2, [sp]
 80070fc:	f000 f964 	bl	80073c8 <xTraceStringRegister>
 8007100:	2801      	cmp	r0, #1
 8007102:	d00f      	beq.n	8007124 <xTracePrint+0x7c>
		xChannel = pxPrintData->defaultChannel; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 8007104:	6821      	ldr	r1, [r4, #0]
 8007106:	e9dd 3200 	ldrd	r3, r2, [sp]
 800710a:	6808      	ldr	r0, [r1, #0]
 800710c:	e7e7      	b.n	80070de <xTracePrint+0x36>
		szString = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800710e:	4a0c      	ldr	r2, [pc, #48]	@ (8007140 <xTracePrint+0x98>)
 8007110:	2301      	movs	r3, #1
	if (xChannel == 0)
 8007112:	2800      	cmp	r0, #0
 8007114:	d1e3      	bne.n	80070de <xTracePrint+0x36>
 8007116:	e7e9      	b.n	80070ec <xTracePrint+0x44>
}
 8007118:	2001      	movs	r0, #1
 800711a:	4770      	bx	lr
 800711c:	2381      	movs	r3, #129	@ 0x81
	if (xChannel == 0)
 800711e:	2800      	cmp	r0, #0
 8007120:	d1dd      	bne.n	80070de <xTracePrint+0x36>
 8007122:	e7e3      	b.n	80070ec <xTracePrint+0x44>
}
 8007124:	2001      	movs	r0, #1
 8007126:	b002      	add	sp, #8
 8007128:	bd10      	pop	{r4, pc}
	for (i = 0u; (szString[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800712a:	2301      	movs	r3, #1
	if (xChannel == 0)
 800712c:	2800      	cmp	r0, #0
 800712e:	d1d6      	bne.n	80070de <xTracePrint+0x36>
 8007130:	e7dc      	b.n	80070ec <xTracePrint+0x44>
 8007132:	bf00      	nop
 8007134:	20002644 	.word	0x20002644
 8007138:	2000263c 	.word	0x2000263c
 800713c:	0800bf64 	.word	0x0800bf64
 8007140:	0800bcf0 	.word	0x0800bcf0

08007144 <xTracePrintF>:
{
 8007144:	b40e      	push	{r1, r2, r3}
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8007146:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <xTracePrintF+0x30>)
{
 8007148:	b500      	push	{lr}
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	041b      	lsls	r3, r3, #16
{
 800714e:	b082      	sub	sp, #8
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8007150:	d405      	bmi.n	800715e <xTracePrintF+0x1a>
		return TRC_FAIL;
 8007152:	2001      	movs	r0, #1
}
 8007154:	b002      	add	sp, #8
 8007156:	f85d eb04 	ldr.w	lr, [sp], #4
 800715a:	b003      	add	sp, #12
 800715c:	4770      	bx	lr
	va_start(xVariableList, szFormat);
 800715e:	ab04      	add	r3, sp, #16
 8007160:	9903      	ldr	r1, [sp, #12]
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	aa01      	add	r2, sp, #4
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 8007166:	f7ff fee5 	bl	8006f34 <xTraceVPrintF.part.0>
}
 800716a:	b002      	add	sp, #8
 800716c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007170:	b003      	add	sp, #12
 8007172:	4770      	bx	lr
 8007174:	20002644 	.word	0x20002644

08007178 <xTraceStaticBufferInitialize>:
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceStaticBufferTable = pxBuffer;

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 8007178:	4a04      	ldr	r2, [pc, #16]	@ (800718c <xTraceStaticBufferInitialize+0x14>)
	pxTraceStaticBufferTable = pxBuffer;
 800717a:	4905      	ldr	r1, [pc, #20]	@ (8007190 <xTraceStaticBufferInitialize+0x18>)
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 800717c:	6813      	ldr	r3, [r2, #0]
	pxTraceStaticBufferTable = pxBuffer;
 800717e:	6008      	str	r0, [r1, #0]
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 8007180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007184:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
}
 8007186:	2000      	movs	r0, #0
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20002644 	.word	0x20002644
 8007190:	20002640 	.word	0x20002640
 8007194:	00000000 	.word	0x00000000

08007198 <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 8007198:	b570      	push	{r4, r5, r6, lr}
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceBaseType_t);

	/* TraceUnsignedBaseType_t is used to store handles (addresses) */
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceHandleBaseType_t);
	
	if (RecorderInitialized != 0u)
 800719a:	4d3d      	ldr	r5, [pc, #244]	@ (8007290 <xTraceInitialize+0xf8>)
 800719c:	682c      	ldr	r4, [r5, #0]
 800719e:	b10c      	cbz	r4, 80071a4 <xTraceInitialize+0xc>
	{
		return TRC_SUCCESS;
 80071a0:	2000      	movs	r0, #0
	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);

	return TRC_SUCCESS;
}
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
	TRC_PORT_SPECIFIC_INIT();
 80071a4:	f7ff fd4e 	bl	8006c44 <xTraceHardwarePortInitCortexM>
	pxTraceRecorderData = &xRecorderData;
 80071a8:	4b3a      	ldr	r3, [pc, #232]	@ (8007294 <xTraceInitialize+0xfc>)
 80071aa:	4e3b      	ldr	r6, [pc, #236]	@ (8007298 <xTraceInitialize+0x100>)
		pxTraceRecorderData->uxTraceSystemStates[i] = (TraceUnsignedBaseType_t)TRC_STATE_IN_STARTUP;
 80071ac:	609c      	str	r4, [r3, #8]
	pxTraceRecorderData->uiSessionCounter = 0u;
 80071ae:	ed9f 7b36 	vldr	d7, [pc, #216]	@ 8007288 <xTraceInitialize+0xf0>
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 80071b2:	f103 0014 	add.w	r0, r3, #20
	pxTraceRecorderData->uiSessionCounter = 0u;
 80071b6:	ed83 7b00 	vstr	d7, [r3]
	pxTraceRecorderData = &xRecorderData;
 80071ba:	6033      	str	r3, [r6, #0]
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 80071bc:	f7fe fde4 	bl	8005d88 <xTraceEntryIndexTableInitialize>
 80071c0:	2801      	cmp	r0, #1
 80071c2:	d05e      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceCounterInitialize(&pxTraceRecorderData->xCounterBuffer) == TRC_FAIL)
 80071c4:	6830      	ldr	r0, [r6, #0]
 80071c6:	f500 5057 	add.w	r0, r0, #13760	@ 0x35c0
 80071ca:	3030      	adds	r0, #48	@ 0x30
 80071cc:	f7fe fd5c 	bl	8005c88 <xTraceCounterInitialize>
 80071d0:	2801      	cmp	r0, #1
 80071d2:	d056      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 80071d4:	6830      	ldr	r0, [r6, #0]
 80071d6:	3054      	adds	r0, #84	@ 0x54
 80071d8:	f7fe fce2 	bl	8005ba0 <xTraceStreamPortInitialize>
 80071dc:	2801      	cmp	r0, #1
 80071de:	d050      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 80071e0:	6830      	ldr	r0, [r6, #0]
 80071e2:	f500 5057 	add.w	r0, r0, #13760	@ 0x35c0
 80071e6:	3018      	adds	r0, #24
 80071e8:	f7fe fd60 	bl	8005cac <xTraceDiagnosticsInitialize>
 80071ec:	2801      	cmp	r0, #1
 80071ee:	d048      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceExtensionInitialize(&pxTraceRecorderData->xExtensionBuffer) == TRC_FAIL)
 80071f0:	6830      	ldr	r0, [r6, #0]
 80071f2:	f500 5057 	add.w	r0, r0, #13760	@ 0x35c0
 80071f6:	302c      	adds	r0, #44	@ 0x2c
 80071f8:	f7ff fd14 	bl	8006c24 <xTraceExtensionInitialize>
 80071fc:	2801      	cmp	r0, #1
 80071fe:	d040      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 8007200:	6830      	ldr	r0, [r6, #0]
 8007202:	f500 504d 	add.w	r0, r0, #13120	@ 0x3340
 8007206:	3004      	adds	r0, #4
 8007208:	f7ff ffb6 	bl	8007178 <xTraceStaticBufferInitialize>
 800720c:	2801      	cmp	r0, #1
 800720e:	d038      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 8007210:	6830      	ldr	r0, [r6, #0]
 8007212:	f500 5056 	add.w	r0, r0, #13696	@ 0x3580
 8007216:	3004      	adds	r0, #4
 8007218:	f7fe ff24 	bl	8006064 <xTraceEventInitialize>
 800721c:	2801      	cmp	r0, #1
 800721e:	d030      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 8007220:	6830      	ldr	r0, [r6, #0]
 8007222:	f500 5056 	add.w	r0, r0, #13696	@ 0x3580
 8007226:	300c      	adds	r0, #12
 8007228:	f7ff ff2a 	bl	8007080 <xTracePrintInitialize>
 800722c:	2801      	cmp	r0, #1
 800722e:	d028      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 8007230:	6830      	ldr	r0, [r6, #0]
 8007232:	f500 5056 	add.w	r0, r0, #13696	@ 0x3580
 8007236:	3014      	adds	r0, #20
 8007238:	f7fe feb2 	bl	8005fa0 <xTraceErrorInitialize>
 800723c:	2801      	cmp	r0, #1
 800723e:	d020      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceISRInitialize(&pxTraceRecorderData->xISRBuffer) == TRC_FAIL)
 8007240:	6830      	ldr	r0, [r6, #0]
 8007242:	f500 5056 	add.w	r0, r0, #13696	@ 0x3580
 8007246:	3020      	adds	r0, #32
 8007248:	f7ff fd60 	bl	8006d0c <xTraceISRInitialize>
 800724c:	2801      	cmp	r0, #1
 800724e:	d018      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 8007250:	6830      	ldr	r0, [r6, #0]
 8007252:	f500 5057 	add.w	r0, r0, #13760	@ 0x35c0
 8007256:	3010      	adds	r0, #16
 8007258:	f000 f8e0 	bl	800741c <xTraceTaskInitialize>
 800725c:	2801      	cmp	r0, #1
 800725e:	d010      	beq.n	8007282 <xTraceInitialize+0xea>
	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 8007260:	6830      	ldr	r0, [r6, #0]
 8007262:	f500 5057 	add.w	r0, r0, #13760	@ 0x35c0
 8007266:	3008      	adds	r0, #8
 8007268:	f7ff fd70 	bl	8006d4c <xTraceKernelPortInitialize>
 800726c:	2801      	cmp	r0, #1
 800726e:	d008      	beq.n	8007282 <xTraceInitialize+0xea>
	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 8007270:	682b      	ldr	r3, [r5, #0]
	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 8007272:	6832      	ldr	r2, [r6, #0]
 8007274:	f04f 31ff 	mov.w	r1, #4294967295
	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 8007278:	f043 0301 	orr.w	r3, r3, #1
	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 800727c:	60d1      	str	r1, [r2, #12]
	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 800727e:	602b      	str	r3, [r5, #0]
	return TRC_SUCCESS;
 8007280:	e78e      	b.n	80071a0 <xTraceInitialize+0x8>
		return TRC_FAIL;
 8007282:	2001      	movs	r0, #1
}
 8007284:	bd70      	pop	{r4, r5, r6, pc}
 8007286:	bf00      	nop
	...
 8007290:	20002644 	.word	0x20002644
 8007294:	20002650 	.word	0x20002650
 8007298:	20002648 	.word	0x20002648

0800729c <xTraceHeaderInitialize>:
	uint32_t i;
	const char* platform_cfg = TRC_PLATFORM_CFG; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == (void*)0)
 800729c:	b1d0      	cbz	r0, 80072d4 <xTraceHeaderInitialize+0x38>
	}

	pxHeader = (TraceHeader_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 800729e:	4b0e      	ldr	r3, [pc, #56]	@ (80072d8 <xTraceHeaderInitialize+0x3c>)
	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 80072a0:	4a0e      	ldr	r2, [pc, #56]	@ (80072dc <xTraceHeaderInitialize+0x40>)
 80072a2:	490f      	ldr	r1, [pc, #60]	@ (80072e0 <xTraceHeaderInitialize+0x44>)
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 80072a4:	e9c0 2300 	strd	r2, r3, [r0]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;

	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 80072a8:	f100 0c1f 	add.w	ip, r0, #31
 80072ac:	f100 0317 	add.w	r3, r0, #23
	{
		pxHeader->platformCfg[i] = platform_cfg[i]; /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80072b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80072b4:	f803 2f01 	strb.w	r2, [r3, #1]!
		if (platform_cfg[i] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80072b8:	b10a      	cbz	r2, 80072be <xTraceHeaderInitialize+0x22>
	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 80072ba:	4563      	cmp	r3, ip
 80072bc:	d1f8      	bne.n	80072b0 <xTraceHeaderInitialize+0x14>
#endif
	
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = (((uint32_t)(TRC_IRQ_PRIORITY_ORDER)) << 0);
 80072be:	2300      	movs	r3, #0
	pxHeader->uiNumCores |= 3 << 8;
 80072c0:	f240 3101 	movw	r1, #769	@ 0x301
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 80072c4:	f04f 7281 	mov.w	r2, #16908288	@ 0x1020000
	pxHeader->uiNumCores |= 3 << 8;
 80072c8:	e9c0 3102 	strd	r3, r1, [r0, #8]
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 80072cc:	e9c0 3204 	strd	r3, r2, [r0, #16]
	if (prvIs64bit()) /* Call helper function to avoid "unreachable code" */
	{
		pxHeader->uiOptions |= (1 << 3);
	}

	return TRC_SUCCESS;
 80072d0:	4618      	mov	r0, r3
 80072d2:	4770      	bx	lr
		return TRC_FAIL;
 80072d4:	2001      	movs	r0, #1
}
 80072d6:	4770      	bx	lr
 80072d8:	1aa1000e 	.word	0x1aa1000e
 80072dc:	50534600 	.word	0x50534600
 80072e0:	0800bf6b 	.word	0x0800bf6b

080072e4 <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	4604      	mov	r4, r0
	TraceCommand_t xCommand = { 0 };
	int32_t iBytes;

	if (xTraceInitialize() == TRC_FAIL)
 80072ea:	f7ff ff55 	bl	8007198 <xTraceInitialize>
 80072ee:	2801      	cmp	r0, #1
 80072f0:	d00c      	beq.n	800730c <xTraceEnable+0x28>
	{
		return TRC_FAIL;
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortEnable() == TRC_FAIL)
 80072f2:	f7ff fd37 	bl	8006d64 <xTraceKernelPortEnable>
 80072f6:	2801      	cmp	r0, #1
 80072f8:	d008      	beq.n	800730c <xTraceEnable+0x28>
	{
		return TRC_FAIL;
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 80072fa:	2c02      	cmp	r4, #2
 80072fc:	d009      	beq.n	8007312 <xTraceEnable+0x2e>
					prvProcessCommand(&xCommand);
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
	}
	else if (uiStartOption == (uint32_t)(TRC_START))
 80072fe:	2c01      	cmp	r4, #1
 8007300:	d00c      	beq.n	800731c <xTraceEnable+0x38>
		/* We start streaming directly - this assumes that the host interface is ready! */
		xCommand.cmdCode = CMD_SET_ACTIVE;
		xCommand.param1 = 1u;
		prvProcessCommand(&xCommand);
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 8007302:	1e20      	subs	r0, r4, #0
 8007304:	bf18      	it	ne
 8007306:	2001      	movne	r0, #1
	{
		return TRC_FAIL;
	}

	return TRC_SUCCESS;
}
 8007308:	b002      	add	sp, #8
 800730a:	bd70      	pop	{r4, r5, r6, pc}
		return TRC_FAIL;
 800730c:	2001      	movs	r0, #1
}
 800730e:	b002      	add	sp, #8
 8007310:	bd70      	pop	{r4, r5, r6, pc}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
 8007312:	4b16      	ldr	r3, [pc, #88]	@ (800736c <xTraceEnable+0x88>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	bb23      	cbnz	r3, 8007364 <xTraceEnable+0x80>
 800731a:	e7fe      	b.n	800731a <xTraceEnable+0x36>
	TraceUnsignedBaseType_t uxTimestampFrequency = 0u;
	uint32_t uiTimestampPeriod = 0u;
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1u)
 800731c:	4d13      	ldr	r5, [pc, #76]	@ (800736c <xTraceEnable+0x88>)
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d01e      	beq.n	8007364 <xTraceEnable+0x80>
	{
		return;
	}

	(void)xTraceTimestampGetFrequency(&uxTimestampFrequency);
 8007326:	4b12      	ldr	r3, [pc, #72]	@ (8007370 <xTraceEnable+0x8c>)
 8007328:	681b      	ldr	r3, [r3, #0]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (uxTimestampFrequency == 0u)
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	b912      	cbnz	r2, 8007334 <xTraceEnable+0x50>
	{
		(void)xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 800732e:	4a11      	ldr	r2, [pc, #68]	@ (8007374 <xTraceEnable+0x90>)
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007334:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007338:	2401      	movs	r4, #1
 800733a:	f384 8810 	msr	PRIMASK, r4
	TRACE_ENTER_CRITICAL_SECTION();

	/* If the internal event buffer is used, we must clear it */
	(void)xTraceInternalEventBufferClear();
	
	(void)xTraceStreamPortOnTraceBegin();
 800733e:	f7fe fc9d 	bl	8005c7c <xTraceStreamPortOnTraceBegin>
	uint32_t i;

	TraceUnsignedBaseType_t xTraceTasks[TRC_CFG_CORE_COUNT];
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
	{
		(void)xTraceTaskGetCurrentOnCore(i, &pvCurrentTask);
 8007342:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <xTraceEnable+0x94>)
 8007344:	681b      	ldr	r3, [r3, #0]
		xTraceTasks[i] = (TraceUnsignedBaseType_t)pvCurrentTask;
	}

	(void)xTraceEventCreateDataOffline0(PSF_EVENT_TRACE_START, xTraceTasks, sizeof(xTraceTasks));
 8007346:	2204      	movs	r2, #4
		xTraceTasks[i] = (TraceUnsignedBaseType_t)pvCurrentTask;
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	9301      	str	r3, [sp, #4]
	(void)xTraceEventCreateDataOffline0(PSF_EVENT_TRACE_START, xTraceTasks, sizeof(xTraceTasks));
 800734c:	eb0d 0102 	add.w	r1, sp, r2
 8007350:	4620      	mov	r0, r4
 8007352:	f7ff f815 	bl	8006380 <xTraceEventCreateDataOffline0>
	pxTraceRecorderData->uiSessionCounter++;
 8007356:	682b      	ldr	r3, [r5, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 1u;
 800735a:	605c      	str	r4, [r3, #4]
	pxTraceRecorderData->uiSessionCounter++;
 800735c:	4422      	add	r2, r4
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f386 8810 	msr	PRIMASK, r6
	return TRC_SUCCESS;
 8007364:	2000      	movs	r0, #0
}
 8007366:	b002      	add	sp, #8
 8007368:	bd70      	pop	{r4, r5, r6, pc}
 800736a:	bf00      	nop
 800736c:	20002648 	.word	0x20002648
 8007370:	20005c48 	.word	0x20005c48
 8007374:	20000000 	.word	0x20000000
 8007378:	20005c44 	.word	0x20005c44

0800737c <xTraceDisable>:
	if (pxTraceRecorderData->uiRecorderEnabled == 0u)
 800737c:	4b07      	ldr	r3, [pc, #28]	@ (800739c <xTraceDisable+0x20>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	6852      	ldr	r2, [r2, #4]
 8007382:	b14a      	cbz	r2, 8007398 <xTraceDisable+0x1c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007384:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007388:	2101      	movs	r1, #1
 800738a:	f381 8810 	msr	PRIMASK, r1
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2100      	movs	r1, #0
 8007392:	6059      	str	r1, [r3, #4]
 8007394:	f382 8810 	msr	PRIMASK, r2
}
 8007398:	2000      	movs	r0, #0
 800739a:	4770      	bx	lr
 800739c:	20002648 	.word	0x20002648

080073a0 <xTraceTzCtrl>:
{
 80073a0:	b508      	push	{r3, lr}
		if (xTraceIsRecorderEnabled())
 80073a2:	4b07      	ldr	r3, [pc, #28]	@ (80073c0 <xTraceTzCtrl+0x20>)
 80073a4:	681b      	ldr	r3, [r3, #0]
	if (xTraceIsRecorderEnabled())
 80073a6:	07db      	lsls	r3, r3, #31
 80073a8:	d503      	bpl.n	80073b2 <xTraceTzCtrl+0x12>
 80073aa:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <xTraceTzCtrl+0x24>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	b90b      	cbnz	r3, 80073b6 <xTraceTzCtrl+0x16>
}
 80073b2:	2000      	movs	r0, #0
 80073b4:	bd08      	pop	{r3, pc}
		(void)xTraceDiagnosticsCheckStatus();
 80073b6:	f7fe fca7 	bl	8005d08 <xTraceDiagnosticsCheckStatus>
}
 80073ba:	2000      	movs	r0, #0
 80073bc:	bd08      	pop	{r3, pc}
 80073be:	bf00      	nop
 80073c0:	20002644 	.word	0x20002644
 80073c4:	20002648 	.word	0x20002648

080073c8 <xTraceStringRegister>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	4606      	mov	r6, r0
	
	/* This should never fail */
	TRC_ASSERT(pString != (void*)0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 80073ce:	a801      	add	r0, sp, #4
{
 80073d0:	460d      	mov	r5, r1
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 80073d2:	f7fe fd0b 	bl	8005dec <xTraceEntryCreate>
 80073d6:	2801      	cmp	r0, #1
 80073d8:	d019      	beq.n	800740e <xTraceStringRegister+0x46>
	{
		return TRC_FAIL;
	}

	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 80073da:	7832      	ldrb	r2, [r6, #0]
 80073dc:	b1da      	cbz	r2, 8007416 <xTraceStringRegister+0x4e>
 80073de:	46b4      	mov	ip, r6
 80073e0:	2200      	movs	r2, #0
 80073e2:	e001      	b.n	80073e8 <xTraceStringRegister+0x20>
 80073e4:	2a1c      	cmp	r2, #28
 80073e6:	d014      	beq.n	8007412 <xTraceStringRegister+0x4a>
 80073e8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80073ec:	4696      	mov	lr, r2
 80073ee:	3201      	adds	r2, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1f7      	bne.n	80073e4 <xTraceStringRegister+0x1c>
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);

	*pString = (TraceStringHandle_t)xEntryHandle;

	return xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)xEntryHandle, (TraceUnsignedBaseType_t*)szString, uiLength + 1);
 80073f4:	f10e 0402 	add.w	r4, lr, #2
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);
 80073f8:	4631      	mov	r1, r6
 80073fa:	9801      	ldr	r0, [sp, #4]
 80073fc:	f7fe fd38 	bl	8005e70 <xTraceEntrySetSymbol>
	*pString = (TraceStringHandle_t)xEntryHandle;
 8007400:	9901      	ldr	r1, [sp, #4]
 8007402:	6029      	str	r1, [r5, #0]
	return xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)xEntryHandle, (TraceUnsignedBaseType_t*)szString, uiLength + 1);
 8007404:	4623      	mov	r3, r4
 8007406:	4632      	mov	r2, r6
 8007408:	2003      	movs	r0, #3
 800740a:	f7ff f81d 	bl	8006448 <xTraceEventCreateData1>
}
 800740e:	b002      	add	sp, #8
 8007410:	bd70      	pop	{r4, r5, r6, pc}
 8007412:	241d      	movs	r4, #29
 8007414:	e7f0      	b.n	80073f8 <xTraceStringRegister+0x30>
	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 8007416:	2401      	movs	r4, #1
 8007418:	e7ee      	b.n	80073f8 <xTraceStringRegister+0x30>
 800741a:	bf00      	nop

0800741c <xTraceTaskInitialize>:
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
	{
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 800741c:	4a06      	ldr	r2, [pc, #24]	@ (8007438 <xTraceTaskInitialize+0x1c>)
 800741e:	6813      	ldr	r3, [r2, #0]
{
 8007420:	b410      	push	{r4}
	pxTraceTaskData= pxBuffer;
 8007422:	4c06      	ldr	r4, [pc, #24]	@ (800743c <xTraceTaskInitialize+0x20>)
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8007424:	2102      	movs	r1, #2
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 8007426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
	pxTraceTaskData= pxBuffer;
 800742a:	6020      	str	r0, [r4, #0]
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 800742c:	6001      	str	r1, [r0, #0]

	return TRC_SUCCESS;
}
 800742e:	f85d 4b04 	ldr.w	r4, [sp], #4
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 8007432:	6013      	str	r3, [r2, #0]
}
 8007434:	2000      	movs	r0, #0
 8007436:	4770      	bx	lr
 8007438:	20002644 	.word	0x20002644
 800743c:	20005c44 	.word	0x20005c44

08007440 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 8007440:	b538      	push	{r3, r4, r5, lr}
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 8007442:	4b10      	ldr	r3, [pc, #64]	@ (8007484 <xTraceTaskSwitch+0x44>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	07db      	lsls	r3, r3, #31
 8007448:	d506      	bpl.n	8007458 <xTraceTaskSwitch+0x18>
	{
		return xResult;
	}

	if (!xTraceIsRecorderEnabled())
 800744a:	4c0f      	ldr	r4, [pc, #60]	@ (8007488 <xTraceTaskSwitch+0x48>)
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	b922      	cbnz	r2, 800745c <xTraceTaskSwitch+0x1c>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 8007452:	4b0e      	ldr	r3, [pc, #56]	@ (800748c <xTraceTaskSwitch+0x4c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6018      	str	r0, [r3, #0]
		return xResult;
 8007458:	2001      	movs	r0, #1
	xTraceStateSet(TRC_STATE_IN_APPLICATION);

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
}
 800745a:	bd38      	pop	{r3, r4, r5, pc}
	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 800745c:	2201      	movs	r2, #1
 800745e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007460:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007464:	f382 8810 	msr	PRIMASK, r2
		xTraceTaskSetCurrent(pvTask);
 8007468:	4b08      	ldr	r3, [pc, #32]	@ (800748c <xTraceTaskSwitch+0x4c>)
 800746a:	681b      	ldr	r3, [r3, #0]
		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 800746c:	460a      	mov	r2, r1
		xTraceTaskSetCurrent(pvTask);
 800746e:	6018      	str	r0, [r3, #0]
		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 8007470:	4601      	mov	r1, r0
 8007472:	2037      	movs	r0, #55	@ 0x37
 8007474:	f7fe fe60 	bl	8006138 <xTraceEventCreate2>
	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	2202      	movs	r2, #2
 800747c:	609a      	str	r2, [r3, #8]
 800747e:	f385 8810 	msr	PRIMASK, r5
}
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20002644 	.word	0x20002644
 8007488:	20002648 	.word	0x20002648
 800748c:	20005c44 	.word	0x20005c44

08007490 <xTraceTimestampInitialize>:
	pxTraceTimestamp->latestTimestamp = 0u;
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1u;
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 8007490:	490b      	ldr	r1, [pc, #44]	@ (80074c0 <xTraceTimestampInitialize+0x30>)
{
 8007492:	b410      	push	{r4}
	pxTraceTimestamp = pxBuffer;
 8007494:	4c0b      	ldr	r4, [pc, #44]	@ (80074c4 <xTraceTimestampInitialize+0x34>)
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 8007496:	680a      	ldr	r2, [r1, #0]
{
 8007498:	4603      	mov	r3, r0
	pxTraceTimestamp = pxBuffer;
 800749a:	6023      	str	r3, [r4, #0]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 800749c:	2401      	movs	r4, #1
	pxTraceTimestamp->frequency = 0u;
 800749e:	2000      	movs	r0, #0
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 80074a0:	601c      	str	r4, [r3, #0]
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 80074a2:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 80074a6:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80074aa:	611c      	str	r4, [r3, #16]
	pxTraceTimestamp->period = 0u;
 80074ac:	e9c3 0001 	strd	r0, r0, [r3, #4]

	return TRC_SUCCESS;
}
 80074b0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxTraceTimestamp->osTickCount = 0u;
 80074b4:	6198      	str	r0, [r3, #24]
	pxTraceTimestamp->wraparounds = 0u;
 80074b6:	60d8      	str	r0, [r3, #12]
	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 80074b8:	6158      	str	r0, [r3, #20]
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 80074ba:	600a      	str	r2, [r1, #0]
}
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	20002644 	.word	0x20002644
 80074c4:	20005c48 	.word	0x20005c48

080074c8 <__cvt>:
 80074c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	ec57 6b10 	vmov	r6, r7, d0
 80074d0:	2f00      	cmp	r7, #0
 80074d2:	460c      	mov	r4, r1
 80074d4:	4619      	mov	r1, r3
 80074d6:	463b      	mov	r3, r7
 80074d8:	bfbb      	ittet	lt
 80074da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80074de:	461f      	movlt	r7, r3
 80074e0:	2300      	movge	r3, #0
 80074e2:	232d      	movlt	r3, #45	@ 0x2d
 80074e4:	700b      	strb	r3, [r1, #0]
 80074e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074ec:	4691      	mov	r9, r2
 80074ee:	f023 0820 	bic.w	r8, r3, #32
 80074f2:	bfbc      	itt	lt
 80074f4:	4632      	movlt	r2, r6
 80074f6:	4616      	movlt	r6, r2
 80074f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074fc:	d005      	beq.n	800750a <__cvt+0x42>
 80074fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007502:	d100      	bne.n	8007506 <__cvt+0x3e>
 8007504:	3401      	adds	r4, #1
 8007506:	2102      	movs	r1, #2
 8007508:	e000      	b.n	800750c <__cvt+0x44>
 800750a:	2103      	movs	r1, #3
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	ab02      	add	r3, sp, #8
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	ec47 6b10 	vmov	d0, r6, r7
 8007518:	4653      	mov	r3, sl
 800751a:	4622      	mov	r2, r4
 800751c:	f001 f8d8 	bl	80086d0 <_dtoa_r>
 8007520:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007524:	4605      	mov	r5, r0
 8007526:	d119      	bne.n	800755c <__cvt+0x94>
 8007528:	f019 0f01 	tst.w	r9, #1
 800752c:	d00e      	beq.n	800754c <__cvt+0x84>
 800752e:	eb00 0904 	add.w	r9, r0, r4
 8007532:	2200      	movs	r2, #0
 8007534:	2300      	movs	r3, #0
 8007536:	4630      	mov	r0, r6
 8007538:	4639      	mov	r1, r7
 800753a:	f7f9 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800753e:	b108      	cbz	r0, 8007544 <__cvt+0x7c>
 8007540:	f8cd 900c 	str.w	r9, [sp, #12]
 8007544:	2230      	movs	r2, #48	@ 0x30
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	454b      	cmp	r3, r9
 800754a:	d31e      	bcc.n	800758a <__cvt+0xc2>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007550:	1b5b      	subs	r3, r3, r5
 8007552:	4628      	mov	r0, r5
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	b004      	add	sp, #16
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007560:	eb00 0904 	add.w	r9, r0, r4
 8007564:	d1e5      	bne.n	8007532 <__cvt+0x6a>
 8007566:	7803      	ldrb	r3, [r0, #0]
 8007568:	2b30      	cmp	r3, #48	@ 0x30
 800756a:	d10a      	bne.n	8007582 <__cvt+0xba>
 800756c:	2200      	movs	r2, #0
 800756e:	2300      	movs	r3, #0
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f9 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007578:	b918      	cbnz	r0, 8007582 <__cvt+0xba>
 800757a:	f1c4 0401 	rsb	r4, r4, #1
 800757e:	f8ca 4000 	str.w	r4, [sl]
 8007582:	f8da 3000 	ldr.w	r3, [sl]
 8007586:	4499      	add	r9, r3
 8007588:	e7d3      	b.n	8007532 <__cvt+0x6a>
 800758a:	1c59      	adds	r1, r3, #1
 800758c:	9103      	str	r1, [sp, #12]
 800758e:	701a      	strb	r2, [r3, #0]
 8007590:	e7d9      	b.n	8007546 <__cvt+0x7e>

08007592 <__exponent>:
 8007592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007594:	2900      	cmp	r1, #0
 8007596:	bfba      	itte	lt
 8007598:	4249      	neglt	r1, r1
 800759a:	232d      	movlt	r3, #45	@ 0x2d
 800759c:	232b      	movge	r3, #43	@ 0x2b
 800759e:	2909      	cmp	r1, #9
 80075a0:	7002      	strb	r2, [r0, #0]
 80075a2:	7043      	strb	r3, [r0, #1]
 80075a4:	dd29      	ble.n	80075fa <__exponent+0x68>
 80075a6:	f10d 0307 	add.w	r3, sp, #7
 80075aa:	461d      	mov	r5, r3
 80075ac:	270a      	movs	r7, #10
 80075ae:	461a      	mov	r2, r3
 80075b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80075b4:	fb07 1416 	mls	r4, r7, r6, r1
 80075b8:	3430      	adds	r4, #48	@ 0x30
 80075ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075be:	460c      	mov	r4, r1
 80075c0:	2c63      	cmp	r4, #99	@ 0x63
 80075c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80075c6:	4631      	mov	r1, r6
 80075c8:	dcf1      	bgt.n	80075ae <__exponent+0x1c>
 80075ca:	3130      	adds	r1, #48	@ 0x30
 80075cc:	1e94      	subs	r4, r2, #2
 80075ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075d2:	1c41      	adds	r1, r0, #1
 80075d4:	4623      	mov	r3, r4
 80075d6:	42ab      	cmp	r3, r5
 80075d8:	d30a      	bcc.n	80075f0 <__exponent+0x5e>
 80075da:	f10d 0309 	add.w	r3, sp, #9
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	42ac      	cmp	r4, r5
 80075e2:	bf88      	it	hi
 80075e4:	2300      	movhi	r3, #0
 80075e6:	3302      	adds	r3, #2
 80075e8:	4403      	add	r3, r0
 80075ea:	1a18      	subs	r0, r3, r0
 80075ec:	b003      	add	sp, #12
 80075ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075f8:	e7ed      	b.n	80075d6 <__exponent+0x44>
 80075fa:	2330      	movs	r3, #48	@ 0x30
 80075fc:	3130      	adds	r1, #48	@ 0x30
 80075fe:	7083      	strb	r3, [r0, #2]
 8007600:	70c1      	strb	r1, [r0, #3]
 8007602:	1d03      	adds	r3, r0, #4
 8007604:	e7f1      	b.n	80075ea <__exponent+0x58>
	...

08007608 <_printf_float>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	b08d      	sub	sp, #52	@ 0x34
 800760e:	460c      	mov	r4, r1
 8007610:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007614:	4616      	mov	r6, r2
 8007616:	461f      	mov	r7, r3
 8007618:	4605      	mov	r5, r0
 800761a:	f000 feef 	bl	80083fc <_localeconv_r>
 800761e:	6803      	ldr	r3, [r0, #0]
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	4618      	mov	r0, r3
 8007624:	f7f8 fe24 	bl	8000270 <strlen>
 8007628:	2300      	movs	r3, #0
 800762a:	930a      	str	r3, [sp, #40]	@ 0x28
 800762c:	f8d8 3000 	ldr.w	r3, [r8]
 8007630:	9005      	str	r0, [sp, #20]
 8007632:	3307      	adds	r3, #7
 8007634:	f023 0307 	bic.w	r3, r3, #7
 8007638:	f103 0208 	add.w	r2, r3, #8
 800763c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007640:	f8d4 b000 	ldr.w	fp, [r4]
 8007644:	f8c8 2000 	str.w	r2, [r8]
 8007648:	e9d3 8900 	ldrd	r8, r9, [r3]
 800764c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007650:	9307      	str	r3, [sp, #28]
 8007652:	f8cd 8018 	str.w	r8, [sp, #24]
 8007656:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800765a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765e:	4b9c      	ldr	r3, [pc, #624]	@ (80078d0 <_printf_float+0x2c8>)
 8007660:	f04f 32ff 	mov.w	r2, #4294967295
 8007664:	f7f9 fa62 	bl	8000b2c <__aeabi_dcmpun>
 8007668:	bb70      	cbnz	r0, 80076c8 <_printf_float+0xc0>
 800766a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800766e:	4b98      	ldr	r3, [pc, #608]	@ (80078d0 <_printf_float+0x2c8>)
 8007670:	f04f 32ff 	mov.w	r2, #4294967295
 8007674:	f7f9 fa3c 	bl	8000af0 <__aeabi_dcmple>
 8007678:	bb30      	cbnz	r0, 80076c8 <_printf_float+0xc0>
 800767a:	2200      	movs	r2, #0
 800767c:	2300      	movs	r3, #0
 800767e:	4640      	mov	r0, r8
 8007680:	4649      	mov	r1, r9
 8007682:	f7f9 fa2b 	bl	8000adc <__aeabi_dcmplt>
 8007686:	b110      	cbz	r0, 800768e <_printf_float+0x86>
 8007688:	232d      	movs	r3, #45	@ 0x2d
 800768a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800768e:	4a91      	ldr	r2, [pc, #580]	@ (80078d4 <_printf_float+0x2cc>)
 8007690:	4b91      	ldr	r3, [pc, #580]	@ (80078d8 <_printf_float+0x2d0>)
 8007692:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007696:	bf94      	ite	ls
 8007698:	4690      	movls	r8, r2
 800769a:	4698      	movhi	r8, r3
 800769c:	2303      	movs	r3, #3
 800769e:	6123      	str	r3, [r4, #16]
 80076a0:	f02b 0304 	bic.w	r3, fp, #4
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	f04f 0900 	mov.w	r9, #0
 80076aa:	9700      	str	r7, [sp, #0]
 80076ac:	4633      	mov	r3, r6
 80076ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076b0:	4621      	mov	r1, r4
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 f9d2 	bl	8007a5c <_printf_common>
 80076b8:	3001      	adds	r0, #1
 80076ba:	f040 808d 	bne.w	80077d8 <_printf_float+0x1d0>
 80076be:	f04f 30ff 	mov.w	r0, #4294967295
 80076c2:	b00d      	add	sp, #52	@ 0x34
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	4642      	mov	r2, r8
 80076ca:	464b      	mov	r3, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	4649      	mov	r1, r9
 80076d0:	f7f9 fa2c 	bl	8000b2c <__aeabi_dcmpun>
 80076d4:	b140      	cbz	r0, 80076e8 <_printf_float+0xe0>
 80076d6:	464b      	mov	r3, r9
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bfbc      	itt	lt
 80076dc:	232d      	movlt	r3, #45	@ 0x2d
 80076de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076e2:	4a7e      	ldr	r2, [pc, #504]	@ (80078dc <_printf_float+0x2d4>)
 80076e4:	4b7e      	ldr	r3, [pc, #504]	@ (80078e0 <_printf_float+0x2d8>)
 80076e6:	e7d4      	b.n	8007692 <_printf_float+0x8a>
 80076e8:	6863      	ldr	r3, [r4, #4]
 80076ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076ee:	9206      	str	r2, [sp, #24]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	d13b      	bne.n	800776c <_printf_float+0x164>
 80076f4:	2306      	movs	r3, #6
 80076f6:	6063      	str	r3, [r4, #4]
 80076f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076fc:	2300      	movs	r3, #0
 80076fe:	6022      	str	r2, [r4, #0]
 8007700:	9303      	str	r3, [sp, #12]
 8007702:	ab0a      	add	r3, sp, #40	@ 0x28
 8007704:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007708:	ab09      	add	r3, sp, #36	@ 0x24
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	6861      	ldr	r1, [r4, #4]
 800770e:	ec49 8b10 	vmov	d0, r8, r9
 8007712:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007716:	4628      	mov	r0, r5
 8007718:	f7ff fed6 	bl	80074c8 <__cvt>
 800771c:	9b06      	ldr	r3, [sp, #24]
 800771e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007720:	2b47      	cmp	r3, #71	@ 0x47
 8007722:	4680      	mov	r8, r0
 8007724:	d129      	bne.n	800777a <_printf_float+0x172>
 8007726:	1cc8      	adds	r0, r1, #3
 8007728:	db02      	blt.n	8007730 <_printf_float+0x128>
 800772a:	6863      	ldr	r3, [r4, #4]
 800772c:	4299      	cmp	r1, r3
 800772e:	dd41      	ble.n	80077b4 <_printf_float+0x1ac>
 8007730:	f1aa 0a02 	sub.w	sl, sl, #2
 8007734:	fa5f fa8a 	uxtb.w	sl, sl
 8007738:	3901      	subs	r1, #1
 800773a:	4652      	mov	r2, sl
 800773c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007740:	9109      	str	r1, [sp, #36]	@ 0x24
 8007742:	f7ff ff26 	bl	8007592 <__exponent>
 8007746:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007748:	1813      	adds	r3, r2, r0
 800774a:	2a01      	cmp	r2, #1
 800774c:	4681      	mov	r9, r0
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	dc02      	bgt.n	8007758 <_printf_float+0x150>
 8007752:	6822      	ldr	r2, [r4, #0]
 8007754:	07d2      	lsls	r2, r2, #31
 8007756:	d501      	bpl.n	800775c <_printf_float+0x154>
 8007758:	3301      	adds	r3, #1
 800775a:	6123      	str	r3, [r4, #16]
 800775c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0a2      	beq.n	80076aa <_printf_float+0xa2>
 8007764:	232d      	movs	r3, #45	@ 0x2d
 8007766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800776a:	e79e      	b.n	80076aa <_printf_float+0xa2>
 800776c:	9a06      	ldr	r2, [sp, #24]
 800776e:	2a47      	cmp	r2, #71	@ 0x47
 8007770:	d1c2      	bne.n	80076f8 <_printf_float+0xf0>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1c0      	bne.n	80076f8 <_printf_float+0xf0>
 8007776:	2301      	movs	r3, #1
 8007778:	e7bd      	b.n	80076f6 <_printf_float+0xee>
 800777a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800777e:	d9db      	bls.n	8007738 <_printf_float+0x130>
 8007780:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007784:	d118      	bne.n	80077b8 <_printf_float+0x1b0>
 8007786:	2900      	cmp	r1, #0
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	dd0b      	ble.n	80077a4 <_printf_float+0x19c>
 800778c:	6121      	str	r1, [r4, #16]
 800778e:	b913      	cbnz	r3, 8007796 <_printf_float+0x18e>
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	07d0      	lsls	r0, r2, #31
 8007794:	d502      	bpl.n	800779c <_printf_float+0x194>
 8007796:	3301      	adds	r3, #1
 8007798:	440b      	add	r3, r1
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	e7db      	b.n	800775c <_printf_float+0x154>
 80077a4:	b913      	cbnz	r3, 80077ac <_printf_float+0x1a4>
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	07d2      	lsls	r2, r2, #31
 80077aa:	d501      	bpl.n	80077b0 <_printf_float+0x1a8>
 80077ac:	3302      	adds	r3, #2
 80077ae:	e7f4      	b.n	800779a <_printf_float+0x192>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e7f2      	b.n	800779a <_printf_float+0x192>
 80077b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ba:	4299      	cmp	r1, r3
 80077bc:	db05      	blt.n	80077ca <_printf_float+0x1c2>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	6121      	str	r1, [r4, #16]
 80077c2:	07d8      	lsls	r0, r3, #31
 80077c4:	d5ea      	bpl.n	800779c <_printf_float+0x194>
 80077c6:	1c4b      	adds	r3, r1, #1
 80077c8:	e7e7      	b.n	800779a <_printf_float+0x192>
 80077ca:	2900      	cmp	r1, #0
 80077cc:	bfd4      	ite	le
 80077ce:	f1c1 0202 	rsble	r2, r1, #2
 80077d2:	2201      	movgt	r2, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	e7e0      	b.n	800779a <_printf_float+0x192>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	055a      	lsls	r2, r3, #21
 80077dc:	d407      	bmi.n	80077ee <_printf_float+0x1e6>
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	4642      	mov	r2, r8
 80077e2:	4631      	mov	r1, r6
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b8      	blx	r7
 80077e8:	3001      	adds	r0, #1
 80077ea:	d12b      	bne.n	8007844 <_printf_float+0x23c>
 80077ec:	e767      	b.n	80076be <_printf_float+0xb6>
 80077ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077f2:	f240 80dd 	bls.w	80079b0 <_printf_float+0x3a8>
 80077f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077fa:	2200      	movs	r2, #0
 80077fc:	2300      	movs	r3, #0
 80077fe:	f7f9 f963 	bl	8000ac8 <__aeabi_dcmpeq>
 8007802:	2800      	cmp	r0, #0
 8007804:	d033      	beq.n	800786e <_printf_float+0x266>
 8007806:	4a37      	ldr	r2, [pc, #220]	@ (80078e4 <_printf_float+0x2dc>)
 8007808:	2301      	movs	r3, #1
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	f43f af54 	beq.w	80076be <_printf_float+0xb6>
 8007816:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800781a:	4543      	cmp	r3, r8
 800781c:	db02      	blt.n	8007824 <_printf_float+0x21c>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	07d8      	lsls	r0, r3, #31
 8007822:	d50f      	bpl.n	8007844 <_printf_float+0x23c>
 8007824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f af45 	beq.w	80076be <_printf_float+0xb6>
 8007834:	f04f 0900 	mov.w	r9, #0
 8007838:	f108 38ff 	add.w	r8, r8, #4294967295
 800783c:	f104 0a1a 	add.w	sl, r4, #26
 8007840:	45c8      	cmp	r8, r9
 8007842:	dc09      	bgt.n	8007858 <_printf_float+0x250>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	079b      	lsls	r3, r3, #30
 8007848:	f100 8103 	bmi.w	8007a52 <_printf_float+0x44a>
 800784c:	68e0      	ldr	r0, [r4, #12]
 800784e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007850:	4298      	cmp	r0, r3
 8007852:	bfb8      	it	lt
 8007854:	4618      	movlt	r0, r3
 8007856:	e734      	b.n	80076c2 <_printf_float+0xba>
 8007858:	2301      	movs	r3, #1
 800785a:	4652      	mov	r2, sl
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	f43f af2b 	beq.w	80076be <_printf_float+0xb6>
 8007868:	f109 0901 	add.w	r9, r9, #1
 800786c:	e7e8      	b.n	8007840 <_printf_float+0x238>
 800786e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	dc39      	bgt.n	80078e8 <_printf_float+0x2e0>
 8007874:	4a1b      	ldr	r2, [pc, #108]	@ (80078e4 <_printf_float+0x2dc>)
 8007876:	2301      	movs	r3, #1
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	f43f af1d 	beq.w	80076be <_printf_float+0xb6>
 8007884:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007888:	ea59 0303 	orrs.w	r3, r9, r3
 800788c:	d102      	bne.n	8007894 <_printf_float+0x28c>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	07d9      	lsls	r1, r3, #31
 8007892:	d5d7      	bpl.n	8007844 <_printf_float+0x23c>
 8007894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f af0d 	beq.w	80076be <_printf_float+0xb6>
 80078a4:	f04f 0a00 	mov.w	sl, #0
 80078a8:	f104 0b1a 	add.w	fp, r4, #26
 80078ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ae:	425b      	negs	r3, r3
 80078b0:	4553      	cmp	r3, sl
 80078b2:	dc01      	bgt.n	80078b8 <_printf_float+0x2b0>
 80078b4:	464b      	mov	r3, r9
 80078b6:	e793      	b.n	80077e0 <_printf_float+0x1d8>
 80078b8:	2301      	movs	r3, #1
 80078ba:	465a      	mov	r2, fp
 80078bc:	4631      	mov	r1, r6
 80078be:	4628      	mov	r0, r5
 80078c0:	47b8      	blx	r7
 80078c2:	3001      	adds	r0, #1
 80078c4:	f43f aefb 	beq.w	80076be <_printf_float+0xb6>
 80078c8:	f10a 0a01 	add.w	sl, sl, #1
 80078cc:	e7ee      	b.n	80078ac <_printf_float+0x2a4>
 80078ce:	bf00      	nop
 80078d0:	7fefffff 	.word	0x7fefffff
 80078d4:	0800bf75 	.word	0x0800bf75
 80078d8:	0800bf79 	.word	0x0800bf79
 80078dc:	0800bf7d 	.word	0x0800bf7d
 80078e0:	0800bf81 	.word	0x0800bf81
 80078e4:	0800bf85 	.word	0x0800bf85
 80078e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078ee:	4553      	cmp	r3, sl
 80078f0:	bfa8      	it	ge
 80078f2:	4653      	movge	r3, sl
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	4699      	mov	r9, r3
 80078f8:	dc36      	bgt.n	8007968 <_printf_float+0x360>
 80078fa:	f04f 0b00 	mov.w	fp, #0
 80078fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007902:	f104 021a 	add.w	r2, r4, #26
 8007906:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007908:	9306      	str	r3, [sp, #24]
 800790a:	eba3 0309 	sub.w	r3, r3, r9
 800790e:	455b      	cmp	r3, fp
 8007910:	dc31      	bgt.n	8007976 <_printf_float+0x36e>
 8007912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007914:	459a      	cmp	sl, r3
 8007916:	dc3a      	bgt.n	800798e <_printf_float+0x386>
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	07da      	lsls	r2, r3, #31
 800791c:	d437      	bmi.n	800798e <_printf_float+0x386>
 800791e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007920:	ebaa 0903 	sub.w	r9, sl, r3
 8007924:	9b06      	ldr	r3, [sp, #24]
 8007926:	ebaa 0303 	sub.w	r3, sl, r3
 800792a:	4599      	cmp	r9, r3
 800792c:	bfa8      	it	ge
 800792e:	4699      	movge	r9, r3
 8007930:	f1b9 0f00 	cmp.w	r9, #0
 8007934:	dc33      	bgt.n	800799e <_printf_float+0x396>
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800793e:	f104 0b1a 	add.w	fp, r4, #26
 8007942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007944:	ebaa 0303 	sub.w	r3, sl, r3
 8007948:	eba3 0309 	sub.w	r3, r3, r9
 800794c:	4543      	cmp	r3, r8
 800794e:	f77f af79 	ble.w	8007844 <_printf_float+0x23c>
 8007952:	2301      	movs	r3, #1
 8007954:	465a      	mov	r2, fp
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	47b8      	blx	r7
 800795c:	3001      	adds	r0, #1
 800795e:	f43f aeae 	beq.w	80076be <_printf_float+0xb6>
 8007962:	f108 0801 	add.w	r8, r8, #1
 8007966:	e7ec      	b.n	8007942 <_printf_float+0x33a>
 8007968:	4642      	mov	r2, r8
 800796a:	4631      	mov	r1, r6
 800796c:	4628      	mov	r0, r5
 800796e:	47b8      	blx	r7
 8007970:	3001      	adds	r0, #1
 8007972:	d1c2      	bne.n	80078fa <_printf_float+0x2f2>
 8007974:	e6a3      	b.n	80076be <_printf_float+0xb6>
 8007976:	2301      	movs	r3, #1
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	9206      	str	r2, [sp, #24]
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	f43f ae9c 	beq.w	80076be <_printf_float+0xb6>
 8007986:	9a06      	ldr	r2, [sp, #24]
 8007988:	f10b 0b01 	add.w	fp, fp, #1
 800798c:	e7bb      	b.n	8007906 <_printf_float+0x2fe>
 800798e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007992:	4631      	mov	r1, r6
 8007994:	4628      	mov	r0, r5
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	d1c0      	bne.n	800791e <_printf_float+0x316>
 800799c:	e68f      	b.n	80076be <_printf_float+0xb6>
 800799e:	9a06      	ldr	r2, [sp, #24]
 80079a0:	464b      	mov	r3, r9
 80079a2:	4442      	add	r2, r8
 80079a4:	4631      	mov	r1, r6
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	d1c3      	bne.n	8007936 <_printf_float+0x32e>
 80079ae:	e686      	b.n	80076be <_printf_float+0xb6>
 80079b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079b4:	f1ba 0f01 	cmp.w	sl, #1
 80079b8:	dc01      	bgt.n	80079be <_printf_float+0x3b6>
 80079ba:	07db      	lsls	r3, r3, #31
 80079bc:	d536      	bpl.n	8007a2c <_printf_float+0x424>
 80079be:	2301      	movs	r3, #1
 80079c0:	4642      	mov	r2, r8
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	f43f ae78 	beq.w	80076be <_printf_float+0xb6>
 80079ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	f43f ae70 	beq.w	80076be <_printf_float+0xb6>
 80079de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079e2:	2200      	movs	r2, #0
 80079e4:	2300      	movs	r3, #0
 80079e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ea:	f7f9 f86d 	bl	8000ac8 <__aeabi_dcmpeq>
 80079ee:	b9c0      	cbnz	r0, 8007a22 <_printf_float+0x41a>
 80079f0:	4653      	mov	r3, sl
 80079f2:	f108 0201 	add.w	r2, r8, #1
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	d10c      	bne.n	8007a1a <_printf_float+0x412>
 8007a00:	e65d      	b.n	80076be <_printf_float+0xb6>
 8007a02:	2301      	movs	r3, #1
 8007a04:	465a      	mov	r2, fp
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b8      	blx	r7
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f43f ae56 	beq.w	80076be <_printf_float+0xb6>
 8007a12:	f108 0801 	add.w	r8, r8, #1
 8007a16:	45d0      	cmp	r8, sl
 8007a18:	dbf3      	blt.n	8007a02 <_printf_float+0x3fa>
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a20:	e6df      	b.n	80077e2 <_printf_float+0x1da>
 8007a22:	f04f 0800 	mov.w	r8, #0
 8007a26:	f104 0b1a 	add.w	fp, r4, #26
 8007a2a:	e7f4      	b.n	8007a16 <_printf_float+0x40e>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	4642      	mov	r2, r8
 8007a30:	e7e1      	b.n	80079f6 <_printf_float+0x3ee>
 8007a32:	2301      	movs	r3, #1
 8007a34:	464a      	mov	r2, r9
 8007a36:	4631      	mov	r1, r6
 8007a38:	4628      	mov	r0, r5
 8007a3a:	47b8      	blx	r7
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	f43f ae3e 	beq.w	80076be <_printf_float+0xb6>
 8007a42:	f108 0801 	add.w	r8, r8, #1
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a4a:	1a5b      	subs	r3, r3, r1
 8007a4c:	4543      	cmp	r3, r8
 8007a4e:	dcf0      	bgt.n	8007a32 <_printf_float+0x42a>
 8007a50:	e6fc      	b.n	800784c <_printf_float+0x244>
 8007a52:	f04f 0800 	mov.w	r8, #0
 8007a56:	f104 0919 	add.w	r9, r4, #25
 8007a5a:	e7f4      	b.n	8007a46 <_printf_float+0x43e>

08007a5c <_printf_common>:
 8007a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	4616      	mov	r6, r2
 8007a62:	4698      	mov	r8, r3
 8007a64:	688a      	ldr	r2, [r1, #8]
 8007a66:	690b      	ldr	r3, [r1, #16]
 8007a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	bfb8      	it	lt
 8007a70:	4613      	movlt	r3, r2
 8007a72:	6033      	str	r3, [r6, #0]
 8007a74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a78:	4607      	mov	r7, r0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	b10a      	cbz	r2, 8007a82 <_printf_common+0x26>
 8007a7e:	3301      	adds	r3, #1
 8007a80:	6033      	str	r3, [r6, #0]
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	0699      	lsls	r1, r3, #26
 8007a86:	bf42      	ittt	mi
 8007a88:	6833      	ldrmi	r3, [r6, #0]
 8007a8a:	3302      	addmi	r3, #2
 8007a8c:	6033      	strmi	r3, [r6, #0]
 8007a8e:	6825      	ldr	r5, [r4, #0]
 8007a90:	f015 0506 	ands.w	r5, r5, #6
 8007a94:	d106      	bne.n	8007aa4 <_printf_common+0x48>
 8007a96:	f104 0a19 	add.w	sl, r4, #25
 8007a9a:	68e3      	ldr	r3, [r4, #12]
 8007a9c:	6832      	ldr	r2, [r6, #0]
 8007a9e:	1a9b      	subs	r3, r3, r2
 8007aa0:	42ab      	cmp	r3, r5
 8007aa2:	dc26      	bgt.n	8007af2 <_printf_common+0x96>
 8007aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007aa8:	6822      	ldr	r2, [r4, #0]
 8007aaa:	3b00      	subs	r3, #0
 8007aac:	bf18      	it	ne
 8007aae:	2301      	movne	r3, #1
 8007ab0:	0692      	lsls	r2, r2, #26
 8007ab2:	d42b      	bmi.n	8007b0c <_printf_common+0xb0>
 8007ab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ab8:	4641      	mov	r1, r8
 8007aba:	4638      	mov	r0, r7
 8007abc:	47c8      	blx	r9
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d01e      	beq.n	8007b00 <_printf_common+0xa4>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	6922      	ldr	r2, [r4, #16]
 8007ac6:	f003 0306 	and.w	r3, r3, #6
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	bf02      	ittt	eq
 8007ace:	68e5      	ldreq	r5, [r4, #12]
 8007ad0:	6833      	ldreq	r3, [r6, #0]
 8007ad2:	1aed      	subeq	r5, r5, r3
 8007ad4:	68a3      	ldr	r3, [r4, #8]
 8007ad6:	bf0c      	ite	eq
 8007ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007adc:	2500      	movne	r5, #0
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	bfc4      	itt	gt
 8007ae2:	1a9b      	subgt	r3, r3, r2
 8007ae4:	18ed      	addgt	r5, r5, r3
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	341a      	adds	r4, #26
 8007aea:	42b5      	cmp	r5, r6
 8007aec:	d11a      	bne.n	8007b24 <_printf_common+0xc8>
 8007aee:	2000      	movs	r0, #0
 8007af0:	e008      	b.n	8007b04 <_printf_common+0xa8>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4652      	mov	r2, sl
 8007af6:	4641      	mov	r1, r8
 8007af8:	4638      	mov	r0, r7
 8007afa:	47c8      	blx	r9
 8007afc:	3001      	adds	r0, #1
 8007afe:	d103      	bne.n	8007b08 <_printf_common+0xac>
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b08:	3501      	adds	r5, #1
 8007b0a:	e7c6      	b.n	8007a9a <_printf_common+0x3e>
 8007b0c:	18e1      	adds	r1, r4, r3
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	2030      	movs	r0, #48	@ 0x30
 8007b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b16:	4422      	add	r2, r4
 8007b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b20:	3302      	adds	r3, #2
 8007b22:	e7c7      	b.n	8007ab4 <_printf_common+0x58>
 8007b24:	2301      	movs	r3, #1
 8007b26:	4622      	mov	r2, r4
 8007b28:	4641      	mov	r1, r8
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	47c8      	blx	r9
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d0e6      	beq.n	8007b00 <_printf_common+0xa4>
 8007b32:	3601      	adds	r6, #1
 8007b34:	e7d9      	b.n	8007aea <_printf_common+0x8e>
	...

08007b38 <_printf_i>:
 8007b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3c:	7e0f      	ldrb	r7, [r1, #24]
 8007b3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b40:	2f78      	cmp	r7, #120	@ 0x78
 8007b42:	4691      	mov	r9, r2
 8007b44:	4680      	mov	r8, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	469a      	mov	sl, r3
 8007b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b4e:	d807      	bhi.n	8007b60 <_printf_i+0x28>
 8007b50:	2f62      	cmp	r7, #98	@ 0x62
 8007b52:	d80a      	bhi.n	8007b6a <_printf_i+0x32>
 8007b54:	2f00      	cmp	r7, #0
 8007b56:	f000 80d2 	beq.w	8007cfe <_printf_i+0x1c6>
 8007b5a:	2f58      	cmp	r7, #88	@ 0x58
 8007b5c:	f000 80b9 	beq.w	8007cd2 <_printf_i+0x19a>
 8007b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b68:	e03a      	b.n	8007be0 <_printf_i+0xa8>
 8007b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b6e:	2b15      	cmp	r3, #21
 8007b70:	d8f6      	bhi.n	8007b60 <_printf_i+0x28>
 8007b72:	a101      	add	r1, pc, #4	@ (adr r1, 8007b78 <_printf_i+0x40>)
 8007b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b78:	08007bd1 	.word	0x08007bd1
 8007b7c:	08007be5 	.word	0x08007be5
 8007b80:	08007b61 	.word	0x08007b61
 8007b84:	08007b61 	.word	0x08007b61
 8007b88:	08007b61 	.word	0x08007b61
 8007b8c:	08007b61 	.word	0x08007b61
 8007b90:	08007be5 	.word	0x08007be5
 8007b94:	08007b61 	.word	0x08007b61
 8007b98:	08007b61 	.word	0x08007b61
 8007b9c:	08007b61 	.word	0x08007b61
 8007ba0:	08007b61 	.word	0x08007b61
 8007ba4:	08007ce5 	.word	0x08007ce5
 8007ba8:	08007c0f 	.word	0x08007c0f
 8007bac:	08007c9f 	.word	0x08007c9f
 8007bb0:	08007b61 	.word	0x08007b61
 8007bb4:	08007b61 	.word	0x08007b61
 8007bb8:	08007d07 	.word	0x08007d07
 8007bbc:	08007b61 	.word	0x08007b61
 8007bc0:	08007c0f 	.word	0x08007c0f
 8007bc4:	08007b61 	.word	0x08007b61
 8007bc8:	08007b61 	.word	0x08007b61
 8007bcc:	08007ca7 	.word	0x08007ca7
 8007bd0:	6833      	ldr	r3, [r6, #0]
 8007bd2:	1d1a      	adds	r2, r3, #4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6032      	str	r2, [r6, #0]
 8007bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007be0:	2301      	movs	r3, #1
 8007be2:	e09d      	b.n	8007d20 <_printf_i+0x1e8>
 8007be4:	6833      	ldr	r3, [r6, #0]
 8007be6:	6820      	ldr	r0, [r4, #0]
 8007be8:	1d19      	adds	r1, r3, #4
 8007bea:	6031      	str	r1, [r6, #0]
 8007bec:	0606      	lsls	r6, r0, #24
 8007bee:	d501      	bpl.n	8007bf4 <_printf_i+0xbc>
 8007bf0:	681d      	ldr	r5, [r3, #0]
 8007bf2:	e003      	b.n	8007bfc <_printf_i+0xc4>
 8007bf4:	0645      	lsls	r5, r0, #25
 8007bf6:	d5fb      	bpl.n	8007bf0 <_printf_i+0xb8>
 8007bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	da03      	bge.n	8007c08 <_printf_i+0xd0>
 8007c00:	232d      	movs	r3, #45	@ 0x2d
 8007c02:	426d      	negs	r5, r5
 8007c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c08:	4859      	ldr	r0, [pc, #356]	@ (8007d70 <_printf_i+0x238>)
 8007c0a:	230a      	movs	r3, #10
 8007c0c:	e011      	b.n	8007c32 <_printf_i+0xfa>
 8007c0e:	6821      	ldr	r1, [r4, #0]
 8007c10:	6833      	ldr	r3, [r6, #0]
 8007c12:	0608      	lsls	r0, r1, #24
 8007c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c18:	d402      	bmi.n	8007c20 <_printf_i+0xe8>
 8007c1a:	0649      	lsls	r1, r1, #25
 8007c1c:	bf48      	it	mi
 8007c1e:	b2ad      	uxthmi	r5, r5
 8007c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c22:	4853      	ldr	r0, [pc, #332]	@ (8007d70 <_printf_i+0x238>)
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	bf14      	ite	ne
 8007c28:	230a      	movne	r3, #10
 8007c2a:	2308      	moveq	r3, #8
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c32:	6866      	ldr	r6, [r4, #4]
 8007c34:	60a6      	str	r6, [r4, #8]
 8007c36:	2e00      	cmp	r6, #0
 8007c38:	bfa2      	ittt	ge
 8007c3a:	6821      	ldrge	r1, [r4, #0]
 8007c3c:	f021 0104 	bicge.w	r1, r1, #4
 8007c40:	6021      	strge	r1, [r4, #0]
 8007c42:	b90d      	cbnz	r5, 8007c48 <_printf_i+0x110>
 8007c44:	2e00      	cmp	r6, #0
 8007c46:	d04b      	beq.n	8007ce0 <_printf_i+0x1a8>
 8007c48:	4616      	mov	r6, r2
 8007c4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c4e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c52:	5dc7      	ldrb	r7, [r0, r7]
 8007c54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c58:	462f      	mov	r7, r5
 8007c5a:	42bb      	cmp	r3, r7
 8007c5c:	460d      	mov	r5, r1
 8007c5e:	d9f4      	bls.n	8007c4a <_printf_i+0x112>
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d10b      	bne.n	8007c7c <_printf_i+0x144>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	07df      	lsls	r7, r3, #31
 8007c68:	d508      	bpl.n	8007c7c <_printf_i+0x144>
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	4299      	cmp	r1, r3
 8007c70:	bfde      	ittt	le
 8007c72:	2330      	movle	r3, #48	@ 0x30
 8007c74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c7c:	1b92      	subs	r2, r2, r6
 8007c7e:	6122      	str	r2, [r4, #16]
 8007c80:	f8cd a000 	str.w	sl, [sp]
 8007c84:	464b      	mov	r3, r9
 8007c86:	aa03      	add	r2, sp, #12
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	f7ff fee6 	bl	8007a5c <_printf_common>
 8007c90:	3001      	adds	r0, #1
 8007c92:	d14a      	bne.n	8007d2a <_printf_i+0x1f2>
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	b004      	add	sp, #16
 8007c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	f043 0320 	orr.w	r3, r3, #32
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	4833      	ldr	r0, [pc, #204]	@ (8007d74 <_printf_i+0x23c>)
 8007ca8:	2778      	movs	r7, #120	@ 0x78
 8007caa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	6831      	ldr	r1, [r6, #0]
 8007cb2:	061f      	lsls	r7, r3, #24
 8007cb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cb8:	d402      	bmi.n	8007cc0 <_printf_i+0x188>
 8007cba:	065f      	lsls	r7, r3, #25
 8007cbc:	bf48      	it	mi
 8007cbe:	b2ad      	uxthmi	r5, r5
 8007cc0:	6031      	str	r1, [r6, #0]
 8007cc2:	07d9      	lsls	r1, r3, #31
 8007cc4:	bf44      	itt	mi
 8007cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8007cca:	6023      	strmi	r3, [r4, #0]
 8007ccc:	b11d      	cbz	r5, 8007cd6 <_printf_i+0x19e>
 8007cce:	2310      	movs	r3, #16
 8007cd0:	e7ac      	b.n	8007c2c <_printf_i+0xf4>
 8007cd2:	4827      	ldr	r0, [pc, #156]	@ (8007d70 <_printf_i+0x238>)
 8007cd4:	e7e9      	b.n	8007caa <_printf_i+0x172>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	f023 0320 	bic.w	r3, r3, #32
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	e7f6      	b.n	8007cce <_printf_i+0x196>
 8007ce0:	4616      	mov	r6, r2
 8007ce2:	e7bd      	b.n	8007c60 <_printf_i+0x128>
 8007ce4:	6833      	ldr	r3, [r6, #0]
 8007ce6:	6825      	ldr	r5, [r4, #0]
 8007ce8:	6961      	ldr	r1, [r4, #20]
 8007cea:	1d18      	adds	r0, r3, #4
 8007cec:	6030      	str	r0, [r6, #0]
 8007cee:	062e      	lsls	r6, r5, #24
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	d501      	bpl.n	8007cf8 <_printf_i+0x1c0>
 8007cf4:	6019      	str	r1, [r3, #0]
 8007cf6:	e002      	b.n	8007cfe <_printf_i+0x1c6>
 8007cf8:	0668      	lsls	r0, r5, #25
 8007cfa:	d5fb      	bpl.n	8007cf4 <_printf_i+0x1bc>
 8007cfc:	8019      	strh	r1, [r3, #0]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6123      	str	r3, [r4, #16]
 8007d02:	4616      	mov	r6, r2
 8007d04:	e7bc      	b.n	8007c80 <_printf_i+0x148>
 8007d06:	6833      	ldr	r3, [r6, #0]
 8007d08:	1d1a      	adds	r2, r3, #4
 8007d0a:	6032      	str	r2, [r6, #0]
 8007d0c:	681e      	ldr	r6, [r3, #0]
 8007d0e:	6862      	ldr	r2, [r4, #4]
 8007d10:	2100      	movs	r1, #0
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7f8 fa5c 	bl	80001d0 <memchr>
 8007d18:	b108      	cbz	r0, 8007d1e <_printf_i+0x1e6>
 8007d1a:	1b80      	subs	r0, r0, r6
 8007d1c:	6060      	str	r0, [r4, #4]
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	2300      	movs	r3, #0
 8007d24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d28:	e7aa      	b.n	8007c80 <_printf_i+0x148>
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4640      	mov	r0, r8
 8007d32:	47d0      	blx	sl
 8007d34:	3001      	adds	r0, #1
 8007d36:	d0ad      	beq.n	8007c94 <_printf_i+0x15c>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	079b      	lsls	r3, r3, #30
 8007d3c:	d413      	bmi.n	8007d66 <_printf_i+0x22e>
 8007d3e:	68e0      	ldr	r0, [r4, #12]
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	4298      	cmp	r0, r3
 8007d44:	bfb8      	it	lt
 8007d46:	4618      	movlt	r0, r3
 8007d48:	e7a6      	b.n	8007c98 <_printf_i+0x160>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	4649      	mov	r1, r9
 8007d50:	4640      	mov	r0, r8
 8007d52:	47d0      	blx	sl
 8007d54:	3001      	adds	r0, #1
 8007d56:	d09d      	beq.n	8007c94 <_printf_i+0x15c>
 8007d58:	3501      	adds	r5, #1
 8007d5a:	68e3      	ldr	r3, [r4, #12]
 8007d5c:	9903      	ldr	r1, [sp, #12]
 8007d5e:	1a5b      	subs	r3, r3, r1
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	dcf2      	bgt.n	8007d4a <_printf_i+0x212>
 8007d64:	e7eb      	b.n	8007d3e <_printf_i+0x206>
 8007d66:	2500      	movs	r5, #0
 8007d68:	f104 0619 	add.w	r6, r4, #25
 8007d6c:	e7f5      	b.n	8007d5a <_printf_i+0x222>
 8007d6e:	bf00      	nop
 8007d70:	0800bf87 	.word	0x0800bf87
 8007d74:	0800bf98 	.word	0x0800bf98

08007d78 <_scanf_float>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	b087      	sub	sp, #28
 8007d7e:	4617      	mov	r7, r2
 8007d80:	9303      	str	r3, [sp, #12]
 8007d82:	688b      	ldr	r3, [r1, #8]
 8007d84:	1e5a      	subs	r2, r3, #1
 8007d86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007d8a:	bf81      	itttt	hi
 8007d8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007d90:	eb03 0b05 	addhi.w	fp, r3, r5
 8007d94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007d98:	608b      	strhi	r3, [r1, #8]
 8007d9a:	680b      	ldr	r3, [r1, #0]
 8007d9c:	460a      	mov	r2, r1
 8007d9e:	f04f 0500 	mov.w	r5, #0
 8007da2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007da6:	f842 3b1c 	str.w	r3, [r2], #28
 8007daa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007dae:	4680      	mov	r8, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	bf98      	it	ls
 8007db4:	f04f 0b00 	movls.w	fp, #0
 8007db8:	9201      	str	r2, [sp, #4]
 8007dba:	4616      	mov	r6, r2
 8007dbc:	46aa      	mov	sl, r5
 8007dbe:	46a9      	mov	r9, r5
 8007dc0:	9502      	str	r5, [sp, #8]
 8007dc2:	68a2      	ldr	r2, [r4, #8]
 8007dc4:	b152      	cbz	r2, 8007ddc <_scanf_float+0x64>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b4e      	cmp	r3, #78	@ 0x4e
 8007dcc:	d864      	bhi.n	8007e98 <_scanf_float+0x120>
 8007dce:	2b40      	cmp	r3, #64	@ 0x40
 8007dd0:	d83c      	bhi.n	8007e4c <_scanf_float+0xd4>
 8007dd2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007dd6:	b2c8      	uxtb	r0, r1
 8007dd8:	280e      	cmp	r0, #14
 8007dda:	d93a      	bls.n	8007e52 <_scanf_float+0xda>
 8007ddc:	f1b9 0f00 	cmp.w	r9, #0
 8007de0:	d003      	beq.n	8007dea <_scanf_float+0x72>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dee:	f1ba 0f01 	cmp.w	sl, #1
 8007df2:	f200 8117 	bhi.w	8008024 <_scanf_float+0x2ac>
 8007df6:	9b01      	ldr	r3, [sp, #4]
 8007df8:	429e      	cmp	r6, r3
 8007dfa:	f200 8108 	bhi.w	800800e <_scanf_float+0x296>
 8007dfe:	2001      	movs	r0, #1
 8007e00:	b007      	add	sp, #28
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007e0a:	2a0d      	cmp	r2, #13
 8007e0c:	d8e6      	bhi.n	8007ddc <_scanf_float+0x64>
 8007e0e:	a101      	add	r1, pc, #4	@ (adr r1, 8007e14 <_scanf_float+0x9c>)
 8007e10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e14:	08007f5b 	.word	0x08007f5b
 8007e18:	08007ddd 	.word	0x08007ddd
 8007e1c:	08007ddd 	.word	0x08007ddd
 8007e20:	08007ddd 	.word	0x08007ddd
 8007e24:	08007fbb 	.word	0x08007fbb
 8007e28:	08007f93 	.word	0x08007f93
 8007e2c:	08007ddd 	.word	0x08007ddd
 8007e30:	08007ddd 	.word	0x08007ddd
 8007e34:	08007f69 	.word	0x08007f69
 8007e38:	08007ddd 	.word	0x08007ddd
 8007e3c:	08007ddd 	.word	0x08007ddd
 8007e40:	08007ddd 	.word	0x08007ddd
 8007e44:	08007ddd 	.word	0x08007ddd
 8007e48:	08007f21 	.word	0x08007f21
 8007e4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007e50:	e7db      	b.n	8007e0a <_scanf_float+0x92>
 8007e52:	290e      	cmp	r1, #14
 8007e54:	d8c2      	bhi.n	8007ddc <_scanf_float+0x64>
 8007e56:	a001      	add	r0, pc, #4	@ (adr r0, 8007e5c <_scanf_float+0xe4>)
 8007e58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e5c:	08007f11 	.word	0x08007f11
 8007e60:	08007ddd 	.word	0x08007ddd
 8007e64:	08007f11 	.word	0x08007f11
 8007e68:	08007fa7 	.word	0x08007fa7
 8007e6c:	08007ddd 	.word	0x08007ddd
 8007e70:	08007eb9 	.word	0x08007eb9
 8007e74:	08007ef7 	.word	0x08007ef7
 8007e78:	08007ef7 	.word	0x08007ef7
 8007e7c:	08007ef7 	.word	0x08007ef7
 8007e80:	08007ef7 	.word	0x08007ef7
 8007e84:	08007ef7 	.word	0x08007ef7
 8007e88:	08007ef7 	.word	0x08007ef7
 8007e8c:	08007ef7 	.word	0x08007ef7
 8007e90:	08007ef7 	.word	0x08007ef7
 8007e94:	08007ef7 	.word	0x08007ef7
 8007e98:	2b6e      	cmp	r3, #110	@ 0x6e
 8007e9a:	d809      	bhi.n	8007eb0 <_scanf_float+0x138>
 8007e9c:	2b60      	cmp	r3, #96	@ 0x60
 8007e9e:	d8b2      	bhi.n	8007e06 <_scanf_float+0x8e>
 8007ea0:	2b54      	cmp	r3, #84	@ 0x54
 8007ea2:	d07b      	beq.n	8007f9c <_scanf_float+0x224>
 8007ea4:	2b59      	cmp	r3, #89	@ 0x59
 8007ea6:	d199      	bne.n	8007ddc <_scanf_float+0x64>
 8007ea8:	2d07      	cmp	r5, #7
 8007eaa:	d197      	bne.n	8007ddc <_scanf_float+0x64>
 8007eac:	2508      	movs	r5, #8
 8007eae:	e02c      	b.n	8007f0a <_scanf_float+0x192>
 8007eb0:	2b74      	cmp	r3, #116	@ 0x74
 8007eb2:	d073      	beq.n	8007f9c <_scanf_float+0x224>
 8007eb4:	2b79      	cmp	r3, #121	@ 0x79
 8007eb6:	e7f6      	b.n	8007ea6 <_scanf_float+0x12e>
 8007eb8:	6821      	ldr	r1, [r4, #0]
 8007eba:	05c8      	lsls	r0, r1, #23
 8007ebc:	d51b      	bpl.n	8007ef6 <_scanf_float+0x17e>
 8007ebe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007ec2:	6021      	str	r1, [r4, #0]
 8007ec4:	f109 0901 	add.w	r9, r9, #1
 8007ec8:	f1bb 0f00 	cmp.w	fp, #0
 8007ecc:	d003      	beq.n	8007ed6 <_scanf_float+0x15e>
 8007ece:	3201      	adds	r2, #1
 8007ed0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ed4:	60a2      	str	r2, [r4, #8]
 8007ed6:	68a3      	ldr	r3, [r4, #8]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	60a3      	str	r3, [r4, #8]
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	607b      	str	r3, [r7, #4]
 8007eea:	f340 8087 	ble.w	8007ffc <_scanf_float+0x284>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	e765      	b.n	8007dc2 <_scanf_float+0x4a>
 8007ef6:	eb1a 0105 	adds.w	r1, sl, r5
 8007efa:	f47f af6f 	bne.w	8007ddc <_scanf_float+0x64>
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007f04:	6022      	str	r2, [r4, #0]
 8007f06:	460d      	mov	r5, r1
 8007f08:	468a      	mov	sl, r1
 8007f0a:	f806 3b01 	strb.w	r3, [r6], #1
 8007f0e:	e7e2      	b.n	8007ed6 <_scanf_float+0x15e>
 8007f10:	6822      	ldr	r2, [r4, #0]
 8007f12:	0610      	lsls	r0, r2, #24
 8007f14:	f57f af62 	bpl.w	8007ddc <_scanf_float+0x64>
 8007f18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f1c:	6022      	str	r2, [r4, #0]
 8007f1e:	e7f4      	b.n	8007f0a <_scanf_float+0x192>
 8007f20:	f1ba 0f00 	cmp.w	sl, #0
 8007f24:	d10e      	bne.n	8007f44 <_scanf_float+0x1cc>
 8007f26:	f1b9 0f00 	cmp.w	r9, #0
 8007f2a:	d10e      	bne.n	8007f4a <_scanf_float+0x1d2>
 8007f2c:	6822      	ldr	r2, [r4, #0]
 8007f2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007f32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007f36:	d108      	bne.n	8007f4a <_scanf_float+0x1d2>
 8007f38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f3c:	6022      	str	r2, [r4, #0]
 8007f3e:	f04f 0a01 	mov.w	sl, #1
 8007f42:	e7e2      	b.n	8007f0a <_scanf_float+0x192>
 8007f44:	f1ba 0f02 	cmp.w	sl, #2
 8007f48:	d055      	beq.n	8007ff6 <_scanf_float+0x27e>
 8007f4a:	2d01      	cmp	r5, #1
 8007f4c:	d002      	beq.n	8007f54 <_scanf_float+0x1dc>
 8007f4e:	2d04      	cmp	r5, #4
 8007f50:	f47f af44 	bne.w	8007ddc <_scanf_float+0x64>
 8007f54:	3501      	adds	r5, #1
 8007f56:	b2ed      	uxtb	r5, r5
 8007f58:	e7d7      	b.n	8007f0a <_scanf_float+0x192>
 8007f5a:	f1ba 0f01 	cmp.w	sl, #1
 8007f5e:	f47f af3d 	bne.w	8007ddc <_scanf_float+0x64>
 8007f62:	f04f 0a02 	mov.w	sl, #2
 8007f66:	e7d0      	b.n	8007f0a <_scanf_float+0x192>
 8007f68:	b97d      	cbnz	r5, 8007f8a <_scanf_float+0x212>
 8007f6a:	f1b9 0f00 	cmp.w	r9, #0
 8007f6e:	f47f af38 	bne.w	8007de2 <_scanf_float+0x6a>
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007f78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007f7c:	f040 8108 	bne.w	8008190 <_scanf_float+0x418>
 8007f80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f84:	6022      	str	r2, [r4, #0]
 8007f86:	2501      	movs	r5, #1
 8007f88:	e7bf      	b.n	8007f0a <_scanf_float+0x192>
 8007f8a:	2d03      	cmp	r5, #3
 8007f8c:	d0e2      	beq.n	8007f54 <_scanf_float+0x1dc>
 8007f8e:	2d05      	cmp	r5, #5
 8007f90:	e7de      	b.n	8007f50 <_scanf_float+0x1d8>
 8007f92:	2d02      	cmp	r5, #2
 8007f94:	f47f af22 	bne.w	8007ddc <_scanf_float+0x64>
 8007f98:	2503      	movs	r5, #3
 8007f9a:	e7b6      	b.n	8007f0a <_scanf_float+0x192>
 8007f9c:	2d06      	cmp	r5, #6
 8007f9e:	f47f af1d 	bne.w	8007ddc <_scanf_float+0x64>
 8007fa2:	2507      	movs	r5, #7
 8007fa4:	e7b1      	b.n	8007f0a <_scanf_float+0x192>
 8007fa6:	6822      	ldr	r2, [r4, #0]
 8007fa8:	0591      	lsls	r1, r2, #22
 8007faa:	f57f af17 	bpl.w	8007ddc <_scanf_float+0x64>
 8007fae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007fb2:	6022      	str	r2, [r4, #0]
 8007fb4:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fb8:	e7a7      	b.n	8007f0a <_scanf_float+0x192>
 8007fba:	6822      	ldr	r2, [r4, #0]
 8007fbc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007fc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007fc4:	d006      	beq.n	8007fd4 <_scanf_float+0x25c>
 8007fc6:	0550      	lsls	r0, r2, #21
 8007fc8:	f57f af08 	bpl.w	8007ddc <_scanf_float+0x64>
 8007fcc:	f1b9 0f00 	cmp.w	r9, #0
 8007fd0:	f000 80de 	beq.w	8008190 <_scanf_float+0x418>
 8007fd4:	0591      	lsls	r1, r2, #22
 8007fd6:	bf58      	it	pl
 8007fd8:	9902      	ldrpl	r1, [sp, #8]
 8007fda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007fde:	bf58      	it	pl
 8007fe0:	eba9 0101 	subpl.w	r1, r9, r1
 8007fe4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007fe8:	bf58      	it	pl
 8007fea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007fee:	6022      	str	r2, [r4, #0]
 8007ff0:	f04f 0900 	mov.w	r9, #0
 8007ff4:	e789      	b.n	8007f0a <_scanf_float+0x192>
 8007ff6:	f04f 0a03 	mov.w	sl, #3
 8007ffa:	e786      	b.n	8007f0a <_scanf_float+0x192>
 8007ffc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008000:	4639      	mov	r1, r7
 8008002:	4640      	mov	r0, r8
 8008004:	4798      	blx	r3
 8008006:	2800      	cmp	r0, #0
 8008008:	f43f aedb 	beq.w	8007dc2 <_scanf_float+0x4a>
 800800c:	e6e6      	b.n	8007ddc <_scanf_float+0x64>
 800800e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008016:	463a      	mov	r2, r7
 8008018:	4640      	mov	r0, r8
 800801a:	4798      	blx	r3
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	3b01      	subs	r3, #1
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	e6e8      	b.n	8007df6 <_scanf_float+0x7e>
 8008024:	1e6b      	subs	r3, r5, #1
 8008026:	2b06      	cmp	r3, #6
 8008028:	d824      	bhi.n	8008074 <_scanf_float+0x2fc>
 800802a:	2d02      	cmp	r5, #2
 800802c:	d836      	bhi.n	800809c <_scanf_float+0x324>
 800802e:	9b01      	ldr	r3, [sp, #4]
 8008030:	429e      	cmp	r6, r3
 8008032:	f67f aee4 	bls.w	8007dfe <_scanf_float+0x86>
 8008036:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800803a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800803e:	463a      	mov	r2, r7
 8008040:	4640      	mov	r0, r8
 8008042:	4798      	blx	r3
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	3b01      	subs	r3, #1
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	e7f0      	b.n	800802e <_scanf_float+0x2b6>
 800804c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008050:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008054:	463a      	mov	r2, r7
 8008056:	4640      	mov	r0, r8
 8008058:	4798      	blx	r3
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	3b01      	subs	r3, #1
 800805e:	6123      	str	r3, [r4, #16]
 8008060:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008064:	fa5f fa8a 	uxtb.w	sl, sl
 8008068:	f1ba 0f02 	cmp.w	sl, #2
 800806c:	d1ee      	bne.n	800804c <_scanf_float+0x2d4>
 800806e:	3d03      	subs	r5, #3
 8008070:	b2ed      	uxtb	r5, r5
 8008072:	1b76      	subs	r6, r6, r5
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	05da      	lsls	r2, r3, #23
 8008078:	d530      	bpl.n	80080dc <_scanf_float+0x364>
 800807a:	055b      	lsls	r3, r3, #21
 800807c:	d511      	bpl.n	80080a2 <_scanf_float+0x32a>
 800807e:	9b01      	ldr	r3, [sp, #4]
 8008080:	429e      	cmp	r6, r3
 8008082:	f67f aebc 	bls.w	8007dfe <_scanf_float+0x86>
 8008086:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800808a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800808e:	463a      	mov	r2, r7
 8008090:	4640      	mov	r0, r8
 8008092:	4798      	blx	r3
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	3b01      	subs	r3, #1
 8008098:	6123      	str	r3, [r4, #16]
 800809a:	e7f0      	b.n	800807e <_scanf_float+0x306>
 800809c:	46aa      	mov	sl, r5
 800809e:	46b3      	mov	fp, r6
 80080a0:	e7de      	b.n	8008060 <_scanf_float+0x2e8>
 80080a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	2965      	cmp	r1, #101	@ 0x65
 80080aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80080ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80080b2:	6123      	str	r3, [r4, #16]
 80080b4:	d00c      	beq.n	80080d0 <_scanf_float+0x358>
 80080b6:	2945      	cmp	r1, #69	@ 0x45
 80080b8:	d00a      	beq.n	80080d0 <_scanf_float+0x358>
 80080ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080be:	463a      	mov	r2, r7
 80080c0:	4640      	mov	r0, r8
 80080c2:	4798      	blx	r3
 80080c4:	6923      	ldr	r3, [r4, #16]
 80080c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	1eb5      	subs	r5, r6, #2
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080d4:	463a      	mov	r2, r7
 80080d6:	4640      	mov	r0, r8
 80080d8:	4798      	blx	r3
 80080da:	462e      	mov	r6, r5
 80080dc:	6822      	ldr	r2, [r4, #0]
 80080de:	f012 0210 	ands.w	r2, r2, #16
 80080e2:	d001      	beq.n	80080e8 <_scanf_float+0x370>
 80080e4:	2000      	movs	r0, #0
 80080e6:	e68b      	b.n	8007e00 <_scanf_float+0x88>
 80080e8:	7032      	strb	r2, [r6, #0]
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80080f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080f4:	d11c      	bne.n	8008130 <_scanf_float+0x3b8>
 80080f6:	9b02      	ldr	r3, [sp, #8]
 80080f8:	454b      	cmp	r3, r9
 80080fa:	eba3 0209 	sub.w	r2, r3, r9
 80080fe:	d123      	bne.n	8008148 <_scanf_float+0x3d0>
 8008100:	9901      	ldr	r1, [sp, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	4640      	mov	r0, r8
 8008106:	f002 fc5b 	bl	800a9c0 <_strtod_r>
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	6821      	ldr	r1, [r4, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f011 0f02 	tst.w	r1, #2
 8008114:	ec57 6b10 	vmov	r6, r7, d0
 8008118:	f103 0204 	add.w	r2, r3, #4
 800811c:	d01f      	beq.n	800815e <_scanf_float+0x3e6>
 800811e:	9903      	ldr	r1, [sp, #12]
 8008120:	600a      	str	r2, [r1, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	e9c3 6700 	strd	r6, r7, [r3]
 8008128:	68e3      	ldr	r3, [r4, #12]
 800812a:	3301      	adds	r3, #1
 800812c:	60e3      	str	r3, [r4, #12]
 800812e:	e7d9      	b.n	80080e4 <_scanf_float+0x36c>
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0e4      	beq.n	8008100 <_scanf_float+0x388>
 8008136:	9905      	ldr	r1, [sp, #20]
 8008138:	230a      	movs	r3, #10
 800813a:	3101      	adds	r1, #1
 800813c:	4640      	mov	r0, r8
 800813e:	f002 fcbf 	bl	800aac0 <_strtol_r>
 8008142:	9b04      	ldr	r3, [sp, #16]
 8008144:	9e05      	ldr	r6, [sp, #20]
 8008146:	1ac2      	subs	r2, r0, r3
 8008148:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800814c:	429e      	cmp	r6, r3
 800814e:	bf28      	it	cs
 8008150:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008154:	4910      	ldr	r1, [pc, #64]	@ (8008198 <_scanf_float+0x420>)
 8008156:	4630      	mov	r0, r6
 8008158:	f000 f8e4 	bl	8008324 <siprintf>
 800815c:	e7d0      	b.n	8008100 <_scanf_float+0x388>
 800815e:	f011 0f04 	tst.w	r1, #4
 8008162:	9903      	ldr	r1, [sp, #12]
 8008164:	600a      	str	r2, [r1, #0]
 8008166:	d1dc      	bne.n	8008122 <_scanf_float+0x3aa>
 8008168:	681d      	ldr	r5, [r3, #0]
 800816a:	4632      	mov	r2, r6
 800816c:	463b      	mov	r3, r7
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 fcdb 	bl	8000b2c <__aeabi_dcmpun>
 8008176:	b128      	cbz	r0, 8008184 <_scanf_float+0x40c>
 8008178:	4808      	ldr	r0, [pc, #32]	@ (800819c <_scanf_float+0x424>)
 800817a:	f000 fa1b 	bl	80085b4 <nanf>
 800817e:	ed85 0a00 	vstr	s0, [r5]
 8008182:	e7d1      	b.n	8008128 <_scanf_float+0x3b0>
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fd2e 	bl	8000be8 <__aeabi_d2f>
 800818c:	6028      	str	r0, [r5, #0]
 800818e:	e7cb      	b.n	8008128 <_scanf_float+0x3b0>
 8008190:	f04f 0900 	mov.w	r9, #0
 8008194:	e629      	b.n	8007dea <_scanf_float+0x72>
 8008196:	bf00      	nop
 8008198:	0800bfa9 	.word	0x0800bfa9
 800819c:	0800c33d 	.word	0x0800c33d

080081a0 <std>:
 80081a0:	2300      	movs	r3, #0
 80081a2:	b510      	push	{r4, lr}
 80081a4:	4604      	mov	r4, r0
 80081a6:	e9c0 3300 	strd	r3, r3, [r0]
 80081aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ae:	6083      	str	r3, [r0, #8]
 80081b0:	8181      	strh	r1, [r0, #12]
 80081b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80081b4:	81c2      	strh	r2, [r0, #14]
 80081b6:	6183      	str	r3, [r0, #24]
 80081b8:	4619      	mov	r1, r3
 80081ba:	2208      	movs	r2, #8
 80081bc:	305c      	adds	r0, #92	@ 0x5c
 80081be:	f000 f914 	bl	80083ea <memset>
 80081c2:	4b0d      	ldr	r3, [pc, #52]	@ (80081f8 <std+0x58>)
 80081c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80081c6:	4b0d      	ldr	r3, [pc, #52]	@ (80081fc <std+0x5c>)
 80081c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008200 <std+0x60>)
 80081cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008204 <std+0x64>)
 80081d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80081d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008208 <std+0x68>)
 80081d4:	6224      	str	r4, [r4, #32]
 80081d6:	429c      	cmp	r4, r3
 80081d8:	d006      	beq.n	80081e8 <std+0x48>
 80081da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081de:	4294      	cmp	r4, r2
 80081e0:	d002      	beq.n	80081e8 <std+0x48>
 80081e2:	33d0      	adds	r3, #208	@ 0xd0
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d105      	bne.n	80081f4 <std+0x54>
 80081e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f0:	f000 b9ce 	b.w	8008590 <__retarget_lock_init_recursive>
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	bf00      	nop
 80081f8:	08008365 	.word	0x08008365
 80081fc:	08008387 	.word	0x08008387
 8008200:	080083bf 	.word	0x080083bf
 8008204:	080083e3 	.word	0x080083e3
 8008208:	20005c4c 	.word	0x20005c4c

0800820c <stdio_exit_handler>:
 800820c:	4a02      	ldr	r2, [pc, #8]	@ (8008218 <stdio_exit_handler+0xc>)
 800820e:	4903      	ldr	r1, [pc, #12]	@ (800821c <stdio_exit_handler+0x10>)
 8008210:	4803      	ldr	r0, [pc, #12]	@ (8008220 <stdio_exit_handler+0x14>)
 8008212:	f000 b869 	b.w	80082e8 <_fwalk_sglue>
 8008216:	bf00      	nop
 8008218:	20000010 	.word	0x20000010
 800821c:	0800ae7d 	.word	0x0800ae7d
 8008220:	20000020 	.word	0x20000020

08008224 <cleanup_stdio>:
 8008224:	6841      	ldr	r1, [r0, #4]
 8008226:	4b0c      	ldr	r3, [pc, #48]	@ (8008258 <cleanup_stdio+0x34>)
 8008228:	4299      	cmp	r1, r3
 800822a:	b510      	push	{r4, lr}
 800822c:	4604      	mov	r4, r0
 800822e:	d001      	beq.n	8008234 <cleanup_stdio+0x10>
 8008230:	f002 fe24 	bl	800ae7c <_fflush_r>
 8008234:	68a1      	ldr	r1, [r4, #8]
 8008236:	4b09      	ldr	r3, [pc, #36]	@ (800825c <cleanup_stdio+0x38>)
 8008238:	4299      	cmp	r1, r3
 800823a:	d002      	beq.n	8008242 <cleanup_stdio+0x1e>
 800823c:	4620      	mov	r0, r4
 800823e:	f002 fe1d 	bl	800ae7c <_fflush_r>
 8008242:	68e1      	ldr	r1, [r4, #12]
 8008244:	4b06      	ldr	r3, [pc, #24]	@ (8008260 <cleanup_stdio+0x3c>)
 8008246:	4299      	cmp	r1, r3
 8008248:	d004      	beq.n	8008254 <cleanup_stdio+0x30>
 800824a:	4620      	mov	r0, r4
 800824c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008250:	f002 be14 	b.w	800ae7c <_fflush_r>
 8008254:	bd10      	pop	{r4, pc}
 8008256:	bf00      	nop
 8008258:	20005c4c 	.word	0x20005c4c
 800825c:	20005cb4 	.word	0x20005cb4
 8008260:	20005d1c 	.word	0x20005d1c

08008264 <global_stdio_init.part.0>:
 8008264:	b510      	push	{r4, lr}
 8008266:	4b0b      	ldr	r3, [pc, #44]	@ (8008294 <global_stdio_init.part.0+0x30>)
 8008268:	4c0b      	ldr	r4, [pc, #44]	@ (8008298 <global_stdio_init.part.0+0x34>)
 800826a:	4a0c      	ldr	r2, [pc, #48]	@ (800829c <global_stdio_init.part.0+0x38>)
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	4620      	mov	r0, r4
 8008270:	2200      	movs	r2, #0
 8008272:	2104      	movs	r1, #4
 8008274:	f7ff ff94 	bl	80081a0 <std>
 8008278:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800827c:	2201      	movs	r2, #1
 800827e:	2109      	movs	r1, #9
 8008280:	f7ff ff8e 	bl	80081a0 <std>
 8008284:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008288:	2202      	movs	r2, #2
 800828a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800828e:	2112      	movs	r1, #18
 8008290:	f7ff bf86 	b.w	80081a0 <std>
 8008294:	20005d84 	.word	0x20005d84
 8008298:	20005c4c 	.word	0x20005c4c
 800829c:	0800820d 	.word	0x0800820d

080082a0 <__sfp_lock_acquire>:
 80082a0:	4801      	ldr	r0, [pc, #4]	@ (80082a8 <__sfp_lock_acquire+0x8>)
 80082a2:	f000 b976 	b.w	8008592 <__retarget_lock_acquire_recursive>
 80082a6:	bf00      	nop
 80082a8:	20005d8d 	.word	0x20005d8d

080082ac <__sfp_lock_release>:
 80082ac:	4801      	ldr	r0, [pc, #4]	@ (80082b4 <__sfp_lock_release+0x8>)
 80082ae:	f000 b971 	b.w	8008594 <__retarget_lock_release_recursive>
 80082b2:	bf00      	nop
 80082b4:	20005d8d 	.word	0x20005d8d

080082b8 <__sinit>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	4604      	mov	r4, r0
 80082bc:	f7ff fff0 	bl	80082a0 <__sfp_lock_acquire>
 80082c0:	6a23      	ldr	r3, [r4, #32]
 80082c2:	b11b      	cbz	r3, 80082cc <__sinit+0x14>
 80082c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c8:	f7ff bff0 	b.w	80082ac <__sfp_lock_release>
 80082cc:	4b04      	ldr	r3, [pc, #16]	@ (80082e0 <__sinit+0x28>)
 80082ce:	6223      	str	r3, [r4, #32]
 80082d0:	4b04      	ldr	r3, [pc, #16]	@ (80082e4 <__sinit+0x2c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1f5      	bne.n	80082c4 <__sinit+0xc>
 80082d8:	f7ff ffc4 	bl	8008264 <global_stdio_init.part.0>
 80082dc:	e7f2      	b.n	80082c4 <__sinit+0xc>
 80082de:	bf00      	nop
 80082e0:	08008225 	.word	0x08008225
 80082e4:	20005d84 	.word	0x20005d84

080082e8 <_fwalk_sglue>:
 80082e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ec:	4607      	mov	r7, r0
 80082ee:	4688      	mov	r8, r1
 80082f0:	4614      	mov	r4, r2
 80082f2:	2600      	movs	r6, #0
 80082f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082f8:	f1b9 0901 	subs.w	r9, r9, #1
 80082fc:	d505      	bpl.n	800830a <_fwalk_sglue+0x22>
 80082fe:	6824      	ldr	r4, [r4, #0]
 8008300:	2c00      	cmp	r4, #0
 8008302:	d1f7      	bne.n	80082f4 <_fwalk_sglue+0xc>
 8008304:	4630      	mov	r0, r6
 8008306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830a:	89ab      	ldrh	r3, [r5, #12]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d907      	bls.n	8008320 <_fwalk_sglue+0x38>
 8008310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008314:	3301      	adds	r3, #1
 8008316:	d003      	beq.n	8008320 <_fwalk_sglue+0x38>
 8008318:	4629      	mov	r1, r5
 800831a:	4638      	mov	r0, r7
 800831c:	47c0      	blx	r8
 800831e:	4306      	orrs	r6, r0
 8008320:	3568      	adds	r5, #104	@ 0x68
 8008322:	e7e9      	b.n	80082f8 <_fwalk_sglue+0x10>

08008324 <siprintf>:
 8008324:	b40e      	push	{r1, r2, r3}
 8008326:	b500      	push	{lr}
 8008328:	b09c      	sub	sp, #112	@ 0x70
 800832a:	ab1d      	add	r3, sp, #116	@ 0x74
 800832c:	9002      	str	r0, [sp, #8]
 800832e:	9006      	str	r0, [sp, #24]
 8008330:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008334:	4809      	ldr	r0, [pc, #36]	@ (800835c <siprintf+0x38>)
 8008336:	9107      	str	r1, [sp, #28]
 8008338:	9104      	str	r1, [sp, #16]
 800833a:	4909      	ldr	r1, [pc, #36]	@ (8008360 <siprintf+0x3c>)
 800833c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008340:	9105      	str	r1, [sp, #20]
 8008342:	6800      	ldr	r0, [r0, #0]
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	a902      	add	r1, sp, #8
 8008348:	f002 fc18 	bl	800ab7c <_svfiprintf_r>
 800834c:	9b02      	ldr	r3, [sp, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	b01c      	add	sp, #112	@ 0x70
 8008354:	f85d eb04 	ldr.w	lr, [sp], #4
 8008358:	b003      	add	sp, #12
 800835a:	4770      	bx	lr
 800835c:	2000001c 	.word	0x2000001c
 8008360:	ffff0208 	.word	0xffff0208

08008364 <__sread>:
 8008364:	b510      	push	{r4, lr}
 8008366:	460c      	mov	r4, r1
 8008368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836c:	f000 f8c2 	bl	80084f4 <_read_r>
 8008370:	2800      	cmp	r0, #0
 8008372:	bfab      	itete	ge
 8008374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008376:	89a3      	ldrhlt	r3, [r4, #12]
 8008378:	181b      	addge	r3, r3, r0
 800837a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800837e:	bfac      	ite	ge
 8008380:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008382:	81a3      	strhlt	r3, [r4, #12]
 8008384:	bd10      	pop	{r4, pc}

08008386 <__swrite>:
 8008386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838a:	461f      	mov	r7, r3
 800838c:	898b      	ldrh	r3, [r1, #12]
 800838e:	05db      	lsls	r3, r3, #23
 8008390:	4605      	mov	r5, r0
 8008392:	460c      	mov	r4, r1
 8008394:	4616      	mov	r6, r2
 8008396:	d505      	bpl.n	80083a4 <__swrite+0x1e>
 8008398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800839c:	2302      	movs	r3, #2
 800839e:	2200      	movs	r2, #0
 80083a0:	f000 f896 	bl	80084d0 <_lseek_r>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083ae:	81a3      	strh	r3, [r4, #12]
 80083b0:	4632      	mov	r2, r6
 80083b2:	463b      	mov	r3, r7
 80083b4:	4628      	mov	r0, r5
 80083b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ba:	f000 b8ad 	b.w	8008518 <_write_r>

080083be <__sseek>:
 80083be:	b510      	push	{r4, lr}
 80083c0:	460c      	mov	r4, r1
 80083c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c6:	f000 f883 	bl	80084d0 <_lseek_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	bf15      	itete	ne
 80083d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083da:	81a3      	strheq	r3, [r4, #12]
 80083dc:	bf18      	it	ne
 80083de:	81a3      	strhne	r3, [r4, #12]
 80083e0:	bd10      	pop	{r4, pc}

080083e2 <__sclose>:
 80083e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e6:	f000 b80d 	b.w	8008404 <_close_r>

080083ea <memset>:
 80083ea:	4402      	add	r2, r0
 80083ec:	4603      	mov	r3, r0
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d100      	bne.n	80083f4 <memset+0xa>
 80083f2:	4770      	bx	lr
 80083f4:	f803 1b01 	strb.w	r1, [r3], #1
 80083f8:	e7f9      	b.n	80083ee <memset+0x4>
	...

080083fc <_localeconv_r>:
 80083fc:	4800      	ldr	r0, [pc, #0]	@ (8008400 <_localeconv_r+0x4>)
 80083fe:	4770      	bx	lr
 8008400:	2000015c 	.word	0x2000015c

08008404 <_close_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d06      	ldr	r5, [pc, #24]	@ (8008420 <_close_r+0x1c>)
 8008408:	2300      	movs	r3, #0
 800840a:	4604      	mov	r4, r0
 800840c:	4608      	mov	r0, r1
 800840e:	602b      	str	r3, [r5, #0]
 8008410:	f7f9 fd7c 	bl	8001f0c <_close>
 8008414:	1c43      	adds	r3, r0, #1
 8008416:	d102      	bne.n	800841e <_close_r+0x1a>
 8008418:	682b      	ldr	r3, [r5, #0]
 800841a:	b103      	cbz	r3, 800841e <_close_r+0x1a>
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	bd38      	pop	{r3, r4, r5, pc}
 8008420:	20005d88 	.word	0x20005d88

08008424 <_reclaim_reent>:
 8008424:	4b29      	ldr	r3, [pc, #164]	@ (80084cc <_reclaim_reent+0xa8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4283      	cmp	r3, r0
 800842a:	b570      	push	{r4, r5, r6, lr}
 800842c:	4604      	mov	r4, r0
 800842e:	d04b      	beq.n	80084c8 <_reclaim_reent+0xa4>
 8008430:	69c3      	ldr	r3, [r0, #28]
 8008432:	b1ab      	cbz	r3, 8008460 <_reclaim_reent+0x3c>
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	b16b      	cbz	r3, 8008454 <_reclaim_reent+0x30>
 8008438:	2500      	movs	r5, #0
 800843a:	69e3      	ldr	r3, [r4, #28]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	5959      	ldr	r1, [r3, r5]
 8008440:	2900      	cmp	r1, #0
 8008442:	d13b      	bne.n	80084bc <_reclaim_reent+0x98>
 8008444:	3504      	adds	r5, #4
 8008446:	2d80      	cmp	r5, #128	@ 0x80
 8008448:	d1f7      	bne.n	800843a <_reclaim_reent+0x16>
 800844a:	69e3      	ldr	r3, [r4, #28]
 800844c:	4620      	mov	r0, r4
 800844e:	68d9      	ldr	r1, [r3, #12]
 8008450:	f000 ff02 	bl	8009258 <_free_r>
 8008454:	69e3      	ldr	r3, [r4, #28]
 8008456:	6819      	ldr	r1, [r3, #0]
 8008458:	b111      	cbz	r1, 8008460 <_reclaim_reent+0x3c>
 800845a:	4620      	mov	r0, r4
 800845c:	f000 fefc 	bl	8009258 <_free_r>
 8008460:	6961      	ldr	r1, [r4, #20]
 8008462:	b111      	cbz	r1, 800846a <_reclaim_reent+0x46>
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fef7 	bl	8009258 <_free_r>
 800846a:	69e1      	ldr	r1, [r4, #28]
 800846c:	b111      	cbz	r1, 8008474 <_reclaim_reent+0x50>
 800846e:	4620      	mov	r0, r4
 8008470:	f000 fef2 	bl	8009258 <_free_r>
 8008474:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008476:	b111      	cbz	r1, 800847e <_reclaim_reent+0x5a>
 8008478:	4620      	mov	r0, r4
 800847a:	f000 feed 	bl	8009258 <_free_r>
 800847e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008480:	b111      	cbz	r1, 8008488 <_reclaim_reent+0x64>
 8008482:	4620      	mov	r0, r4
 8008484:	f000 fee8 	bl	8009258 <_free_r>
 8008488:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800848a:	b111      	cbz	r1, 8008492 <_reclaim_reent+0x6e>
 800848c:	4620      	mov	r0, r4
 800848e:	f000 fee3 	bl	8009258 <_free_r>
 8008492:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008494:	b111      	cbz	r1, 800849c <_reclaim_reent+0x78>
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fede 	bl	8009258 <_free_r>
 800849c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800849e:	b111      	cbz	r1, 80084a6 <_reclaim_reent+0x82>
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fed9 	bl	8009258 <_free_r>
 80084a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80084a8:	b111      	cbz	r1, 80084b0 <_reclaim_reent+0x8c>
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 fed4 	bl	8009258 <_free_r>
 80084b0:	6a23      	ldr	r3, [r4, #32]
 80084b2:	b14b      	cbz	r3, 80084c8 <_reclaim_reent+0xa4>
 80084b4:	4620      	mov	r0, r4
 80084b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084ba:	4718      	bx	r3
 80084bc:	680e      	ldr	r6, [r1, #0]
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 feca 	bl	8009258 <_free_r>
 80084c4:	4631      	mov	r1, r6
 80084c6:	e7bb      	b.n	8008440 <_reclaim_reent+0x1c>
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
 80084ca:	bf00      	nop
 80084cc:	2000001c 	.word	0x2000001c

080084d0 <_lseek_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d07      	ldr	r5, [pc, #28]	@ (80084f0 <_lseek_r+0x20>)
 80084d4:	4604      	mov	r4, r0
 80084d6:	4608      	mov	r0, r1
 80084d8:	4611      	mov	r1, r2
 80084da:	2200      	movs	r2, #0
 80084dc:	602a      	str	r2, [r5, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	f7f9 fd20 	bl	8001f24 <_lseek>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_lseek_r+0x1e>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_lseek_r+0x1e>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20005d88 	.word	0x20005d88

080084f4 <_read_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d07      	ldr	r5, [pc, #28]	@ (8008514 <_read_r+0x20>)
 80084f8:	4604      	mov	r4, r0
 80084fa:	4608      	mov	r0, r1
 80084fc:	4611      	mov	r1, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	602a      	str	r2, [r5, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	f7f9 fce6 	bl	8001ed4 <_read>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_read_r+0x1e>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_read_r+0x1e>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	20005d88 	.word	0x20005d88

08008518 <_write_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d07      	ldr	r5, [pc, #28]	@ (8008538 <_write_r+0x20>)
 800851c:	4604      	mov	r4, r0
 800851e:	4608      	mov	r0, r1
 8008520:	4611      	mov	r1, r2
 8008522:	2200      	movs	r2, #0
 8008524:	602a      	str	r2, [r5, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	f7f9 fce2 	bl	8001ef0 <_write>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_write_r+0x1e>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_write_r+0x1e>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20005d88 	.word	0x20005d88

0800853c <__errno>:
 800853c:	4b01      	ldr	r3, [pc, #4]	@ (8008544 <__errno+0x8>)
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	2000001c 	.word	0x2000001c

08008548 <__libc_init_array>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	4d0d      	ldr	r5, [pc, #52]	@ (8008580 <__libc_init_array+0x38>)
 800854c:	4c0d      	ldr	r4, [pc, #52]	@ (8008584 <__libc_init_array+0x3c>)
 800854e:	1b64      	subs	r4, r4, r5
 8008550:	10a4      	asrs	r4, r4, #2
 8008552:	2600      	movs	r6, #0
 8008554:	42a6      	cmp	r6, r4
 8008556:	d109      	bne.n	800856c <__libc_init_array+0x24>
 8008558:	4d0b      	ldr	r5, [pc, #44]	@ (8008588 <__libc_init_array+0x40>)
 800855a:	4c0c      	ldr	r4, [pc, #48]	@ (800858c <__libc_init_array+0x44>)
 800855c:	f003 fb72 	bl	800bc44 <_init>
 8008560:	1b64      	subs	r4, r4, r5
 8008562:	10a4      	asrs	r4, r4, #2
 8008564:	2600      	movs	r6, #0
 8008566:	42a6      	cmp	r6, r4
 8008568:	d105      	bne.n	8008576 <__libc_init_array+0x2e>
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008570:	4798      	blx	r3
 8008572:	3601      	adds	r6, #1
 8008574:	e7ee      	b.n	8008554 <__libc_init_array+0xc>
 8008576:	f855 3b04 	ldr.w	r3, [r5], #4
 800857a:	4798      	blx	r3
 800857c:	3601      	adds	r6, #1
 800857e:	e7f2      	b.n	8008566 <__libc_init_array+0x1e>
 8008580:	0800c3a8 	.word	0x0800c3a8
 8008584:	0800c3a8 	.word	0x0800c3a8
 8008588:	0800c3a8 	.word	0x0800c3a8
 800858c:	0800c3ac 	.word	0x0800c3ac

08008590 <__retarget_lock_init_recursive>:
 8008590:	4770      	bx	lr

08008592 <__retarget_lock_acquire_recursive>:
 8008592:	4770      	bx	lr

08008594 <__retarget_lock_release_recursive>:
 8008594:	4770      	bx	lr

08008596 <memcpy>:
 8008596:	440a      	add	r2, r1
 8008598:	4291      	cmp	r1, r2
 800859a:	f100 33ff 	add.w	r3, r0, #4294967295
 800859e:	d100      	bne.n	80085a2 <memcpy+0xc>
 80085a0:	4770      	bx	lr
 80085a2:	b510      	push	{r4, lr}
 80085a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ac:	4291      	cmp	r1, r2
 80085ae:	d1f9      	bne.n	80085a4 <memcpy+0xe>
 80085b0:	bd10      	pop	{r4, pc}
	...

080085b4 <nanf>:
 80085b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80085bc <nanf+0x8>
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	7fc00000 	.word	0x7fc00000

080085c0 <quorem>:
 80085c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	6903      	ldr	r3, [r0, #16]
 80085c6:	690c      	ldr	r4, [r1, #16]
 80085c8:	42a3      	cmp	r3, r4
 80085ca:	4607      	mov	r7, r0
 80085cc:	db7e      	blt.n	80086cc <quorem+0x10c>
 80085ce:	3c01      	subs	r4, #1
 80085d0:	f101 0814 	add.w	r8, r1, #20
 80085d4:	00a3      	lsls	r3, r4, #2
 80085d6:	f100 0514 	add.w	r5, r0, #20
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085ea:	3301      	adds	r3, #1
 80085ec:	429a      	cmp	r2, r3
 80085ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80085f6:	d32e      	bcc.n	8008656 <quorem+0x96>
 80085f8:	f04f 0a00 	mov.w	sl, #0
 80085fc:	46c4      	mov	ip, r8
 80085fe:	46ae      	mov	lr, r5
 8008600:	46d3      	mov	fp, sl
 8008602:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008606:	b298      	uxth	r0, r3
 8008608:	fb06 a000 	mla	r0, r6, r0, sl
 800860c:	0c02      	lsrs	r2, r0, #16
 800860e:	0c1b      	lsrs	r3, r3, #16
 8008610:	fb06 2303 	mla	r3, r6, r3, r2
 8008614:	f8de 2000 	ldr.w	r2, [lr]
 8008618:	b280      	uxth	r0, r0
 800861a:	b292      	uxth	r2, r2
 800861c:	1a12      	subs	r2, r2, r0
 800861e:	445a      	add	r2, fp
 8008620:	f8de 0000 	ldr.w	r0, [lr]
 8008624:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008628:	b29b      	uxth	r3, r3
 800862a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800862e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008632:	b292      	uxth	r2, r2
 8008634:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008638:	45e1      	cmp	r9, ip
 800863a:	f84e 2b04 	str.w	r2, [lr], #4
 800863e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008642:	d2de      	bcs.n	8008602 <quorem+0x42>
 8008644:	9b00      	ldr	r3, [sp, #0]
 8008646:	58eb      	ldr	r3, [r5, r3]
 8008648:	b92b      	cbnz	r3, 8008656 <quorem+0x96>
 800864a:	9b01      	ldr	r3, [sp, #4]
 800864c:	3b04      	subs	r3, #4
 800864e:	429d      	cmp	r5, r3
 8008650:	461a      	mov	r2, r3
 8008652:	d32f      	bcc.n	80086b4 <quorem+0xf4>
 8008654:	613c      	str	r4, [r7, #16]
 8008656:	4638      	mov	r0, r7
 8008658:	f001 f9c2 	bl	80099e0 <__mcmp>
 800865c:	2800      	cmp	r0, #0
 800865e:	db25      	blt.n	80086ac <quorem+0xec>
 8008660:	4629      	mov	r1, r5
 8008662:	2000      	movs	r0, #0
 8008664:	f858 2b04 	ldr.w	r2, [r8], #4
 8008668:	f8d1 c000 	ldr.w	ip, [r1]
 800866c:	fa1f fe82 	uxth.w	lr, r2
 8008670:	fa1f f38c 	uxth.w	r3, ip
 8008674:	eba3 030e 	sub.w	r3, r3, lr
 8008678:	4403      	add	r3, r0
 800867a:	0c12      	lsrs	r2, r2, #16
 800867c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008680:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008684:	b29b      	uxth	r3, r3
 8008686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800868a:	45c1      	cmp	r9, r8
 800868c:	f841 3b04 	str.w	r3, [r1], #4
 8008690:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008694:	d2e6      	bcs.n	8008664 <quorem+0xa4>
 8008696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800869a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800869e:	b922      	cbnz	r2, 80086aa <quorem+0xea>
 80086a0:	3b04      	subs	r3, #4
 80086a2:	429d      	cmp	r5, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	d30b      	bcc.n	80086c0 <quorem+0x100>
 80086a8:	613c      	str	r4, [r7, #16]
 80086aa:	3601      	adds	r6, #1
 80086ac:	4630      	mov	r0, r6
 80086ae:	b003      	add	sp, #12
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	3b04      	subs	r3, #4
 80086b8:	2a00      	cmp	r2, #0
 80086ba:	d1cb      	bne.n	8008654 <quorem+0x94>
 80086bc:	3c01      	subs	r4, #1
 80086be:	e7c6      	b.n	800864e <quorem+0x8e>
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	3b04      	subs	r3, #4
 80086c4:	2a00      	cmp	r2, #0
 80086c6:	d1ef      	bne.n	80086a8 <quorem+0xe8>
 80086c8:	3c01      	subs	r4, #1
 80086ca:	e7ea      	b.n	80086a2 <quorem+0xe2>
 80086cc:	2000      	movs	r0, #0
 80086ce:	e7ee      	b.n	80086ae <quorem+0xee>

080086d0 <_dtoa_r>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	69c7      	ldr	r7, [r0, #28]
 80086d6:	b099      	sub	sp, #100	@ 0x64
 80086d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80086dc:	ec55 4b10 	vmov	r4, r5, d0
 80086e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80086e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80086e4:	4683      	mov	fp, r0
 80086e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80086e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086ea:	b97f      	cbnz	r7, 800870c <_dtoa_r+0x3c>
 80086ec:	2010      	movs	r0, #16
 80086ee:	f000 fdfd 	bl	80092ec <malloc>
 80086f2:	4602      	mov	r2, r0
 80086f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80086f8:	b920      	cbnz	r0, 8008704 <_dtoa_r+0x34>
 80086fa:	4ba7      	ldr	r3, [pc, #668]	@ (8008998 <_dtoa_r+0x2c8>)
 80086fc:	21ef      	movs	r1, #239	@ 0xef
 80086fe:	48a7      	ldr	r0, [pc, #668]	@ (800899c <_dtoa_r+0x2cc>)
 8008700:	f002 fc2a 	bl	800af58 <__assert_func>
 8008704:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008708:	6007      	str	r7, [r0, #0]
 800870a:	60c7      	str	r7, [r0, #12]
 800870c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008710:	6819      	ldr	r1, [r3, #0]
 8008712:	b159      	cbz	r1, 800872c <_dtoa_r+0x5c>
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	604a      	str	r2, [r1, #4]
 8008718:	2301      	movs	r3, #1
 800871a:	4093      	lsls	r3, r2
 800871c:	608b      	str	r3, [r1, #8]
 800871e:	4658      	mov	r0, fp
 8008720:	f000 feda 	bl	80094d8 <_Bfree>
 8008724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	1e2b      	subs	r3, r5, #0
 800872e:	bfb9      	ittee	lt
 8008730:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008734:	9303      	strlt	r3, [sp, #12]
 8008736:	2300      	movge	r3, #0
 8008738:	6033      	strge	r3, [r6, #0]
 800873a:	9f03      	ldr	r7, [sp, #12]
 800873c:	4b98      	ldr	r3, [pc, #608]	@ (80089a0 <_dtoa_r+0x2d0>)
 800873e:	bfbc      	itt	lt
 8008740:	2201      	movlt	r2, #1
 8008742:	6032      	strlt	r2, [r6, #0]
 8008744:	43bb      	bics	r3, r7
 8008746:	d112      	bne.n	800876e <_dtoa_r+0x9e>
 8008748:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800874a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008754:	4323      	orrs	r3, r4
 8008756:	f000 854d 	beq.w	80091f4 <_dtoa_r+0xb24>
 800875a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800875c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80089b4 <_dtoa_r+0x2e4>
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 854f 	beq.w	8009204 <_dtoa_r+0xb34>
 8008766:	f10a 0303 	add.w	r3, sl, #3
 800876a:	f000 bd49 	b.w	8009200 <_dtoa_r+0xb30>
 800876e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008772:	2200      	movs	r2, #0
 8008774:	ec51 0b17 	vmov	r0, r1, d7
 8008778:	2300      	movs	r3, #0
 800877a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800877e:	f7f8 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008782:	4680      	mov	r8, r0
 8008784:	b158      	cbz	r0, 800879e <_dtoa_r+0xce>
 8008786:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008788:	2301      	movs	r3, #1
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800878e:	b113      	cbz	r3, 8008796 <_dtoa_r+0xc6>
 8008790:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008792:	4b84      	ldr	r3, [pc, #528]	@ (80089a4 <_dtoa_r+0x2d4>)
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80089b8 <_dtoa_r+0x2e8>
 800879a:	f000 bd33 	b.w	8009204 <_dtoa_r+0xb34>
 800879e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80087a2:	aa16      	add	r2, sp, #88	@ 0x58
 80087a4:	a917      	add	r1, sp, #92	@ 0x5c
 80087a6:	4658      	mov	r0, fp
 80087a8:	f001 fa3a 	bl	8009c20 <__d2b>
 80087ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80087b0:	4681      	mov	r9, r0
 80087b2:	2e00      	cmp	r6, #0
 80087b4:	d077      	beq.n	80088a6 <_dtoa_r+0x1d6>
 80087b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80087bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80087c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80087cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80087d0:	4619      	mov	r1, r3
 80087d2:	2200      	movs	r2, #0
 80087d4:	4b74      	ldr	r3, [pc, #464]	@ (80089a8 <_dtoa_r+0x2d8>)
 80087d6:	f7f7 fd57 	bl	8000288 <__aeabi_dsub>
 80087da:	a369      	add	r3, pc, #420	@ (adr r3, 8008980 <_dtoa_r+0x2b0>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	f7f7 ff0a 	bl	80005f8 <__aeabi_dmul>
 80087e4:	a368      	add	r3, pc, #416	@ (adr r3, 8008988 <_dtoa_r+0x2b8>)
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	f7f7 fd4f 	bl	800028c <__adddf3>
 80087ee:	4604      	mov	r4, r0
 80087f0:	4630      	mov	r0, r6
 80087f2:	460d      	mov	r5, r1
 80087f4:	f7f7 fe96 	bl	8000524 <__aeabi_i2d>
 80087f8:	a365      	add	r3, pc, #404	@ (adr r3, 8008990 <_dtoa_r+0x2c0>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f7f7 fefb 	bl	80005f8 <__aeabi_dmul>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f7 fd3f 	bl	800028c <__adddf3>
 800880e:	4604      	mov	r4, r0
 8008810:	460d      	mov	r5, r1
 8008812:	f7f8 f9a1 	bl	8000b58 <__aeabi_d2iz>
 8008816:	2200      	movs	r2, #0
 8008818:	4607      	mov	r7, r0
 800881a:	2300      	movs	r3, #0
 800881c:	4620      	mov	r0, r4
 800881e:	4629      	mov	r1, r5
 8008820:	f7f8 f95c 	bl	8000adc <__aeabi_dcmplt>
 8008824:	b140      	cbz	r0, 8008838 <_dtoa_r+0x168>
 8008826:	4638      	mov	r0, r7
 8008828:	f7f7 fe7c 	bl	8000524 <__aeabi_i2d>
 800882c:	4622      	mov	r2, r4
 800882e:	462b      	mov	r3, r5
 8008830:	f7f8 f94a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008834:	b900      	cbnz	r0, 8008838 <_dtoa_r+0x168>
 8008836:	3f01      	subs	r7, #1
 8008838:	2f16      	cmp	r7, #22
 800883a:	d851      	bhi.n	80088e0 <_dtoa_r+0x210>
 800883c:	4b5b      	ldr	r3, [pc, #364]	@ (80089ac <_dtoa_r+0x2dc>)
 800883e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800884a:	f7f8 f947 	bl	8000adc <__aeabi_dcmplt>
 800884e:	2800      	cmp	r0, #0
 8008850:	d048      	beq.n	80088e4 <_dtoa_r+0x214>
 8008852:	3f01      	subs	r7, #1
 8008854:	2300      	movs	r3, #0
 8008856:	9312      	str	r3, [sp, #72]	@ 0x48
 8008858:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800885a:	1b9b      	subs	r3, r3, r6
 800885c:	1e5a      	subs	r2, r3, #1
 800885e:	bf44      	itt	mi
 8008860:	f1c3 0801 	rsbmi	r8, r3, #1
 8008864:	2300      	movmi	r3, #0
 8008866:	9208      	str	r2, [sp, #32]
 8008868:	bf54      	ite	pl
 800886a:	f04f 0800 	movpl.w	r8, #0
 800886e:	9308      	strmi	r3, [sp, #32]
 8008870:	2f00      	cmp	r7, #0
 8008872:	db39      	blt.n	80088e8 <_dtoa_r+0x218>
 8008874:	9b08      	ldr	r3, [sp, #32]
 8008876:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008878:	443b      	add	r3, r7
 800887a:	9308      	str	r3, [sp, #32]
 800887c:	2300      	movs	r3, #0
 800887e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008882:	2b09      	cmp	r3, #9
 8008884:	d864      	bhi.n	8008950 <_dtoa_r+0x280>
 8008886:	2b05      	cmp	r3, #5
 8008888:	bfc4      	itt	gt
 800888a:	3b04      	subgt	r3, #4
 800888c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800888e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008890:	f1a3 0302 	sub.w	r3, r3, #2
 8008894:	bfcc      	ite	gt
 8008896:	2400      	movgt	r4, #0
 8008898:	2401      	movle	r4, #1
 800889a:	2b03      	cmp	r3, #3
 800889c:	d863      	bhi.n	8008966 <_dtoa_r+0x296>
 800889e:	e8df f003 	tbb	[pc, r3]
 80088a2:	372a      	.short	0x372a
 80088a4:	5535      	.short	0x5535
 80088a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80088aa:	441e      	add	r6, r3
 80088ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80088b0:	2b20      	cmp	r3, #32
 80088b2:	bfc1      	itttt	gt
 80088b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80088b8:	409f      	lslgt	r7, r3
 80088ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80088be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80088c2:	bfd6      	itet	le
 80088c4:	f1c3 0320 	rsble	r3, r3, #32
 80088c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80088cc:	fa04 f003 	lslle.w	r0, r4, r3
 80088d0:	f7f7 fe18 	bl	8000504 <__aeabi_ui2d>
 80088d4:	2201      	movs	r2, #1
 80088d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088da:	3e01      	subs	r6, #1
 80088dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80088de:	e777      	b.n	80087d0 <_dtoa_r+0x100>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e7b8      	b.n	8008856 <_dtoa_r+0x186>
 80088e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80088e6:	e7b7      	b.n	8008858 <_dtoa_r+0x188>
 80088e8:	427b      	negs	r3, r7
 80088ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80088ec:	2300      	movs	r3, #0
 80088ee:	eba8 0807 	sub.w	r8, r8, r7
 80088f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088f4:	e7c4      	b.n	8008880 <_dtoa_r+0x1b0>
 80088f6:	2300      	movs	r3, #0
 80088f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dc35      	bgt.n	800896c <_dtoa_r+0x29c>
 8008900:	2301      	movs	r3, #1
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	9307      	str	r3, [sp, #28]
 8008906:	461a      	mov	r2, r3
 8008908:	920e      	str	r2, [sp, #56]	@ 0x38
 800890a:	e00b      	b.n	8008924 <_dtoa_r+0x254>
 800890c:	2301      	movs	r3, #1
 800890e:	e7f3      	b.n	80088f8 <_dtoa_r+0x228>
 8008910:	2300      	movs	r3, #0
 8008912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008916:	18fb      	adds	r3, r7, r3
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	3301      	adds	r3, #1
 800891c:	2b01      	cmp	r3, #1
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	bfb8      	it	lt
 8008922:	2301      	movlt	r3, #1
 8008924:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008928:	2100      	movs	r1, #0
 800892a:	2204      	movs	r2, #4
 800892c:	f102 0514 	add.w	r5, r2, #20
 8008930:	429d      	cmp	r5, r3
 8008932:	d91f      	bls.n	8008974 <_dtoa_r+0x2a4>
 8008934:	6041      	str	r1, [r0, #4]
 8008936:	4658      	mov	r0, fp
 8008938:	f000 fd8e 	bl	8009458 <_Balloc>
 800893c:	4682      	mov	sl, r0
 800893e:	2800      	cmp	r0, #0
 8008940:	d13c      	bne.n	80089bc <_dtoa_r+0x2ec>
 8008942:	4b1b      	ldr	r3, [pc, #108]	@ (80089b0 <_dtoa_r+0x2e0>)
 8008944:	4602      	mov	r2, r0
 8008946:	f240 11af 	movw	r1, #431	@ 0x1af
 800894a:	e6d8      	b.n	80086fe <_dtoa_r+0x2e>
 800894c:	2301      	movs	r3, #1
 800894e:	e7e0      	b.n	8008912 <_dtoa_r+0x242>
 8008950:	2401      	movs	r4, #1
 8008952:	2300      	movs	r3, #0
 8008954:	9309      	str	r3, [sp, #36]	@ 0x24
 8008956:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008958:	f04f 33ff 	mov.w	r3, #4294967295
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	9307      	str	r3, [sp, #28]
 8008960:	2200      	movs	r2, #0
 8008962:	2312      	movs	r3, #18
 8008964:	e7d0      	b.n	8008908 <_dtoa_r+0x238>
 8008966:	2301      	movs	r3, #1
 8008968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800896a:	e7f5      	b.n	8008958 <_dtoa_r+0x288>
 800896c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	9307      	str	r3, [sp, #28]
 8008972:	e7d7      	b.n	8008924 <_dtoa_r+0x254>
 8008974:	3101      	adds	r1, #1
 8008976:	0052      	lsls	r2, r2, #1
 8008978:	e7d8      	b.n	800892c <_dtoa_r+0x25c>
 800897a:	bf00      	nop
 800897c:	f3af 8000 	nop.w
 8008980:	636f4361 	.word	0x636f4361
 8008984:	3fd287a7 	.word	0x3fd287a7
 8008988:	8b60c8b3 	.word	0x8b60c8b3
 800898c:	3fc68a28 	.word	0x3fc68a28
 8008990:	509f79fb 	.word	0x509f79fb
 8008994:	3fd34413 	.word	0x3fd34413
 8008998:	0800bfbb 	.word	0x0800bfbb
 800899c:	0800bfd2 	.word	0x0800bfd2
 80089a0:	7ff00000 	.word	0x7ff00000
 80089a4:	0800bf86 	.word	0x0800bf86
 80089a8:	3ff80000 	.word	0x3ff80000
 80089ac:	0800c0c8 	.word	0x0800c0c8
 80089b0:	0800c02a 	.word	0x0800c02a
 80089b4:	0800bfb7 	.word	0x0800bfb7
 80089b8:	0800bf85 	.word	0x0800bf85
 80089bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089c0:	6018      	str	r0, [r3, #0]
 80089c2:	9b07      	ldr	r3, [sp, #28]
 80089c4:	2b0e      	cmp	r3, #14
 80089c6:	f200 80a4 	bhi.w	8008b12 <_dtoa_r+0x442>
 80089ca:	2c00      	cmp	r4, #0
 80089cc:	f000 80a1 	beq.w	8008b12 <_dtoa_r+0x442>
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	dd33      	ble.n	8008a3c <_dtoa_r+0x36c>
 80089d4:	4bad      	ldr	r3, [pc, #692]	@ (8008c8c <_dtoa_r+0x5bc>)
 80089d6:	f007 020f 	and.w	r2, r7, #15
 80089da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089de:	ed93 7b00 	vldr	d7, [r3]
 80089e2:	05f8      	lsls	r0, r7, #23
 80089e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089ec:	d516      	bpl.n	8008a1c <_dtoa_r+0x34c>
 80089ee:	4ba8      	ldr	r3, [pc, #672]	@ (8008c90 <_dtoa_r+0x5c0>)
 80089f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089f8:	f7f7 ff28 	bl	800084c <__aeabi_ddiv>
 80089fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a00:	f004 040f 	and.w	r4, r4, #15
 8008a04:	2603      	movs	r6, #3
 8008a06:	4da2      	ldr	r5, [pc, #648]	@ (8008c90 <_dtoa_r+0x5c0>)
 8008a08:	b954      	cbnz	r4, 8008a20 <_dtoa_r+0x350>
 8008a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a12:	f7f7 ff1b 	bl	800084c <__aeabi_ddiv>
 8008a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a1a:	e028      	b.n	8008a6e <_dtoa_r+0x39e>
 8008a1c:	2602      	movs	r6, #2
 8008a1e:	e7f2      	b.n	8008a06 <_dtoa_r+0x336>
 8008a20:	07e1      	lsls	r1, r4, #31
 8008a22:	d508      	bpl.n	8008a36 <_dtoa_r+0x366>
 8008a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a2c:	f7f7 fde4 	bl	80005f8 <__aeabi_dmul>
 8008a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a34:	3601      	adds	r6, #1
 8008a36:	1064      	asrs	r4, r4, #1
 8008a38:	3508      	adds	r5, #8
 8008a3a:	e7e5      	b.n	8008a08 <_dtoa_r+0x338>
 8008a3c:	f000 80d2 	beq.w	8008be4 <_dtoa_r+0x514>
 8008a40:	427c      	negs	r4, r7
 8008a42:	4b92      	ldr	r3, [pc, #584]	@ (8008c8c <_dtoa_r+0x5bc>)
 8008a44:	4d92      	ldr	r5, [pc, #584]	@ (8008c90 <_dtoa_r+0x5c0>)
 8008a46:	f004 020f 	and.w	r2, r4, #15
 8008a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a56:	f7f7 fdcf 	bl	80005f8 <__aeabi_dmul>
 8008a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a5e:	1124      	asrs	r4, r4, #4
 8008a60:	2300      	movs	r3, #0
 8008a62:	2602      	movs	r6, #2
 8008a64:	2c00      	cmp	r4, #0
 8008a66:	f040 80b2 	bne.w	8008bce <_dtoa_r+0x4fe>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1d3      	bne.n	8008a16 <_dtoa_r+0x346>
 8008a6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 80b7 	beq.w	8008be8 <_dtoa_r+0x518>
 8008a7a:	4b86      	ldr	r3, [pc, #536]	@ (8008c94 <_dtoa_r+0x5c4>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	4620      	mov	r0, r4
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7f8 f82b 	bl	8000adc <__aeabi_dcmplt>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	f000 80ae 	beq.w	8008be8 <_dtoa_r+0x518>
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f000 80aa 	beq.w	8008be8 <_dtoa_r+0x518>
 8008a94:	9b00      	ldr	r3, [sp, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dd37      	ble.n	8008b0a <_dtoa_r+0x43a>
 8008a9a:	1e7b      	subs	r3, r7, #1
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4b7d      	ldr	r3, [pc, #500]	@ (8008c98 <_dtoa_r+0x5c8>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	f7f7 fda7 	bl	80005f8 <__aeabi_dmul>
 8008aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aae:	9c00      	ldr	r4, [sp, #0]
 8008ab0:	3601      	adds	r6, #1
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7f7 fd36 	bl	8000524 <__aeabi_i2d>
 8008ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008abc:	f7f7 fd9c 	bl	80005f8 <__aeabi_dmul>
 8008ac0:	4b76      	ldr	r3, [pc, #472]	@ (8008c9c <_dtoa_r+0x5cc>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f7f7 fbe2 	bl	800028c <__adddf3>
 8008ac8:	4605      	mov	r5, r0
 8008aca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ace:	2c00      	cmp	r4, #0
 8008ad0:	f040 808d 	bne.w	8008bee <_dtoa_r+0x51e>
 8008ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad8:	4b71      	ldr	r3, [pc, #452]	@ (8008ca0 <_dtoa_r+0x5d0>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	f7f7 fbd4 	bl	8000288 <__aeabi_dsub>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ae8:	462a      	mov	r2, r5
 8008aea:	4633      	mov	r3, r6
 8008aec:	f7f8 f814 	bl	8000b18 <__aeabi_dcmpgt>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	f040 828b 	bne.w	800900c <_dtoa_r+0x93c>
 8008af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008afa:	462a      	mov	r2, r5
 8008afc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008b00:	f7f7 ffec 	bl	8000adc <__aeabi_dcmplt>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	f040 8128 	bne.w	8008d5a <_dtoa_r+0x68a>
 8008b0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008b0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f2c0 815a 	blt.w	8008dce <_dtoa_r+0x6fe>
 8008b1a:	2f0e      	cmp	r7, #14
 8008b1c:	f300 8157 	bgt.w	8008dce <_dtoa_r+0x6fe>
 8008b20:	4b5a      	ldr	r3, [pc, #360]	@ (8008c8c <_dtoa_r+0x5bc>)
 8008b22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b26:	ed93 7b00 	vldr	d7, [r3]
 8008b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	ed8d 7b00 	vstr	d7, [sp]
 8008b32:	da03      	bge.n	8008b3c <_dtoa_r+0x46c>
 8008b34:	9b07      	ldr	r3, [sp, #28]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f340 8101 	ble.w	8008d3e <_dtoa_r+0x66e>
 8008b3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b40:	4656      	mov	r6, sl
 8008b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 fe7f 	bl	800084c <__aeabi_ddiv>
 8008b4e:	f7f8 f803 	bl	8000b58 <__aeabi_d2iz>
 8008b52:	4680      	mov	r8, r0
 8008b54:	f7f7 fce6 	bl	8000524 <__aeabi_i2d>
 8008b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b5c:	f7f7 fd4c 	bl	80005f8 <__aeabi_dmul>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4620      	mov	r0, r4
 8008b66:	4629      	mov	r1, r5
 8008b68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b6c:	f7f7 fb8c 	bl	8000288 <__aeabi_dsub>
 8008b70:	f806 4b01 	strb.w	r4, [r6], #1
 8008b74:	9d07      	ldr	r5, [sp, #28]
 8008b76:	eba6 040a 	sub.w	r4, r6, sl
 8008b7a:	42a5      	cmp	r5, r4
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	f040 8117 	bne.w	8008db2 <_dtoa_r+0x6e2>
 8008b84:	f7f7 fb82 	bl	800028c <__adddf3>
 8008b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	f7f7 ffc2 	bl	8000b18 <__aeabi_dcmpgt>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	f040 80f9 	bne.w	8008d8c <_dtoa_r+0x6bc>
 8008b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 ff91 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ba6:	b118      	cbz	r0, 8008bb0 <_dtoa_r+0x4e0>
 8008ba8:	f018 0f01 	tst.w	r8, #1
 8008bac:	f040 80ee 	bne.w	8008d8c <_dtoa_r+0x6bc>
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	4658      	mov	r0, fp
 8008bb4:	f000 fc90 	bl	80094d8 <_Bfree>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	7033      	strb	r3, [r6, #0]
 8008bbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bbe:	3701      	adds	r7, #1
 8008bc0:	601f      	str	r7, [r3, #0]
 8008bc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 831d 	beq.w	8009204 <_dtoa_r+0xb34>
 8008bca:	601e      	str	r6, [r3, #0]
 8008bcc:	e31a      	b.n	8009204 <_dtoa_r+0xb34>
 8008bce:	07e2      	lsls	r2, r4, #31
 8008bd0:	d505      	bpl.n	8008bde <_dtoa_r+0x50e>
 8008bd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bd6:	f7f7 fd0f 	bl	80005f8 <__aeabi_dmul>
 8008bda:	3601      	adds	r6, #1
 8008bdc:	2301      	movs	r3, #1
 8008bde:	1064      	asrs	r4, r4, #1
 8008be0:	3508      	adds	r5, #8
 8008be2:	e73f      	b.n	8008a64 <_dtoa_r+0x394>
 8008be4:	2602      	movs	r6, #2
 8008be6:	e742      	b.n	8008a6e <_dtoa_r+0x39e>
 8008be8:	9c07      	ldr	r4, [sp, #28]
 8008bea:	9704      	str	r7, [sp, #16]
 8008bec:	e761      	b.n	8008ab2 <_dtoa_r+0x3e2>
 8008bee:	4b27      	ldr	r3, [pc, #156]	@ (8008c8c <_dtoa_r+0x5bc>)
 8008bf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bfa:	4454      	add	r4, sl
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d053      	beq.n	8008ca8 <_dtoa_r+0x5d8>
 8008c00:	4928      	ldr	r1, [pc, #160]	@ (8008ca4 <_dtoa_r+0x5d4>)
 8008c02:	2000      	movs	r0, #0
 8008c04:	f7f7 fe22 	bl	800084c <__aeabi_ddiv>
 8008c08:	4633      	mov	r3, r6
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	f7f7 fb3c 	bl	8000288 <__aeabi_dsub>
 8008c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c14:	4656      	mov	r6, sl
 8008c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c1a:	f7f7 ff9d 	bl	8000b58 <__aeabi_d2iz>
 8008c1e:	4605      	mov	r5, r0
 8008c20:	f7f7 fc80 	bl	8000524 <__aeabi_i2d>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c2c:	f7f7 fb2c 	bl	8000288 <__aeabi_dsub>
 8008c30:	3530      	adds	r5, #48	@ 0x30
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c3a:	f806 5b01 	strb.w	r5, [r6], #1
 8008c3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c42:	f7f7 ff4b 	bl	8000adc <__aeabi_dcmplt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d171      	bne.n	8008d2e <_dtoa_r+0x65e>
 8008c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c4e:	4911      	ldr	r1, [pc, #68]	@ (8008c94 <_dtoa_r+0x5c4>)
 8008c50:	2000      	movs	r0, #0
 8008c52:	f7f7 fb19 	bl	8000288 <__aeabi_dsub>
 8008c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c5a:	f7f7 ff3f 	bl	8000adc <__aeabi_dcmplt>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	f040 8095 	bne.w	8008d8e <_dtoa_r+0x6be>
 8008c64:	42a6      	cmp	r6, r4
 8008c66:	f43f af50 	beq.w	8008b0a <_dtoa_r+0x43a>
 8008c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c98 <_dtoa_r+0x5c8>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	f7f7 fcc1 	bl	80005f8 <__aeabi_dmul>
 8008c76:	4b08      	ldr	r3, [pc, #32]	@ (8008c98 <_dtoa_r+0x5c8>)
 8008c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c82:	f7f7 fcb9 	bl	80005f8 <__aeabi_dmul>
 8008c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c8a:	e7c4      	b.n	8008c16 <_dtoa_r+0x546>
 8008c8c:	0800c0c8 	.word	0x0800c0c8
 8008c90:	0800c0a0 	.word	0x0800c0a0
 8008c94:	3ff00000 	.word	0x3ff00000
 8008c98:	40240000 	.word	0x40240000
 8008c9c:	401c0000 	.word	0x401c0000
 8008ca0:	40140000 	.word	0x40140000
 8008ca4:	3fe00000 	.word	0x3fe00000
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4628      	mov	r0, r5
 8008cac:	f7f7 fca4 	bl	80005f8 <__aeabi_dmul>
 8008cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008cb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008cb6:	4656      	mov	r6, sl
 8008cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cbc:	f7f7 ff4c 	bl	8000b58 <__aeabi_d2iz>
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	f7f7 fc2f 	bl	8000524 <__aeabi_i2d>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cce:	f7f7 fadb 	bl	8000288 <__aeabi_dsub>
 8008cd2:	3530      	adds	r5, #48	@ 0x30
 8008cd4:	f806 5b01 	strb.w	r5, [r6], #1
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	42a6      	cmp	r6, r4
 8008cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	d124      	bne.n	8008d32 <_dtoa_r+0x662>
 8008ce8:	4bac      	ldr	r3, [pc, #688]	@ (8008f9c <_dtoa_r+0x8cc>)
 8008cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008cee:	f7f7 facd 	bl	800028c <__adddf3>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cfa:	f7f7 ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d145      	bne.n	8008d8e <_dtoa_r+0x6be>
 8008d02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d06:	49a5      	ldr	r1, [pc, #660]	@ (8008f9c <_dtoa_r+0x8cc>)
 8008d08:	2000      	movs	r0, #0
 8008d0a:	f7f7 fabd 	bl	8000288 <__aeabi_dsub>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d16:	f7f7 fee1 	bl	8000adc <__aeabi_dcmplt>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	f43f aef5 	beq.w	8008b0a <_dtoa_r+0x43a>
 8008d20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008d22:	1e73      	subs	r3, r6, #1
 8008d24:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d2a:	2b30      	cmp	r3, #48	@ 0x30
 8008d2c:	d0f8      	beq.n	8008d20 <_dtoa_r+0x650>
 8008d2e:	9f04      	ldr	r7, [sp, #16]
 8008d30:	e73e      	b.n	8008bb0 <_dtoa_r+0x4e0>
 8008d32:	4b9b      	ldr	r3, [pc, #620]	@ (8008fa0 <_dtoa_r+0x8d0>)
 8008d34:	f7f7 fc60 	bl	80005f8 <__aeabi_dmul>
 8008d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d3c:	e7bc      	b.n	8008cb8 <_dtoa_r+0x5e8>
 8008d3e:	d10c      	bne.n	8008d5a <_dtoa_r+0x68a>
 8008d40:	4b98      	ldr	r3, [pc, #608]	@ (8008fa4 <_dtoa_r+0x8d4>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d48:	f7f7 fc56 	bl	80005f8 <__aeabi_dmul>
 8008d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d50:	f7f7 fed8 	bl	8000b04 <__aeabi_dcmpge>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	f000 8157 	beq.w	8009008 <_dtoa_r+0x938>
 8008d5a:	2400      	movs	r4, #0
 8008d5c:	4625      	mov	r5, r4
 8008d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d60:	43db      	mvns	r3, r3
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	4656      	mov	r6, sl
 8008d66:	2700      	movs	r7, #0
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4658      	mov	r0, fp
 8008d6c:	f000 fbb4 	bl	80094d8 <_Bfree>
 8008d70:	2d00      	cmp	r5, #0
 8008d72:	d0dc      	beq.n	8008d2e <_dtoa_r+0x65e>
 8008d74:	b12f      	cbz	r7, 8008d82 <_dtoa_r+0x6b2>
 8008d76:	42af      	cmp	r7, r5
 8008d78:	d003      	beq.n	8008d82 <_dtoa_r+0x6b2>
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4658      	mov	r0, fp
 8008d7e:	f000 fbab 	bl	80094d8 <_Bfree>
 8008d82:	4629      	mov	r1, r5
 8008d84:	4658      	mov	r0, fp
 8008d86:	f000 fba7 	bl	80094d8 <_Bfree>
 8008d8a:	e7d0      	b.n	8008d2e <_dtoa_r+0x65e>
 8008d8c:	9704      	str	r7, [sp, #16]
 8008d8e:	4633      	mov	r3, r6
 8008d90:	461e      	mov	r6, r3
 8008d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d96:	2a39      	cmp	r2, #57	@ 0x39
 8008d98:	d107      	bne.n	8008daa <_dtoa_r+0x6da>
 8008d9a:	459a      	cmp	sl, r3
 8008d9c:	d1f8      	bne.n	8008d90 <_dtoa_r+0x6c0>
 8008d9e:	9a04      	ldr	r2, [sp, #16]
 8008da0:	3201      	adds	r2, #1
 8008da2:	9204      	str	r2, [sp, #16]
 8008da4:	2230      	movs	r2, #48	@ 0x30
 8008da6:	f88a 2000 	strb.w	r2, [sl]
 8008daa:	781a      	ldrb	r2, [r3, #0]
 8008dac:	3201      	adds	r2, #1
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	e7bd      	b.n	8008d2e <_dtoa_r+0x65e>
 8008db2:	4b7b      	ldr	r3, [pc, #492]	@ (8008fa0 <_dtoa_r+0x8d0>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	f7f7 fc1f 	bl	80005f8 <__aeabi_dmul>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	f7f7 fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f43f aebb 	beq.w	8008b42 <_dtoa_r+0x472>
 8008dcc:	e6f0      	b.n	8008bb0 <_dtoa_r+0x4e0>
 8008dce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008dd0:	2a00      	cmp	r2, #0
 8008dd2:	f000 80db 	beq.w	8008f8c <_dtoa_r+0x8bc>
 8008dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dd8:	2a01      	cmp	r2, #1
 8008dda:	f300 80bf 	bgt.w	8008f5c <_dtoa_r+0x88c>
 8008dde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	f000 80b7 	beq.w	8008f54 <_dtoa_r+0x884>
 8008de6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008dea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008dec:	4646      	mov	r6, r8
 8008dee:	9a08      	ldr	r2, [sp, #32]
 8008df0:	2101      	movs	r1, #1
 8008df2:	441a      	add	r2, r3
 8008df4:	4658      	mov	r0, fp
 8008df6:	4498      	add	r8, r3
 8008df8:	9208      	str	r2, [sp, #32]
 8008dfa:	f000 fc6b 	bl	80096d4 <__i2b>
 8008dfe:	4605      	mov	r5, r0
 8008e00:	b15e      	cbz	r6, 8008e1a <_dtoa_r+0x74a>
 8008e02:	9b08      	ldr	r3, [sp, #32]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	dd08      	ble.n	8008e1a <_dtoa_r+0x74a>
 8008e08:	42b3      	cmp	r3, r6
 8008e0a:	9a08      	ldr	r2, [sp, #32]
 8008e0c:	bfa8      	it	ge
 8008e0e:	4633      	movge	r3, r6
 8008e10:	eba8 0803 	sub.w	r8, r8, r3
 8008e14:	1af6      	subs	r6, r6, r3
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	9308      	str	r3, [sp, #32]
 8008e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e1c:	b1f3      	cbz	r3, 8008e5c <_dtoa_r+0x78c>
 8008e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80b7 	beq.w	8008f94 <_dtoa_r+0x8c4>
 8008e26:	b18c      	cbz	r4, 8008e4c <_dtoa_r+0x77c>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	4658      	mov	r0, fp
 8008e2e:	f000 fd11 	bl	8009854 <__pow5mult>
 8008e32:	464a      	mov	r2, r9
 8008e34:	4601      	mov	r1, r0
 8008e36:	4605      	mov	r5, r0
 8008e38:	4658      	mov	r0, fp
 8008e3a:	f000 fc61 	bl	8009700 <__multiply>
 8008e3e:	4649      	mov	r1, r9
 8008e40:	9004      	str	r0, [sp, #16]
 8008e42:	4658      	mov	r0, fp
 8008e44:	f000 fb48 	bl	80094d8 <_Bfree>
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	4699      	mov	r9, r3
 8008e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e4e:	1b1a      	subs	r2, r3, r4
 8008e50:	d004      	beq.n	8008e5c <_dtoa_r+0x78c>
 8008e52:	4649      	mov	r1, r9
 8008e54:	4658      	mov	r0, fp
 8008e56:	f000 fcfd 	bl	8009854 <__pow5mult>
 8008e5a:	4681      	mov	r9, r0
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	4658      	mov	r0, fp
 8008e60:	f000 fc38 	bl	80096d4 <__i2b>
 8008e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e66:	4604      	mov	r4, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 81cf 	beq.w	800920c <_dtoa_r+0xb3c>
 8008e6e:	461a      	mov	r2, r3
 8008e70:	4601      	mov	r1, r0
 8008e72:	4658      	mov	r0, fp
 8008e74:	f000 fcee 	bl	8009854 <__pow5mult>
 8008e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	f300 8095 	bgt.w	8008fac <_dtoa_r+0x8dc>
 8008e82:	9b02      	ldr	r3, [sp, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f040 8087 	bne.w	8008f98 <_dtoa_r+0x8c8>
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f040 8089 	bne.w	8008fa8 <_dtoa_r+0x8d8>
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e9c:	0d1b      	lsrs	r3, r3, #20
 8008e9e:	051b      	lsls	r3, r3, #20
 8008ea0:	b12b      	cbz	r3, 8008eae <_dtoa_r+0x7de>
 8008ea2:	9b08      	ldr	r3, [sp, #32]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	9308      	str	r3, [sp, #32]
 8008ea8:	f108 0801 	add.w	r8, r8, #1
 8008eac:	2301      	movs	r3, #1
 8008eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 81b0 	beq.w	8009218 <_dtoa_r+0xb48>
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ebe:	6918      	ldr	r0, [r3, #16]
 8008ec0:	f000 fbbc 	bl	800963c <__hi0bits>
 8008ec4:	f1c0 0020 	rsb	r0, r0, #32
 8008ec8:	9b08      	ldr	r3, [sp, #32]
 8008eca:	4418      	add	r0, r3
 8008ecc:	f010 001f 	ands.w	r0, r0, #31
 8008ed0:	d077      	beq.n	8008fc2 <_dtoa_r+0x8f2>
 8008ed2:	f1c0 0320 	rsb	r3, r0, #32
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	dd6b      	ble.n	8008fb2 <_dtoa_r+0x8e2>
 8008eda:	9b08      	ldr	r3, [sp, #32]
 8008edc:	f1c0 001c 	rsb	r0, r0, #28
 8008ee0:	4403      	add	r3, r0
 8008ee2:	4480      	add	r8, r0
 8008ee4:	4406      	add	r6, r0
 8008ee6:	9308      	str	r3, [sp, #32]
 8008ee8:	f1b8 0f00 	cmp.w	r8, #0
 8008eec:	dd05      	ble.n	8008efa <_dtoa_r+0x82a>
 8008eee:	4649      	mov	r1, r9
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	4658      	mov	r0, fp
 8008ef4:	f000 fd08 	bl	8009908 <__lshift>
 8008ef8:	4681      	mov	r9, r0
 8008efa:	9b08      	ldr	r3, [sp, #32]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dd05      	ble.n	8008f0c <_dtoa_r+0x83c>
 8008f00:	4621      	mov	r1, r4
 8008f02:	461a      	mov	r2, r3
 8008f04:	4658      	mov	r0, fp
 8008f06:	f000 fcff 	bl	8009908 <__lshift>
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d059      	beq.n	8008fc6 <_dtoa_r+0x8f6>
 8008f12:	4621      	mov	r1, r4
 8008f14:	4648      	mov	r0, r9
 8008f16:	f000 fd63 	bl	80099e0 <__mcmp>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	da53      	bge.n	8008fc6 <_dtoa_r+0x8f6>
 8008f1e:	1e7b      	subs	r3, r7, #1
 8008f20:	9304      	str	r3, [sp, #16]
 8008f22:	4649      	mov	r1, r9
 8008f24:	2300      	movs	r3, #0
 8008f26:	220a      	movs	r2, #10
 8008f28:	4658      	mov	r0, fp
 8008f2a:	f000 faf7 	bl	800951c <__multadd>
 8008f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f30:	4681      	mov	r9, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f000 8172 	beq.w	800921c <_dtoa_r+0xb4c>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	220a      	movs	r2, #10
 8008f3e:	4658      	mov	r0, fp
 8008f40:	f000 faec 	bl	800951c <__multadd>
 8008f44:	9b00      	ldr	r3, [sp, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	4605      	mov	r5, r0
 8008f4a:	dc67      	bgt.n	800901c <_dtoa_r+0x94c>
 8008f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	dc41      	bgt.n	8008fd6 <_dtoa_r+0x906>
 8008f52:	e063      	b.n	800901c <_dtoa_r+0x94c>
 8008f54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f5a:	e746      	b.n	8008dea <_dtoa_r+0x71a>
 8008f5c:	9b07      	ldr	r3, [sp, #28]
 8008f5e:	1e5c      	subs	r4, r3, #1
 8008f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f62:	42a3      	cmp	r3, r4
 8008f64:	bfbf      	itttt	lt
 8008f66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008f6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f6c:	1ae3      	sublt	r3, r4, r3
 8008f6e:	bfb4      	ite	lt
 8008f70:	18d2      	addlt	r2, r2, r3
 8008f72:	1b1c      	subge	r4, r3, r4
 8008f74:	9b07      	ldr	r3, [sp, #28]
 8008f76:	bfbc      	itt	lt
 8008f78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008f7a:	2400      	movlt	r4, #0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	bfb5      	itete	lt
 8008f80:	eba8 0603 	sublt.w	r6, r8, r3
 8008f84:	9b07      	ldrge	r3, [sp, #28]
 8008f86:	2300      	movlt	r3, #0
 8008f88:	4646      	movge	r6, r8
 8008f8a:	e730      	b.n	8008dee <_dtoa_r+0x71e>
 8008f8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f90:	4646      	mov	r6, r8
 8008f92:	e735      	b.n	8008e00 <_dtoa_r+0x730>
 8008f94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f96:	e75c      	b.n	8008e52 <_dtoa_r+0x782>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e788      	b.n	8008eae <_dtoa_r+0x7de>
 8008f9c:	3fe00000 	.word	0x3fe00000
 8008fa0:	40240000 	.word	0x40240000
 8008fa4:	40140000 	.word	0x40140000
 8008fa8:	9b02      	ldr	r3, [sp, #8]
 8008faa:	e780      	b.n	8008eae <_dtoa_r+0x7de>
 8008fac:	2300      	movs	r3, #0
 8008fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fb0:	e782      	b.n	8008eb8 <_dtoa_r+0x7e8>
 8008fb2:	d099      	beq.n	8008ee8 <_dtoa_r+0x818>
 8008fb4:	9a08      	ldr	r2, [sp, #32]
 8008fb6:	331c      	adds	r3, #28
 8008fb8:	441a      	add	r2, r3
 8008fba:	4498      	add	r8, r3
 8008fbc:	441e      	add	r6, r3
 8008fbe:	9208      	str	r2, [sp, #32]
 8008fc0:	e792      	b.n	8008ee8 <_dtoa_r+0x818>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	e7f6      	b.n	8008fb4 <_dtoa_r+0x8e4>
 8008fc6:	9b07      	ldr	r3, [sp, #28]
 8008fc8:	9704      	str	r7, [sp, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	dc20      	bgt.n	8009010 <_dtoa_r+0x940>
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	dd1e      	ble.n	8009014 <_dtoa_r+0x944>
 8008fd6:	9b00      	ldr	r3, [sp, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f47f aec0 	bne.w	8008d5e <_dtoa_r+0x68e>
 8008fde:	4621      	mov	r1, r4
 8008fe0:	2205      	movs	r2, #5
 8008fe2:	4658      	mov	r0, fp
 8008fe4:	f000 fa9a 	bl	800951c <__multadd>
 8008fe8:	4601      	mov	r1, r0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4648      	mov	r0, r9
 8008fee:	f000 fcf7 	bl	80099e0 <__mcmp>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f77f aeb3 	ble.w	8008d5e <_dtoa_r+0x68e>
 8008ff8:	4656      	mov	r6, sl
 8008ffa:	2331      	movs	r3, #49	@ 0x31
 8008ffc:	f806 3b01 	strb.w	r3, [r6], #1
 8009000:	9b04      	ldr	r3, [sp, #16]
 8009002:	3301      	adds	r3, #1
 8009004:	9304      	str	r3, [sp, #16]
 8009006:	e6ae      	b.n	8008d66 <_dtoa_r+0x696>
 8009008:	9c07      	ldr	r4, [sp, #28]
 800900a:	9704      	str	r7, [sp, #16]
 800900c:	4625      	mov	r5, r4
 800900e:	e7f3      	b.n	8008ff8 <_dtoa_r+0x928>
 8009010:	9b07      	ldr	r3, [sp, #28]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 8104 	beq.w	8009224 <_dtoa_r+0xb54>
 800901c:	2e00      	cmp	r6, #0
 800901e:	dd05      	ble.n	800902c <_dtoa_r+0x95c>
 8009020:	4629      	mov	r1, r5
 8009022:	4632      	mov	r2, r6
 8009024:	4658      	mov	r0, fp
 8009026:	f000 fc6f 	bl	8009908 <__lshift>
 800902a:	4605      	mov	r5, r0
 800902c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800902e:	2b00      	cmp	r3, #0
 8009030:	d05a      	beq.n	80090e8 <_dtoa_r+0xa18>
 8009032:	6869      	ldr	r1, [r5, #4]
 8009034:	4658      	mov	r0, fp
 8009036:	f000 fa0f 	bl	8009458 <_Balloc>
 800903a:	4606      	mov	r6, r0
 800903c:	b928      	cbnz	r0, 800904a <_dtoa_r+0x97a>
 800903e:	4b84      	ldr	r3, [pc, #528]	@ (8009250 <_dtoa_r+0xb80>)
 8009040:	4602      	mov	r2, r0
 8009042:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009046:	f7ff bb5a 	b.w	80086fe <_dtoa_r+0x2e>
 800904a:	692a      	ldr	r2, [r5, #16]
 800904c:	3202      	adds	r2, #2
 800904e:	0092      	lsls	r2, r2, #2
 8009050:	f105 010c 	add.w	r1, r5, #12
 8009054:	300c      	adds	r0, #12
 8009056:	f7ff fa9e 	bl	8008596 <memcpy>
 800905a:	2201      	movs	r2, #1
 800905c:	4631      	mov	r1, r6
 800905e:	4658      	mov	r0, fp
 8009060:	f000 fc52 	bl	8009908 <__lshift>
 8009064:	f10a 0301 	add.w	r3, sl, #1
 8009068:	9307      	str	r3, [sp, #28]
 800906a:	9b00      	ldr	r3, [sp, #0]
 800906c:	4453      	add	r3, sl
 800906e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009070:	9b02      	ldr	r3, [sp, #8]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	462f      	mov	r7, r5
 8009078:	930a      	str	r3, [sp, #40]	@ 0x28
 800907a:	4605      	mov	r5, r0
 800907c:	9b07      	ldr	r3, [sp, #28]
 800907e:	4621      	mov	r1, r4
 8009080:	3b01      	subs	r3, #1
 8009082:	4648      	mov	r0, r9
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	f7ff fa9b 	bl	80085c0 <quorem>
 800908a:	4639      	mov	r1, r7
 800908c:	9002      	str	r0, [sp, #8]
 800908e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009092:	4648      	mov	r0, r9
 8009094:	f000 fca4 	bl	80099e0 <__mcmp>
 8009098:	462a      	mov	r2, r5
 800909a:	9008      	str	r0, [sp, #32]
 800909c:	4621      	mov	r1, r4
 800909e:	4658      	mov	r0, fp
 80090a0:	f000 fcba 	bl	8009a18 <__mdiff>
 80090a4:	68c2      	ldr	r2, [r0, #12]
 80090a6:	4606      	mov	r6, r0
 80090a8:	bb02      	cbnz	r2, 80090ec <_dtoa_r+0xa1c>
 80090aa:	4601      	mov	r1, r0
 80090ac:	4648      	mov	r0, r9
 80090ae:	f000 fc97 	bl	80099e0 <__mcmp>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4631      	mov	r1, r6
 80090b6:	4658      	mov	r0, fp
 80090b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80090ba:	f000 fa0d 	bl	80094d8 <_Bfree>
 80090be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090c2:	9e07      	ldr	r6, [sp, #28]
 80090c4:	ea43 0102 	orr.w	r1, r3, r2
 80090c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ca:	4319      	orrs	r1, r3
 80090cc:	d110      	bne.n	80090f0 <_dtoa_r+0xa20>
 80090ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090d2:	d029      	beq.n	8009128 <_dtoa_r+0xa58>
 80090d4:	9b08      	ldr	r3, [sp, #32]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	dd02      	ble.n	80090e0 <_dtoa_r+0xa10>
 80090da:	9b02      	ldr	r3, [sp, #8]
 80090dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80090e0:	9b00      	ldr	r3, [sp, #0]
 80090e2:	f883 8000 	strb.w	r8, [r3]
 80090e6:	e63f      	b.n	8008d68 <_dtoa_r+0x698>
 80090e8:	4628      	mov	r0, r5
 80090ea:	e7bb      	b.n	8009064 <_dtoa_r+0x994>
 80090ec:	2201      	movs	r2, #1
 80090ee:	e7e1      	b.n	80090b4 <_dtoa_r+0x9e4>
 80090f0:	9b08      	ldr	r3, [sp, #32]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	db04      	blt.n	8009100 <_dtoa_r+0xa30>
 80090f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090f8:	430b      	orrs	r3, r1
 80090fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090fc:	430b      	orrs	r3, r1
 80090fe:	d120      	bne.n	8009142 <_dtoa_r+0xa72>
 8009100:	2a00      	cmp	r2, #0
 8009102:	dded      	ble.n	80090e0 <_dtoa_r+0xa10>
 8009104:	4649      	mov	r1, r9
 8009106:	2201      	movs	r2, #1
 8009108:	4658      	mov	r0, fp
 800910a:	f000 fbfd 	bl	8009908 <__lshift>
 800910e:	4621      	mov	r1, r4
 8009110:	4681      	mov	r9, r0
 8009112:	f000 fc65 	bl	80099e0 <__mcmp>
 8009116:	2800      	cmp	r0, #0
 8009118:	dc03      	bgt.n	8009122 <_dtoa_r+0xa52>
 800911a:	d1e1      	bne.n	80090e0 <_dtoa_r+0xa10>
 800911c:	f018 0f01 	tst.w	r8, #1
 8009120:	d0de      	beq.n	80090e0 <_dtoa_r+0xa10>
 8009122:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009126:	d1d8      	bne.n	80090da <_dtoa_r+0xa0a>
 8009128:	9a00      	ldr	r2, [sp, #0]
 800912a:	2339      	movs	r3, #57	@ 0x39
 800912c:	7013      	strb	r3, [r2, #0]
 800912e:	4633      	mov	r3, r6
 8009130:	461e      	mov	r6, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009138:	2a39      	cmp	r2, #57	@ 0x39
 800913a:	d052      	beq.n	80091e2 <_dtoa_r+0xb12>
 800913c:	3201      	adds	r2, #1
 800913e:	701a      	strb	r2, [r3, #0]
 8009140:	e612      	b.n	8008d68 <_dtoa_r+0x698>
 8009142:	2a00      	cmp	r2, #0
 8009144:	dd07      	ble.n	8009156 <_dtoa_r+0xa86>
 8009146:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800914a:	d0ed      	beq.n	8009128 <_dtoa_r+0xa58>
 800914c:	9a00      	ldr	r2, [sp, #0]
 800914e:	f108 0301 	add.w	r3, r8, #1
 8009152:	7013      	strb	r3, [r2, #0]
 8009154:	e608      	b.n	8008d68 <_dtoa_r+0x698>
 8009156:	9b07      	ldr	r3, [sp, #28]
 8009158:	9a07      	ldr	r2, [sp, #28]
 800915a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800915e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009160:	4293      	cmp	r3, r2
 8009162:	d028      	beq.n	80091b6 <_dtoa_r+0xae6>
 8009164:	4649      	mov	r1, r9
 8009166:	2300      	movs	r3, #0
 8009168:	220a      	movs	r2, #10
 800916a:	4658      	mov	r0, fp
 800916c:	f000 f9d6 	bl	800951c <__multadd>
 8009170:	42af      	cmp	r7, r5
 8009172:	4681      	mov	r9, r0
 8009174:	f04f 0300 	mov.w	r3, #0
 8009178:	f04f 020a 	mov.w	r2, #10
 800917c:	4639      	mov	r1, r7
 800917e:	4658      	mov	r0, fp
 8009180:	d107      	bne.n	8009192 <_dtoa_r+0xac2>
 8009182:	f000 f9cb 	bl	800951c <__multadd>
 8009186:	4607      	mov	r7, r0
 8009188:	4605      	mov	r5, r0
 800918a:	9b07      	ldr	r3, [sp, #28]
 800918c:	3301      	adds	r3, #1
 800918e:	9307      	str	r3, [sp, #28]
 8009190:	e774      	b.n	800907c <_dtoa_r+0x9ac>
 8009192:	f000 f9c3 	bl	800951c <__multadd>
 8009196:	4629      	mov	r1, r5
 8009198:	4607      	mov	r7, r0
 800919a:	2300      	movs	r3, #0
 800919c:	220a      	movs	r2, #10
 800919e:	4658      	mov	r0, fp
 80091a0:	f000 f9bc 	bl	800951c <__multadd>
 80091a4:	4605      	mov	r5, r0
 80091a6:	e7f0      	b.n	800918a <_dtoa_r+0xaba>
 80091a8:	9b00      	ldr	r3, [sp, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bfcc      	ite	gt
 80091ae:	461e      	movgt	r6, r3
 80091b0:	2601      	movle	r6, #1
 80091b2:	4456      	add	r6, sl
 80091b4:	2700      	movs	r7, #0
 80091b6:	4649      	mov	r1, r9
 80091b8:	2201      	movs	r2, #1
 80091ba:	4658      	mov	r0, fp
 80091bc:	f000 fba4 	bl	8009908 <__lshift>
 80091c0:	4621      	mov	r1, r4
 80091c2:	4681      	mov	r9, r0
 80091c4:	f000 fc0c 	bl	80099e0 <__mcmp>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	dcb0      	bgt.n	800912e <_dtoa_r+0xa5e>
 80091cc:	d102      	bne.n	80091d4 <_dtoa_r+0xb04>
 80091ce:	f018 0f01 	tst.w	r8, #1
 80091d2:	d1ac      	bne.n	800912e <_dtoa_r+0xa5e>
 80091d4:	4633      	mov	r3, r6
 80091d6:	461e      	mov	r6, r3
 80091d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091dc:	2a30      	cmp	r2, #48	@ 0x30
 80091de:	d0fa      	beq.n	80091d6 <_dtoa_r+0xb06>
 80091e0:	e5c2      	b.n	8008d68 <_dtoa_r+0x698>
 80091e2:	459a      	cmp	sl, r3
 80091e4:	d1a4      	bne.n	8009130 <_dtoa_r+0xa60>
 80091e6:	9b04      	ldr	r3, [sp, #16]
 80091e8:	3301      	adds	r3, #1
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	2331      	movs	r3, #49	@ 0x31
 80091ee:	f88a 3000 	strb.w	r3, [sl]
 80091f2:	e5b9      	b.n	8008d68 <_dtoa_r+0x698>
 80091f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009254 <_dtoa_r+0xb84>
 80091fa:	b11b      	cbz	r3, 8009204 <_dtoa_r+0xb34>
 80091fc:	f10a 0308 	add.w	r3, sl, #8
 8009200:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	4650      	mov	r0, sl
 8009206:	b019      	add	sp, #100	@ 0x64
 8009208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800920e:	2b01      	cmp	r3, #1
 8009210:	f77f ae37 	ble.w	8008e82 <_dtoa_r+0x7b2>
 8009214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009216:	930a      	str	r3, [sp, #40]	@ 0x28
 8009218:	2001      	movs	r0, #1
 800921a:	e655      	b.n	8008ec8 <_dtoa_r+0x7f8>
 800921c:	9b00      	ldr	r3, [sp, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f77f aed6 	ble.w	8008fd0 <_dtoa_r+0x900>
 8009224:	4656      	mov	r6, sl
 8009226:	4621      	mov	r1, r4
 8009228:	4648      	mov	r0, r9
 800922a:	f7ff f9c9 	bl	80085c0 <quorem>
 800922e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009232:	f806 8b01 	strb.w	r8, [r6], #1
 8009236:	9b00      	ldr	r3, [sp, #0]
 8009238:	eba6 020a 	sub.w	r2, r6, sl
 800923c:	4293      	cmp	r3, r2
 800923e:	ddb3      	ble.n	80091a8 <_dtoa_r+0xad8>
 8009240:	4649      	mov	r1, r9
 8009242:	2300      	movs	r3, #0
 8009244:	220a      	movs	r2, #10
 8009246:	4658      	mov	r0, fp
 8009248:	f000 f968 	bl	800951c <__multadd>
 800924c:	4681      	mov	r9, r0
 800924e:	e7ea      	b.n	8009226 <_dtoa_r+0xb56>
 8009250:	0800c02a 	.word	0x0800c02a
 8009254:	0800bfae 	.word	0x0800bfae

08009258 <_free_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4605      	mov	r5, r0
 800925c:	2900      	cmp	r1, #0
 800925e:	d041      	beq.n	80092e4 <_free_r+0x8c>
 8009260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009264:	1f0c      	subs	r4, r1, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfb8      	it	lt
 800926a:	18e4      	addlt	r4, r4, r3
 800926c:	f000 f8e8 	bl	8009440 <__malloc_lock>
 8009270:	4a1d      	ldr	r2, [pc, #116]	@ (80092e8 <_free_r+0x90>)
 8009272:	6813      	ldr	r3, [r2, #0]
 8009274:	b933      	cbnz	r3, 8009284 <_free_r+0x2c>
 8009276:	6063      	str	r3, [r4, #4]
 8009278:	6014      	str	r4, [r2, #0]
 800927a:	4628      	mov	r0, r5
 800927c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009280:	f000 b8e4 	b.w	800944c <__malloc_unlock>
 8009284:	42a3      	cmp	r3, r4
 8009286:	d908      	bls.n	800929a <_free_r+0x42>
 8009288:	6820      	ldr	r0, [r4, #0]
 800928a:	1821      	adds	r1, r4, r0
 800928c:	428b      	cmp	r3, r1
 800928e:	bf01      	itttt	eq
 8009290:	6819      	ldreq	r1, [r3, #0]
 8009292:	685b      	ldreq	r3, [r3, #4]
 8009294:	1809      	addeq	r1, r1, r0
 8009296:	6021      	streq	r1, [r4, #0]
 8009298:	e7ed      	b.n	8009276 <_free_r+0x1e>
 800929a:	461a      	mov	r2, r3
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	b10b      	cbz	r3, 80092a4 <_free_r+0x4c>
 80092a0:	42a3      	cmp	r3, r4
 80092a2:	d9fa      	bls.n	800929a <_free_r+0x42>
 80092a4:	6811      	ldr	r1, [r2, #0]
 80092a6:	1850      	adds	r0, r2, r1
 80092a8:	42a0      	cmp	r0, r4
 80092aa:	d10b      	bne.n	80092c4 <_free_r+0x6c>
 80092ac:	6820      	ldr	r0, [r4, #0]
 80092ae:	4401      	add	r1, r0
 80092b0:	1850      	adds	r0, r2, r1
 80092b2:	4283      	cmp	r3, r0
 80092b4:	6011      	str	r1, [r2, #0]
 80092b6:	d1e0      	bne.n	800927a <_free_r+0x22>
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	6053      	str	r3, [r2, #4]
 80092be:	4408      	add	r0, r1
 80092c0:	6010      	str	r0, [r2, #0]
 80092c2:	e7da      	b.n	800927a <_free_r+0x22>
 80092c4:	d902      	bls.n	80092cc <_free_r+0x74>
 80092c6:	230c      	movs	r3, #12
 80092c8:	602b      	str	r3, [r5, #0]
 80092ca:	e7d6      	b.n	800927a <_free_r+0x22>
 80092cc:	6820      	ldr	r0, [r4, #0]
 80092ce:	1821      	adds	r1, r4, r0
 80092d0:	428b      	cmp	r3, r1
 80092d2:	bf04      	itt	eq
 80092d4:	6819      	ldreq	r1, [r3, #0]
 80092d6:	685b      	ldreq	r3, [r3, #4]
 80092d8:	6063      	str	r3, [r4, #4]
 80092da:	bf04      	itt	eq
 80092dc:	1809      	addeq	r1, r1, r0
 80092de:	6021      	streq	r1, [r4, #0]
 80092e0:	6054      	str	r4, [r2, #4]
 80092e2:	e7ca      	b.n	800927a <_free_r+0x22>
 80092e4:	bd38      	pop	{r3, r4, r5, pc}
 80092e6:	bf00      	nop
 80092e8:	20005d94 	.word	0x20005d94

080092ec <malloc>:
 80092ec:	4b02      	ldr	r3, [pc, #8]	@ (80092f8 <malloc+0xc>)
 80092ee:	4601      	mov	r1, r0
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	f000 b825 	b.w	8009340 <_malloc_r>
 80092f6:	bf00      	nop
 80092f8:	2000001c 	.word	0x2000001c

080092fc <sbrk_aligned>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	4e0f      	ldr	r6, [pc, #60]	@ (800933c <sbrk_aligned+0x40>)
 8009300:	460c      	mov	r4, r1
 8009302:	6831      	ldr	r1, [r6, #0]
 8009304:	4605      	mov	r5, r0
 8009306:	b911      	cbnz	r1, 800930e <sbrk_aligned+0x12>
 8009308:	f001 fe0c 	bl	800af24 <_sbrk_r>
 800930c:	6030      	str	r0, [r6, #0]
 800930e:	4621      	mov	r1, r4
 8009310:	4628      	mov	r0, r5
 8009312:	f001 fe07 	bl	800af24 <_sbrk_r>
 8009316:	1c43      	adds	r3, r0, #1
 8009318:	d103      	bne.n	8009322 <sbrk_aligned+0x26>
 800931a:	f04f 34ff 	mov.w	r4, #4294967295
 800931e:	4620      	mov	r0, r4
 8009320:	bd70      	pop	{r4, r5, r6, pc}
 8009322:	1cc4      	adds	r4, r0, #3
 8009324:	f024 0403 	bic.w	r4, r4, #3
 8009328:	42a0      	cmp	r0, r4
 800932a:	d0f8      	beq.n	800931e <sbrk_aligned+0x22>
 800932c:	1a21      	subs	r1, r4, r0
 800932e:	4628      	mov	r0, r5
 8009330:	f001 fdf8 	bl	800af24 <_sbrk_r>
 8009334:	3001      	adds	r0, #1
 8009336:	d1f2      	bne.n	800931e <sbrk_aligned+0x22>
 8009338:	e7ef      	b.n	800931a <sbrk_aligned+0x1e>
 800933a:	bf00      	nop
 800933c:	20005d90 	.word	0x20005d90

08009340 <_malloc_r>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	1ccd      	adds	r5, r1, #3
 8009346:	f025 0503 	bic.w	r5, r5, #3
 800934a:	3508      	adds	r5, #8
 800934c:	2d0c      	cmp	r5, #12
 800934e:	bf38      	it	cc
 8009350:	250c      	movcc	r5, #12
 8009352:	2d00      	cmp	r5, #0
 8009354:	4606      	mov	r6, r0
 8009356:	db01      	blt.n	800935c <_malloc_r+0x1c>
 8009358:	42a9      	cmp	r1, r5
 800935a:	d904      	bls.n	8009366 <_malloc_r+0x26>
 800935c:	230c      	movs	r3, #12
 800935e:	6033      	str	r3, [r6, #0]
 8009360:	2000      	movs	r0, #0
 8009362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800943c <_malloc_r+0xfc>
 800936a:	f000 f869 	bl	8009440 <__malloc_lock>
 800936e:	f8d8 3000 	ldr.w	r3, [r8]
 8009372:	461c      	mov	r4, r3
 8009374:	bb44      	cbnz	r4, 80093c8 <_malloc_r+0x88>
 8009376:	4629      	mov	r1, r5
 8009378:	4630      	mov	r0, r6
 800937a:	f7ff ffbf 	bl	80092fc <sbrk_aligned>
 800937e:	1c43      	adds	r3, r0, #1
 8009380:	4604      	mov	r4, r0
 8009382:	d158      	bne.n	8009436 <_malloc_r+0xf6>
 8009384:	f8d8 4000 	ldr.w	r4, [r8]
 8009388:	4627      	mov	r7, r4
 800938a:	2f00      	cmp	r7, #0
 800938c:	d143      	bne.n	8009416 <_malloc_r+0xd6>
 800938e:	2c00      	cmp	r4, #0
 8009390:	d04b      	beq.n	800942a <_malloc_r+0xea>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	4639      	mov	r1, r7
 8009396:	4630      	mov	r0, r6
 8009398:	eb04 0903 	add.w	r9, r4, r3
 800939c:	f001 fdc2 	bl	800af24 <_sbrk_r>
 80093a0:	4581      	cmp	r9, r0
 80093a2:	d142      	bne.n	800942a <_malloc_r+0xea>
 80093a4:	6821      	ldr	r1, [r4, #0]
 80093a6:	1a6d      	subs	r5, r5, r1
 80093a8:	4629      	mov	r1, r5
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7ff ffa6 	bl	80092fc <sbrk_aligned>
 80093b0:	3001      	adds	r0, #1
 80093b2:	d03a      	beq.n	800942a <_malloc_r+0xea>
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	442b      	add	r3, r5
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	f8d8 3000 	ldr.w	r3, [r8]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	bb62      	cbnz	r2, 800941c <_malloc_r+0xdc>
 80093c2:	f8c8 7000 	str.w	r7, [r8]
 80093c6:	e00f      	b.n	80093e8 <_malloc_r+0xa8>
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	1b52      	subs	r2, r2, r5
 80093cc:	d420      	bmi.n	8009410 <_malloc_r+0xd0>
 80093ce:	2a0b      	cmp	r2, #11
 80093d0:	d917      	bls.n	8009402 <_malloc_r+0xc2>
 80093d2:	1961      	adds	r1, r4, r5
 80093d4:	42a3      	cmp	r3, r4
 80093d6:	6025      	str	r5, [r4, #0]
 80093d8:	bf18      	it	ne
 80093da:	6059      	strne	r1, [r3, #4]
 80093dc:	6863      	ldr	r3, [r4, #4]
 80093de:	bf08      	it	eq
 80093e0:	f8c8 1000 	streq.w	r1, [r8]
 80093e4:	5162      	str	r2, [r4, r5]
 80093e6:	604b      	str	r3, [r1, #4]
 80093e8:	4630      	mov	r0, r6
 80093ea:	f000 f82f 	bl	800944c <__malloc_unlock>
 80093ee:	f104 000b 	add.w	r0, r4, #11
 80093f2:	1d23      	adds	r3, r4, #4
 80093f4:	f020 0007 	bic.w	r0, r0, #7
 80093f8:	1ac2      	subs	r2, r0, r3
 80093fa:	bf1c      	itt	ne
 80093fc:	1a1b      	subne	r3, r3, r0
 80093fe:	50a3      	strne	r3, [r4, r2]
 8009400:	e7af      	b.n	8009362 <_malloc_r+0x22>
 8009402:	6862      	ldr	r2, [r4, #4]
 8009404:	42a3      	cmp	r3, r4
 8009406:	bf0c      	ite	eq
 8009408:	f8c8 2000 	streq.w	r2, [r8]
 800940c:	605a      	strne	r2, [r3, #4]
 800940e:	e7eb      	b.n	80093e8 <_malloc_r+0xa8>
 8009410:	4623      	mov	r3, r4
 8009412:	6864      	ldr	r4, [r4, #4]
 8009414:	e7ae      	b.n	8009374 <_malloc_r+0x34>
 8009416:	463c      	mov	r4, r7
 8009418:	687f      	ldr	r7, [r7, #4]
 800941a:	e7b6      	b.n	800938a <_malloc_r+0x4a>
 800941c:	461a      	mov	r2, r3
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	42a3      	cmp	r3, r4
 8009422:	d1fb      	bne.n	800941c <_malloc_r+0xdc>
 8009424:	2300      	movs	r3, #0
 8009426:	6053      	str	r3, [r2, #4]
 8009428:	e7de      	b.n	80093e8 <_malloc_r+0xa8>
 800942a:	230c      	movs	r3, #12
 800942c:	6033      	str	r3, [r6, #0]
 800942e:	4630      	mov	r0, r6
 8009430:	f000 f80c 	bl	800944c <__malloc_unlock>
 8009434:	e794      	b.n	8009360 <_malloc_r+0x20>
 8009436:	6005      	str	r5, [r0, #0]
 8009438:	e7d6      	b.n	80093e8 <_malloc_r+0xa8>
 800943a:	bf00      	nop
 800943c:	20005d94 	.word	0x20005d94

08009440 <__malloc_lock>:
 8009440:	4801      	ldr	r0, [pc, #4]	@ (8009448 <__malloc_lock+0x8>)
 8009442:	f7ff b8a6 	b.w	8008592 <__retarget_lock_acquire_recursive>
 8009446:	bf00      	nop
 8009448:	20005d8c 	.word	0x20005d8c

0800944c <__malloc_unlock>:
 800944c:	4801      	ldr	r0, [pc, #4]	@ (8009454 <__malloc_unlock+0x8>)
 800944e:	f7ff b8a1 	b.w	8008594 <__retarget_lock_release_recursive>
 8009452:	bf00      	nop
 8009454:	20005d8c 	.word	0x20005d8c

08009458 <_Balloc>:
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	69c6      	ldr	r6, [r0, #28]
 800945c:	4604      	mov	r4, r0
 800945e:	460d      	mov	r5, r1
 8009460:	b976      	cbnz	r6, 8009480 <_Balloc+0x28>
 8009462:	2010      	movs	r0, #16
 8009464:	f7ff ff42 	bl	80092ec <malloc>
 8009468:	4602      	mov	r2, r0
 800946a:	61e0      	str	r0, [r4, #28]
 800946c:	b920      	cbnz	r0, 8009478 <_Balloc+0x20>
 800946e:	4b18      	ldr	r3, [pc, #96]	@ (80094d0 <_Balloc+0x78>)
 8009470:	4818      	ldr	r0, [pc, #96]	@ (80094d4 <_Balloc+0x7c>)
 8009472:	216b      	movs	r1, #107	@ 0x6b
 8009474:	f001 fd70 	bl	800af58 <__assert_func>
 8009478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800947c:	6006      	str	r6, [r0, #0]
 800947e:	60c6      	str	r6, [r0, #12]
 8009480:	69e6      	ldr	r6, [r4, #28]
 8009482:	68f3      	ldr	r3, [r6, #12]
 8009484:	b183      	cbz	r3, 80094a8 <_Balloc+0x50>
 8009486:	69e3      	ldr	r3, [r4, #28]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800948e:	b9b8      	cbnz	r0, 80094c0 <_Balloc+0x68>
 8009490:	2101      	movs	r1, #1
 8009492:	fa01 f605 	lsl.w	r6, r1, r5
 8009496:	1d72      	adds	r2, r6, #5
 8009498:	0092      	lsls	r2, r2, #2
 800949a:	4620      	mov	r0, r4
 800949c:	f001 fd7a 	bl	800af94 <_calloc_r>
 80094a0:	b160      	cbz	r0, 80094bc <_Balloc+0x64>
 80094a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094a6:	e00e      	b.n	80094c6 <_Balloc+0x6e>
 80094a8:	2221      	movs	r2, #33	@ 0x21
 80094aa:	2104      	movs	r1, #4
 80094ac:	4620      	mov	r0, r4
 80094ae:	f001 fd71 	bl	800af94 <_calloc_r>
 80094b2:	69e3      	ldr	r3, [r4, #28]
 80094b4:	60f0      	str	r0, [r6, #12]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e4      	bne.n	8009486 <_Balloc+0x2e>
 80094bc:	2000      	movs	r0, #0
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	6802      	ldr	r2, [r0, #0]
 80094c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094c6:	2300      	movs	r3, #0
 80094c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094cc:	e7f7      	b.n	80094be <_Balloc+0x66>
 80094ce:	bf00      	nop
 80094d0:	0800bfbb 	.word	0x0800bfbb
 80094d4:	0800c03b 	.word	0x0800c03b

080094d8 <_Bfree>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	69c6      	ldr	r6, [r0, #28]
 80094dc:	4605      	mov	r5, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	b976      	cbnz	r6, 8009500 <_Bfree+0x28>
 80094e2:	2010      	movs	r0, #16
 80094e4:	f7ff ff02 	bl	80092ec <malloc>
 80094e8:	4602      	mov	r2, r0
 80094ea:	61e8      	str	r0, [r5, #28]
 80094ec:	b920      	cbnz	r0, 80094f8 <_Bfree+0x20>
 80094ee:	4b09      	ldr	r3, [pc, #36]	@ (8009514 <_Bfree+0x3c>)
 80094f0:	4809      	ldr	r0, [pc, #36]	@ (8009518 <_Bfree+0x40>)
 80094f2:	218f      	movs	r1, #143	@ 0x8f
 80094f4:	f001 fd30 	bl	800af58 <__assert_func>
 80094f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094fc:	6006      	str	r6, [r0, #0]
 80094fe:	60c6      	str	r6, [r0, #12]
 8009500:	b13c      	cbz	r4, 8009512 <_Bfree+0x3a>
 8009502:	69eb      	ldr	r3, [r5, #28]
 8009504:	6862      	ldr	r2, [r4, #4]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800950c:	6021      	str	r1, [r4, #0]
 800950e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	0800bfbb 	.word	0x0800bfbb
 8009518:	0800c03b 	.word	0x0800c03b

0800951c <__multadd>:
 800951c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009520:	690d      	ldr	r5, [r1, #16]
 8009522:	4607      	mov	r7, r0
 8009524:	460c      	mov	r4, r1
 8009526:	461e      	mov	r6, r3
 8009528:	f101 0c14 	add.w	ip, r1, #20
 800952c:	2000      	movs	r0, #0
 800952e:	f8dc 3000 	ldr.w	r3, [ip]
 8009532:	b299      	uxth	r1, r3
 8009534:	fb02 6101 	mla	r1, r2, r1, r6
 8009538:	0c1e      	lsrs	r6, r3, #16
 800953a:	0c0b      	lsrs	r3, r1, #16
 800953c:	fb02 3306 	mla	r3, r2, r6, r3
 8009540:	b289      	uxth	r1, r1
 8009542:	3001      	adds	r0, #1
 8009544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009548:	4285      	cmp	r5, r0
 800954a:	f84c 1b04 	str.w	r1, [ip], #4
 800954e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009552:	dcec      	bgt.n	800952e <__multadd+0x12>
 8009554:	b30e      	cbz	r6, 800959a <__multadd+0x7e>
 8009556:	68a3      	ldr	r3, [r4, #8]
 8009558:	42ab      	cmp	r3, r5
 800955a:	dc19      	bgt.n	8009590 <__multadd+0x74>
 800955c:	6861      	ldr	r1, [r4, #4]
 800955e:	4638      	mov	r0, r7
 8009560:	3101      	adds	r1, #1
 8009562:	f7ff ff79 	bl	8009458 <_Balloc>
 8009566:	4680      	mov	r8, r0
 8009568:	b928      	cbnz	r0, 8009576 <__multadd+0x5a>
 800956a:	4602      	mov	r2, r0
 800956c:	4b0c      	ldr	r3, [pc, #48]	@ (80095a0 <__multadd+0x84>)
 800956e:	480d      	ldr	r0, [pc, #52]	@ (80095a4 <__multadd+0x88>)
 8009570:	21ba      	movs	r1, #186	@ 0xba
 8009572:	f001 fcf1 	bl	800af58 <__assert_func>
 8009576:	6922      	ldr	r2, [r4, #16]
 8009578:	3202      	adds	r2, #2
 800957a:	f104 010c 	add.w	r1, r4, #12
 800957e:	0092      	lsls	r2, r2, #2
 8009580:	300c      	adds	r0, #12
 8009582:	f7ff f808 	bl	8008596 <memcpy>
 8009586:	4621      	mov	r1, r4
 8009588:	4638      	mov	r0, r7
 800958a:	f7ff ffa5 	bl	80094d8 <_Bfree>
 800958e:	4644      	mov	r4, r8
 8009590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009594:	3501      	adds	r5, #1
 8009596:	615e      	str	r6, [r3, #20]
 8009598:	6125      	str	r5, [r4, #16]
 800959a:	4620      	mov	r0, r4
 800959c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a0:	0800c02a 	.word	0x0800c02a
 80095a4:	0800c03b 	.word	0x0800c03b

080095a8 <__s2b>:
 80095a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ac:	460c      	mov	r4, r1
 80095ae:	4615      	mov	r5, r2
 80095b0:	461f      	mov	r7, r3
 80095b2:	2209      	movs	r2, #9
 80095b4:	3308      	adds	r3, #8
 80095b6:	4606      	mov	r6, r0
 80095b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095bc:	2100      	movs	r1, #0
 80095be:	2201      	movs	r2, #1
 80095c0:	429a      	cmp	r2, r3
 80095c2:	db09      	blt.n	80095d8 <__s2b+0x30>
 80095c4:	4630      	mov	r0, r6
 80095c6:	f7ff ff47 	bl	8009458 <_Balloc>
 80095ca:	b940      	cbnz	r0, 80095de <__s2b+0x36>
 80095cc:	4602      	mov	r2, r0
 80095ce:	4b19      	ldr	r3, [pc, #100]	@ (8009634 <__s2b+0x8c>)
 80095d0:	4819      	ldr	r0, [pc, #100]	@ (8009638 <__s2b+0x90>)
 80095d2:	21d3      	movs	r1, #211	@ 0xd3
 80095d4:	f001 fcc0 	bl	800af58 <__assert_func>
 80095d8:	0052      	lsls	r2, r2, #1
 80095da:	3101      	adds	r1, #1
 80095dc:	e7f0      	b.n	80095c0 <__s2b+0x18>
 80095de:	9b08      	ldr	r3, [sp, #32]
 80095e0:	6143      	str	r3, [r0, #20]
 80095e2:	2d09      	cmp	r5, #9
 80095e4:	f04f 0301 	mov.w	r3, #1
 80095e8:	6103      	str	r3, [r0, #16]
 80095ea:	dd16      	ble.n	800961a <__s2b+0x72>
 80095ec:	f104 0909 	add.w	r9, r4, #9
 80095f0:	46c8      	mov	r8, r9
 80095f2:	442c      	add	r4, r5
 80095f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095f8:	4601      	mov	r1, r0
 80095fa:	3b30      	subs	r3, #48	@ 0x30
 80095fc:	220a      	movs	r2, #10
 80095fe:	4630      	mov	r0, r6
 8009600:	f7ff ff8c 	bl	800951c <__multadd>
 8009604:	45a0      	cmp	r8, r4
 8009606:	d1f5      	bne.n	80095f4 <__s2b+0x4c>
 8009608:	f1a5 0408 	sub.w	r4, r5, #8
 800960c:	444c      	add	r4, r9
 800960e:	1b2d      	subs	r5, r5, r4
 8009610:	1963      	adds	r3, r4, r5
 8009612:	42bb      	cmp	r3, r7
 8009614:	db04      	blt.n	8009620 <__s2b+0x78>
 8009616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961a:	340a      	adds	r4, #10
 800961c:	2509      	movs	r5, #9
 800961e:	e7f6      	b.n	800960e <__s2b+0x66>
 8009620:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009624:	4601      	mov	r1, r0
 8009626:	3b30      	subs	r3, #48	@ 0x30
 8009628:	220a      	movs	r2, #10
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff ff76 	bl	800951c <__multadd>
 8009630:	e7ee      	b.n	8009610 <__s2b+0x68>
 8009632:	bf00      	nop
 8009634:	0800c02a 	.word	0x0800c02a
 8009638:	0800c03b 	.word	0x0800c03b

0800963c <__hi0bits>:
 800963c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009640:	4603      	mov	r3, r0
 8009642:	bf36      	itet	cc
 8009644:	0403      	lslcc	r3, r0, #16
 8009646:	2000      	movcs	r0, #0
 8009648:	2010      	movcc	r0, #16
 800964a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800964e:	bf3c      	itt	cc
 8009650:	021b      	lslcc	r3, r3, #8
 8009652:	3008      	addcc	r0, #8
 8009654:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009658:	bf3c      	itt	cc
 800965a:	011b      	lslcc	r3, r3, #4
 800965c:	3004      	addcc	r0, #4
 800965e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009662:	bf3c      	itt	cc
 8009664:	009b      	lslcc	r3, r3, #2
 8009666:	3002      	addcc	r0, #2
 8009668:	2b00      	cmp	r3, #0
 800966a:	db05      	blt.n	8009678 <__hi0bits+0x3c>
 800966c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009670:	f100 0001 	add.w	r0, r0, #1
 8009674:	bf08      	it	eq
 8009676:	2020      	moveq	r0, #32
 8009678:	4770      	bx	lr

0800967a <__lo0bits>:
 800967a:	6803      	ldr	r3, [r0, #0]
 800967c:	4602      	mov	r2, r0
 800967e:	f013 0007 	ands.w	r0, r3, #7
 8009682:	d00b      	beq.n	800969c <__lo0bits+0x22>
 8009684:	07d9      	lsls	r1, r3, #31
 8009686:	d421      	bmi.n	80096cc <__lo0bits+0x52>
 8009688:	0798      	lsls	r0, r3, #30
 800968a:	bf49      	itett	mi
 800968c:	085b      	lsrmi	r3, r3, #1
 800968e:	089b      	lsrpl	r3, r3, #2
 8009690:	2001      	movmi	r0, #1
 8009692:	6013      	strmi	r3, [r2, #0]
 8009694:	bf5c      	itt	pl
 8009696:	6013      	strpl	r3, [r2, #0]
 8009698:	2002      	movpl	r0, #2
 800969a:	4770      	bx	lr
 800969c:	b299      	uxth	r1, r3
 800969e:	b909      	cbnz	r1, 80096a4 <__lo0bits+0x2a>
 80096a0:	0c1b      	lsrs	r3, r3, #16
 80096a2:	2010      	movs	r0, #16
 80096a4:	b2d9      	uxtb	r1, r3
 80096a6:	b909      	cbnz	r1, 80096ac <__lo0bits+0x32>
 80096a8:	3008      	adds	r0, #8
 80096aa:	0a1b      	lsrs	r3, r3, #8
 80096ac:	0719      	lsls	r1, r3, #28
 80096ae:	bf04      	itt	eq
 80096b0:	091b      	lsreq	r3, r3, #4
 80096b2:	3004      	addeq	r0, #4
 80096b4:	0799      	lsls	r1, r3, #30
 80096b6:	bf04      	itt	eq
 80096b8:	089b      	lsreq	r3, r3, #2
 80096ba:	3002      	addeq	r0, #2
 80096bc:	07d9      	lsls	r1, r3, #31
 80096be:	d403      	bmi.n	80096c8 <__lo0bits+0x4e>
 80096c0:	085b      	lsrs	r3, r3, #1
 80096c2:	f100 0001 	add.w	r0, r0, #1
 80096c6:	d003      	beq.n	80096d0 <__lo0bits+0x56>
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	4770      	bx	lr
 80096cc:	2000      	movs	r0, #0
 80096ce:	4770      	bx	lr
 80096d0:	2020      	movs	r0, #32
 80096d2:	4770      	bx	lr

080096d4 <__i2b>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	460c      	mov	r4, r1
 80096d8:	2101      	movs	r1, #1
 80096da:	f7ff febd 	bl	8009458 <_Balloc>
 80096de:	4602      	mov	r2, r0
 80096e0:	b928      	cbnz	r0, 80096ee <__i2b+0x1a>
 80096e2:	4b05      	ldr	r3, [pc, #20]	@ (80096f8 <__i2b+0x24>)
 80096e4:	4805      	ldr	r0, [pc, #20]	@ (80096fc <__i2b+0x28>)
 80096e6:	f240 1145 	movw	r1, #325	@ 0x145
 80096ea:	f001 fc35 	bl	800af58 <__assert_func>
 80096ee:	2301      	movs	r3, #1
 80096f0:	6144      	str	r4, [r0, #20]
 80096f2:	6103      	str	r3, [r0, #16]
 80096f4:	bd10      	pop	{r4, pc}
 80096f6:	bf00      	nop
 80096f8:	0800c02a 	.word	0x0800c02a
 80096fc:	0800c03b 	.word	0x0800c03b

08009700 <__multiply>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	4614      	mov	r4, r2
 8009706:	690a      	ldr	r2, [r1, #16]
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	429a      	cmp	r2, r3
 800970c:	bfa8      	it	ge
 800970e:	4623      	movge	r3, r4
 8009710:	460f      	mov	r7, r1
 8009712:	bfa4      	itt	ge
 8009714:	460c      	movge	r4, r1
 8009716:	461f      	movge	r7, r3
 8009718:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800971c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009720:	68a3      	ldr	r3, [r4, #8]
 8009722:	6861      	ldr	r1, [r4, #4]
 8009724:	eb0a 0609 	add.w	r6, sl, r9
 8009728:	42b3      	cmp	r3, r6
 800972a:	b085      	sub	sp, #20
 800972c:	bfb8      	it	lt
 800972e:	3101      	addlt	r1, #1
 8009730:	f7ff fe92 	bl	8009458 <_Balloc>
 8009734:	b930      	cbnz	r0, 8009744 <__multiply+0x44>
 8009736:	4602      	mov	r2, r0
 8009738:	4b44      	ldr	r3, [pc, #272]	@ (800984c <__multiply+0x14c>)
 800973a:	4845      	ldr	r0, [pc, #276]	@ (8009850 <__multiply+0x150>)
 800973c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009740:	f001 fc0a 	bl	800af58 <__assert_func>
 8009744:	f100 0514 	add.w	r5, r0, #20
 8009748:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800974c:	462b      	mov	r3, r5
 800974e:	2200      	movs	r2, #0
 8009750:	4543      	cmp	r3, r8
 8009752:	d321      	bcc.n	8009798 <__multiply+0x98>
 8009754:	f107 0114 	add.w	r1, r7, #20
 8009758:	f104 0214 	add.w	r2, r4, #20
 800975c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009760:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009764:	9302      	str	r3, [sp, #8]
 8009766:	1b13      	subs	r3, r2, r4
 8009768:	3b15      	subs	r3, #21
 800976a:	f023 0303 	bic.w	r3, r3, #3
 800976e:	3304      	adds	r3, #4
 8009770:	f104 0715 	add.w	r7, r4, #21
 8009774:	42ba      	cmp	r2, r7
 8009776:	bf38      	it	cc
 8009778:	2304      	movcc	r3, #4
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	9b02      	ldr	r3, [sp, #8]
 800977e:	9103      	str	r1, [sp, #12]
 8009780:	428b      	cmp	r3, r1
 8009782:	d80c      	bhi.n	800979e <__multiply+0x9e>
 8009784:	2e00      	cmp	r6, #0
 8009786:	dd03      	ble.n	8009790 <__multiply+0x90>
 8009788:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800978c:	2b00      	cmp	r3, #0
 800978e:	d05b      	beq.n	8009848 <__multiply+0x148>
 8009790:	6106      	str	r6, [r0, #16]
 8009792:	b005      	add	sp, #20
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009798:	f843 2b04 	str.w	r2, [r3], #4
 800979c:	e7d8      	b.n	8009750 <__multiply+0x50>
 800979e:	f8b1 a000 	ldrh.w	sl, [r1]
 80097a2:	f1ba 0f00 	cmp.w	sl, #0
 80097a6:	d024      	beq.n	80097f2 <__multiply+0xf2>
 80097a8:	f104 0e14 	add.w	lr, r4, #20
 80097ac:	46a9      	mov	r9, r5
 80097ae:	f04f 0c00 	mov.w	ip, #0
 80097b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097b6:	f8d9 3000 	ldr.w	r3, [r9]
 80097ba:	fa1f fb87 	uxth.w	fp, r7
 80097be:	b29b      	uxth	r3, r3
 80097c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80097c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80097c8:	f8d9 7000 	ldr.w	r7, [r9]
 80097cc:	4463      	add	r3, ip
 80097ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80097d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80097d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80097da:	b29b      	uxth	r3, r3
 80097dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097e0:	4572      	cmp	r2, lr
 80097e2:	f849 3b04 	str.w	r3, [r9], #4
 80097e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80097ea:	d8e2      	bhi.n	80097b2 <__multiply+0xb2>
 80097ec:	9b01      	ldr	r3, [sp, #4]
 80097ee:	f845 c003 	str.w	ip, [r5, r3]
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80097f8:	3104      	adds	r1, #4
 80097fa:	f1b9 0f00 	cmp.w	r9, #0
 80097fe:	d021      	beq.n	8009844 <__multiply+0x144>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	f104 0c14 	add.w	ip, r4, #20
 8009806:	46ae      	mov	lr, r5
 8009808:	f04f 0a00 	mov.w	sl, #0
 800980c:	f8bc b000 	ldrh.w	fp, [ip]
 8009810:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009814:	fb09 770b 	mla	r7, r9, fp, r7
 8009818:	4457      	add	r7, sl
 800981a:	b29b      	uxth	r3, r3
 800981c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009820:	f84e 3b04 	str.w	r3, [lr], #4
 8009824:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009828:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800982c:	f8be 3000 	ldrh.w	r3, [lr]
 8009830:	fb09 330a 	mla	r3, r9, sl, r3
 8009834:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009838:	4562      	cmp	r2, ip
 800983a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800983e:	d8e5      	bhi.n	800980c <__multiply+0x10c>
 8009840:	9f01      	ldr	r7, [sp, #4]
 8009842:	51eb      	str	r3, [r5, r7]
 8009844:	3504      	adds	r5, #4
 8009846:	e799      	b.n	800977c <__multiply+0x7c>
 8009848:	3e01      	subs	r6, #1
 800984a:	e79b      	b.n	8009784 <__multiply+0x84>
 800984c:	0800c02a 	.word	0x0800c02a
 8009850:	0800c03b 	.word	0x0800c03b

08009854 <__pow5mult>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	4615      	mov	r5, r2
 800985a:	f012 0203 	ands.w	r2, r2, #3
 800985e:	4607      	mov	r7, r0
 8009860:	460e      	mov	r6, r1
 8009862:	d007      	beq.n	8009874 <__pow5mult+0x20>
 8009864:	4c25      	ldr	r4, [pc, #148]	@ (80098fc <__pow5mult+0xa8>)
 8009866:	3a01      	subs	r2, #1
 8009868:	2300      	movs	r3, #0
 800986a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800986e:	f7ff fe55 	bl	800951c <__multadd>
 8009872:	4606      	mov	r6, r0
 8009874:	10ad      	asrs	r5, r5, #2
 8009876:	d03d      	beq.n	80098f4 <__pow5mult+0xa0>
 8009878:	69fc      	ldr	r4, [r7, #28]
 800987a:	b97c      	cbnz	r4, 800989c <__pow5mult+0x48>
 800987c:	2010      	movs	r0, #16
 800987e:	f7ff fd35 	bl	80092ec <malloc>
 8009882:	4602      	mov	r2, r0
 8009884:	61f8      	str	r0, [r7, #28]
 8009886:	b928      	cbnz	r0, 8009894 <__pow5mult+0x40>
 8009888:	4b1d      	ldr	r3, [pc, #116]	@ (8009900 <__pow5mult+0xac>)
 800988a:	481e      	ldr	r0, [pc, #120]	@ (8009904 <__pow5mult+0xb0>)
 800988c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009890:	f001 fb62 	bl	800af58 <__assert_func>
 8009894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009898:	6004      	str	r4, [r0, #0]
 800989a:	60c4      	str	r4, [r0, #12]
 800989c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80098a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098a4:	b94c      	cbnz	r4, 80098ba <__pow5mult+0x66>
 80098a6:	f240 2171 	movw	r1, #625	@ 0x271
 80098aa:	4638      	mov	r0, r7
 80098ac:	f7ff ff12 	bl	80096d4 <__i2b>
 80098b0:	2300      	movs	r3, #0
 80098b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80098b6:	4604      	mov	r4, r0
 80098b8:	6003      	str	r3, [r0, #0]
 80098ba:	f04f 0900 	mov.w	r9, #0
 80098be:	07eb      	lsls	r3, r5, #31
 80098c0:	d50a      	bpl.n	80098d8 <__pow5mult+0x84>
 80098c2:	4631      	mov	r1, r6
 80098c4:	4622      	mov	r2, r4
 80098c6:	4638      	mov	r0, r7
 80098c8:	f7ff ff1a 	bl	8009700 <__multiply>
 80098cc:	4631      	mov	r1, r6
 80098ce:	4680      	mov	r8, r0
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff fe01 	bl	80094d8 <_Bfree>
 80098d6:	4646      	mov	r6, r8
 80098d8:	106d      	asrs	r5, r5, #1
 80098da:	d00b      	beq.n	80098f4 <__pow5mult+0xa0>
 80098dc:	6820      	ldr	r0, [r4, #0]
 80098de:	b938      	cbnz	r0, 80098f0 <__pow5mult+0x9c>
 80098e0:	4622      	mov	r2, r4
 80098e2:	4621      	mov	r1, r4
 80098e4:	4638      	mov	r0, r7
 80098e6:	f7ff ff0b 	bl	8009700 <__multiply>
 80098ea:	6020      	str	r0, [r4, #0]
 80098ec:	f8c0 9000 	str.w	r9, [r0]
 80098f0:	4604      	mov	r4, r0
 80098f2:	e7e4      	b.n	80098be <__pow5mult+0x6a>
 80098f4:	4630      	mov	r0, r6
 80098f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098fa:	bf00      	nop
 80098fc:	0800c094 	.word	0x0800c094
 8009900:	0800bfbb 	.word	0x0800bfbb
 8009904:	0800c03b 	.word	0x0800c03b

08009908 <__lshift>:
 8009908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800990c:	460c      	mov	r4, r1
 800990e:	6849      	ldr	r1, [r1, #4]
 8009910:	6923      	ldr	r3, [r4, #16]
 8009912:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009916:	68a3      	ldr	r3, [r4, #8]
 8009918:	4607      	mov	r7, r0
 800991a:	4691      	mov	r9, r2
 800991c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009920:	f108 0601 	add.w	r6, r8, #1
 8009924:	42b3      	cmp	r3, r6
 8009926:	db0b      	blt.n	8009940 <__lshift+0x38>
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff fd95 	bl	8009458 <_Balloc>
 800992e:	4605      	mov	r5, r0
 8009930:	b948      	cbnz	r0, 8009946 <__lshift+0x3e>
 8009932:	4602      	mov	r2, r0
 8009934:	4b28      	ldr	r3, [pc, #160]	@ (80099d8 <__lshift+0xd0>)
 8009936:	4829      	ldr	r0, [pc, #164]	@ (80099dc <__lshift+0xd4>)
 8009938:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800993c:	f001 fb0c 	bl	800af58 <__assert_func>
 8009940:	3101      	adds	r1, #1
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	e7ee      	b.n	8009924 <__lshift+0x1c>
 8009946:	2300      	movs	r3, #0
 8009948:	f100 0114 	add.w	r1, r0, #20
 800994c:	f100 0210 	add.w	r2, r0, #16
 8009950:	4618      	mov	r0, r3
 8009952:	4553      	cmp	r3, sl
 8009954:	db33      	blt.n	80099be <__lshift+0xb6>
 8009956:	6920      	ldr	r0, [r4, #16]
 8009958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800995c:	f104 0314 	add.w	r3, r4, #20
 8009960:	f019 091f 	ands.w	r9, r9, #31
 8009964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009968:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800996c:	d02b      	beq.n	80099c6 <__lshift+0xbe>
 800996e:	f1c9 0e20 	rsb	lr, r9, #32
 8009972:	468a      	mov	sl, r1
 8009974:	2200      	movs	r2, #0
 8009976:	6818      	ldr	r0, [r3, #0]
 8009978:	fa00 f009 	lsl.w	r0, r0, r9
 800997c:	4310      	orrs	r0, r2
 800997e:	f84a 0b04 	str.w	r0, [sl], #4
 8009982:	f853 2b04 	ldr.w	r2, [r3], #4
 8009986:	459c      	cmp	ip, r3
 8009988:	fa22 f20e 	lsr.w	r2, r2, lr
 800998c:	d8f3      	bhi.n	8009976 <__lshift+0x6e>
 800998e:	ebac 0304 	sub.w	r3, ip, r4
 8009992:	3b15      	subs	r3, #21
 8009994:	f023 0303 	bic.w	r3, r3, #3
 8009998:	3304      	adds	r3, #4
 800999a:	f104 0015 	add.w	r0, r4, #21
 800999e:	4584      	cmp	ip, r0
 80099a0:	bf38      	it	cc
 80099a2:	2304      	movcc	r3, #4
 80099a4:	50ca      	str	r2, [r1, r3]
 80099a6:	b10a      	cbz	r2, 80099ac <__lshift+0xa4>
 80099a8:	f108 0602 	add.w	r6, r8, #2
 80099ac:	3e01      	subs	r6, #1
 80099ae:	4638      	mov	r0, r7
 80099b0:	612e      	str	r6, [r5, #16]
 80099b2:	4621      	mov	r1, r4
 80099b4:	f7ff fd90 	bl	80094d8 <_Bfree>
 80099b8:	4628      	mov	r0, r5
 80099ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099be:	f842 0f04 	str.w	r0, [r2, #4]!
 80099c2:	3301      	adds	r3, #1
 80099c4:	e7c5      	b.n	8009952 <__lshift+0x4a>
 80099c6:	3904      	subs	r1, #4
 80099c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80099d0:	459c      	cmp	ip, r3
 80099d2:	d8f9      	bhi.n	80099c8 <__lshift+0xc0>
 80099d4:	e7ea      	b.n	80099ac <__lshift+0xa4>
 80099d6:	bf00      	nop
 80099d8:	0800c02a 	.word	0x0800c02a
 80099dc:	0800c03b 	.word	0x0800c03b

080099e0 <__mcmp>:
 80099e0:	690a      	ldr	r2, [r1, #16]
 80099e2:	4603      	mov	r3, r0
 80099e4:	6900      	ldr	r0, [r0, #16]
 80099e6:	1a80      	subs	r0, r0, r2
 80099e8:	b530      	push	{r4, r5, lr}
 80099ea:	d10e      	bne.n	8009a0a <__mcmp+0x2a>
 80099ec:	3314      	adds	r3, #20
 80099ee:	3114      	adds	r1, #20
 80099f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a00:	4295      	cmp	r5, r2
 8009a02:	d003      	beq.n	8009a0c <__mcmp+0x2c>
 8009a04:	d205      	bcs.n	8009a12 <__mcmp+0x32>
 8009a06:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0a:	bd30      	pop	{r4, r5, pc}
 8009a0c:	42a3      	cmp	r3, r4
 8009a0e:	d3f3      	bcc.n	80099f8 <__mcmp+0x18>
 8009a10:	e7fb      	b.n	8009a0a <__mcmp+0x2a>
 8009a12:	2001      	movs	r0, #1
 8009a14:	e7f9      	b.n	8009a0a <__mcmp+0x2a>
	...

08009a18 <__mdiff>:
 8009a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	4689      	mov	r9, r1
 8009a1e:	4606      	mov	r6, r0
 8009a20:	4611      	mov	r1, r2
 8009a22:	4648      	mov	r0, r9
 8009a24:	4614      	mov	r4, r2
 8009a26:	f7ff ffdb 	bl	80099e0 <__mcmp>
 8009a2a:	1e05      	subs	r5, r0, #0
 8009a2c:	d112      	bne.n	8009a54 <__mdiff+0x3c>
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7ff fd11 	bl	8009458 <_Balloc>
 8009a36:	4602      	mov	r2, r0
 8009a38:	b928      	cbnz	r0, 8009a46 <__mdiff+0x2e>
 8009a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8009b38 <__mdiff+0x120>)
 8009a3c:	f240 2137 	movw	r1, #567	@ 0x237
 8009a40:	483e      	ldr	r0, [pc, #248]	@ (8009b3c <__mdiff+0x124>)
 8009a42:	f001 fa89 	bl	800af58 <__assert_func>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	b003      	add	sp, #12
 8009a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a54:	bfbc      	itt	lt
 8009a56:	464b      	movlt	r3, r9
 8009a58:	46a1      	movlt	r9, r4
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a60:	bfba      	itte	lt
 8009a62:	461c      	movlt	r4, r3
 8009a64:	2501      	movlt	r5, #1
 8009a66:	2500      	movge	r5, #0
 8009a68:	f7ff fcf6 	bl	8009458 <_Balloc>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	b918      	cbnz	r0, 8009a78 <__mdiff+0x60>
 8009a70:	4b31      	ldr	r3, [pc, #196]	@ (8009b38 <__mdiff+0x120>)
 8009a72:	f240 2145 	movw	r1, #581	@ 0x245
 8009a76:	e7e3      	b.n	8009a40 <__mdiff+0x28>
 8009a78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a7c:	6926      	ldr	r6, [r4, #16]
 8009a7e:	60c5      	str	r5, [r0, #12]
 8009a80:	f109 0310 	add.w	r3, r9, #16
 8009a84:	f109 0514 	add.w	r5, r9, #20
 8009a88:	f104 0e14 	add.w	lr, r4, #20
 8009a8c:	f100 0b14 	add.w	fp, r0, #20
 8009a90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	46d9      	mov	r9, fp
 8009a9c:	f04f 0c00 	mov.w	ip, #0
 8009aa0:	9b01      	ldr	r3, [sp, #4]
 8009aa2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009aa6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009aaa:	9301      	str	r3, [sp, #4]
 8009aac:	fa1f f38a 	uxth.w	r3, sl
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	b283      	uxth	r3, r0
 8009ab4:	1acb      	subs	r3, r1, r3
 8009ab6:	0c00      	lsrs	r0, r0, #16
 8009ab8:	4463      	add	r3, ip
 8009aba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009abe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ac8:	4576      	cmp	r6, lr
 8009aca:	f849 3b04 	str.w	r3, [r9], #4
 8009ace:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ad2:	d8e5      	bhi.n	8009aa0 <__mdiff+0x88>
 8009ad4:	1b33      	subs	r3, r6, r4
 8009ad6:	3b15      	subs	r3, #21
 8009ad8:	f023 0303 	bic.w	r3, r3, #3
 8009adc:	3415      	adds	r4, #21
 8009ade:	3304      	adds	r3, #4
 8009ae0:	42a6      	cmp	r6, r4
 8009ae2:	bf38      	it	cc
 8009ae4:	2304      	movcc	r3, #4
 8009ae6:	441d      	add	r5, r3
 8009ae8:	445b      	add	r3, fp
 8009aea:	461e      	mov	r6, r3
 8009aec:	462c      	mov	r4, r5
 8009aee:	4544      	cmp	r4, r8
 8009af0:	d30e      	bcc.n	8009b10 <__mdiff+0xf8>
 8009af2:	f108 0103 	add.w	r1, r8, #3
 8009af6:	1b49      	subs	r1, r1, r5
 8009af8:	f021 0103 	bic.w	r1, r1, #3
 8009afc:	3d03      	subs	r5, #3
 8009afe:	45a8      	cmp	r8, r5
 8009b00:	bf38      	it	cc
 8009b02:	2100      	movcc	r1, #0
 8009b04:	440b      	add	r3, r1
 8009b06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b0a:	b191      	cbz	r1, 8009b32 <__mdiff+0x11a>
 8009b0c:	6117      	str	r7, [r2, #16]
 8009b0e:	e79d      	b.n	8009a4c <__mdiff+0x34>
 8009b10:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b14:	46e6      	mov	lr, ip
 8009b16:	0c08      	lsrs	r0, r1, #16
 8009b18:	fa1c fc81 	uxtah	ip, ip, r1
 8009b1c:	4471      	add	r1, lr
 8009b1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b22:	b289      	uxth	r1, r1
 8009b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b28:	f846 1b04 	str.w	r1, [r6], #4
 8009b2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b30:	e7dd      	b.n	8009aee <__mdiff+0xd6>
 8009b32:	3f01      	subs	r7, #1
 8009b34:	e7e7      	b.n	8009b06 <__mdiff+0xee>
 8009b36:	bf00      	nop
 8009b38:	0800c02a 	.word	0x0800c02a
 8009b3c:	0800c03b 	.word	0x0800c03b

08009b40 <__ulp>:
 8009b40:	b082      	sub	sp, #8
 8009b42:	ed8d 0b00 	vstr	d0, [sp]
 8009b46:	9a01      	ldr	r2, [sp, #4]
 8009b48:	4b0f      	ldr	r3, [pc, #60]	@ (8009b88 <__ulp+0x48>)
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dc08      	bgt.n	8009b66 <__ulp+0x26>
 8009b54:	425b      	negs	r3, r3
 8009b56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009b5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b5e:	da04      	bge.n	8009b6a <__ulp+0x2a>
 8009b60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009b64:	4113      	asrs	r3, r2
 8009b66:	2200      	movs	r2, #0
 8009b68:	e008      	b.n	8009b7c <__ulp+0x3c>
 8009b6a:	f1a2 0314 	sub.w	r3, r2, #20
 8009b6e:	2b1e      	cmp	r3, #30
 8009b70:	bfda      	itte	le
 8009b72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009b76:	40da      	lsrle	r2, r3
 8009b78:	2201      	movgt	r2, #1
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	ec41 0b10 	vmov	d0, r0, r1
 8009b84:	b002      	add	sp, #8
 8009b86:	4770      	bx	lr
 8009b88:	7ff00000 	.word	0x7ff00000

08009b8c <__b2d>:
 8009b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b90:	6906      	ldr	r6, [r0, #16]
 8009b92:	f100 0814 	add.w	r8, r0, #20
 8009b96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b9a:	1f37      	subs	r7, r6, #4
 8009b9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	f7ff fd4b 	bl	800963c <__hi0bits>
 8009ba6:	f1c0 0320 	rsb	r3, r0, #32
 8009baa:	280a      	cmp	r0, #10
 8009bac:	600b      	str	r3, [r1, #0]
 8009bae:	491b      	ldr	r1, [pc, #108]	@ (8009c1c <__b2d+0x90>)
 8009bb0:	dc15      	bgt.n	8009bde <__b2d+0x52>
 8009bb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8009bb6:	fa22 f30c 	lsr.w	r3, r2, ip
 8009bba:	45b8      	cmp	r8, r7
 8009bbc:	ea43 0501 	orr.w	r5, r3, r1
 8009bc0:	bf34      	ite	cc
 8009bc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009bc6:	2300      	movcs	r3, #0
 8009bc8:	3015      	adds	r0, #21
 8009bca:	fa02 f000 	lsl.w	r0, r2, r0
 8009bce:	fa23 f30c 	lsr.w	r3, r3, ip
 8009bd2:	4303      	orrs	r3, r0
 8009bd4:	461c      	mov	r4, r3
 8009bd6:	ec45 4b10 	vmov	d0, r4, r5
 8009bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bde:	45b8      	cmp	r8, r7
 8009be0:	bf3a      	itte	cc
 8009be2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009be6:	f1a6 0708 	subcc.w	r7, r6, #8
 8009bea:	2300      	movcs	r3, #0
 8009bec:	380b      	subs	r0, #11
 8009bee:	d012      	beq.n	8009c16 <__b2d+0x8a>
 8009bf0:	f1c0 0120 	rsb	r1, r0, #32
 8009bf4:	fa23 f401 	lsr.w	r4, r3, r1
 8009bf8:	4082      	lsls	r2, r0
 8009bfa:	4322      	orrs	r2, r4
 8009bfc:	4547      	cmp	r7, r8
 8009bfe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009c02:	bf8c      	ite	hi
 8009c04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009c08:	2200      	movls	r2, #0
 8009c0a:	4083      	lsls	r3, r0
 8009c0c:	40ca      	lsrs	r2, r1
 8009c0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009c12:	4313      	orrs	r3, r2
 8009c14:	e7de      	b.n	8009bd4 <__b2d+0x48>
 8009c16:	ea42 0501 	orr.w	r5, r2, r1
 8009c1a:	e7db      	b.n	8009bd4 <__b2d+0x48>
 8009c1c:	3ff00000 	.word	0x3ff00000

08009c20 <__d2b>:
 8009c20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c24:	460f      	mov	r7, r1
 8009c26:	2101      	movs	r1, #1
 8009c28:	ec59 8b10 	vmov	r8, r9, d0
 8009c2c:	4616      	mov	r6, r2
 8009c2e:	f7ff fc13 	bl	8009458 <_Balloc>
 8009c32:	4604      	mov	r4, r0
 8009c34:	b930      	cbnz	r0, 8009c44 <__d2b+0x24>
 8009c36:	4602      	mov	r2, r0
 8009c38:	4b23      	ldr	r3, [pc, #140]	@ (8009cc8 <__d2b+0xa8>)
 8009c3a:	4824      	ldr	r0, [pc, #144]	@ (8009ccc <__d2b+0xac>)
 8009c3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c40:	f001 f98a 	bl	800af58 <__assert_func>
 8009c44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c4c:	b10d      	cbz	r5, 8009c52 <__d2b+0x32>
 8009c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	f1b8 0300 	subs.w	r3, r8, #0
 8009c58:	d023      	beq.n	8009ca2 <__d2b+0x82>
 8009c5a:	4668      	mov	r0, sp
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	f7ff fd0c 	bl	800967a <__lo0bits>
 8009c62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c66:	b1d0      	cbz	r0, 8009c9e <__d2b+0x7e>
 8009c68:	f1c0 0320 	rsb	r3, r0, #32
 8009c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c70:	430b      	orrs	r3, r1
 8009c72:	40c2      	lsrs	r2, r0
 8009c74:	6163      	str	r3, [r4, #20]
 8009c76:	9201      	str	r2, [sp, #4]
 8009c78:	9b01      	ldr	r3, [sp, #4]
 8009c7a:	61a3      	str	r3, [r4, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	bf0c      	ite	eq
 8009c80:	2201      	moveq	r2, #1
 8009c82:	2202      	movne	r2, #2
 8009c84:	6122      	str	r2, [r4, #16]
 8009c86:	b1a5      	cbz	r5, 8009cb2 <__d2b+0x92>
 8009c88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c8c:	4405      	add	r5, r0
 8009c8e:	603d      	str	r5, [r7, #0]
 8009c90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c94:	6030      	str	r0, [r6, #0]
 8009c96:	4620      	mov	r0, r4
 8009c98:	b003      	add	sp, #12
 8009c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c9e:	6161      	str	r1, [r4, #20]
 8009ca0:	e7ea      	b.n	8009c78 <__d2b+0x58>
 8009ca2:	a801      	add	r0, sp, #4
 8009ca4:	f7ff fce9 	bl	800967a <__lo0bits>
 8009ca8:	9b01      	ldr	r3, [sp, #4]
 8009caa:	6163      	str	r3, [r4, #20]
 8009cac:	3020      	adds	r0, #32
 8009cae:	2201      	movs	r2, #1
 8009cb0:	e7e8      	b.n	8009c84 <__d2b+0x64>
 8009cb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009cba:	6038      	str	r0, [r7, #0]
 8009cbc:	6918      	ldr	r0, [r3, #16]
 8009cbe:	f7ff fcbd 	bl	800963c <__hi0bits>
 8009cc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cc6:	e7e5      	b.n	8009c94 <__d2b+0x74>
 8009cc8:	0800c02a 	.word	0x0800c02a
 8009ccc:	0800c03b 	.word	0x0800c03b

08009cd0 <__ratio>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	b085      	sub	sp, #20
 8009cd6:	e9cd 1000 	strd	r1, r0, [sp]
 8009cda:	a902      	add	r1, sp, #8
 8009cdc:	f7ff ff56 	bl	8009b8c <__b2d>
 8009ce0:	9800      	ldr	r0, [sp, #0]
 8009ce2:	a903      	add	r1, sp, #12
 8009ce4:	ec55 4b10 	vmov	r4, r5, d0
 8009ce8:	f7ff ff50 	bl	8009b8c <__b2d>
 8009cec:	9b01      	ldr	r3, [sp, #4]
 8009cee:	6919      	ldr	r1, [r3, #16]
 8009cf0:	9b00      	ldr	r3, [sp, #0]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	1ac9      	subs	r1, r1, r3
 8009cf6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009cfa:	1a9b      	subs	r3, r3, r2
 8009cfc:	ec5b ab10 	vmov	sl, fp, d0
 8009d00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bfce      	itee	gt
 8009d08:	462a      	movgt	r2, r5
 8009d0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d0e:	465a      	movle	r2, fp
 8009d10:	462f      	mov	r7, r5
 8009d12:	46d9      	mov	r9, fp
 8009d14:	bfcc      	ite	gt
 8009d16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009d1e:	464b      	mov	r3, r9
 8009d20:	4652      	mov	r2, sl
 8009d22:	4620      	mov	r0, r4
 8009d24:	4639      	mov	r1, r7
 8009d26:	f7f6 fd91 	bl	800084c <__aeabi_ddiv>
 8009d2a:	ec41 0b10 	vmov	d0, r0, r1
 8009d2e:	b005      	add	sp, #20
 8009d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d34 <__copybits>:
 8009d34:	3901      	subs	r1, #1
 8009d36:	b570      	push	{r4, r5, r6, lr}
 8009d38:	1149      	asrs	r1, r1, #5
 8009d3a:	6914      	ldr	r4, [r2, #16]
 8009d3c:	3101      	adds	r1, #1
 8009d3e:	f102 0314 	add.w	r3, r2, #20
 8009d42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d4a:	1f05      	subs	r5, r0, #4
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	d30c      	bcc.n	8009d6a <__copybits+0x36>
 8009d50:	1aa3      	subs	r3, r4, r2
 8009d52:	3b11      	subs	r3, #17
 8009d54:	f023 0303 	bic.w	r3, r3, #3
 8009d58:	3211      	adds	r2, #17
 8009d5a:	42a2      	cmp	r2, r4
 8009d5c:	bf88      	it	hi
 8009d5e:	2300      	movhi	r3, #0
 8009d60:	4418      	add	r0, r3
 8009d62:	2300      	movs	r3, #0
 8009d64:	4288      	cmp	r0, r1
 8009d66:	d305      	bcc.n	8009d74 <__copybits+0x40>
 8009d68:	bd70      	pop	{r4, r5, r6, pc}
 8009d6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d72:	e7eb      	b.n	8009d4c <__copybits+0x18>
 8009d74:	f840 3b04 	str.w	r3, [r0], #4
 8009d78:	e7f4      	b.n	8009d64 <__copybits+0x30>

08009d7a <__any_on>:
 8009d7a:	f100 0214 	add.w	r2, r0, #20
 8009d7e:	6900      	ldr	r0, [r0, #16]
 8009d80:	114b      	asrs	r3, r1, #5
 8009d82:	4298      	cmp	r0, r3
 8009d84:	b510      	push	{r4, lr}
 8009d86:	db11      	blt.n	8009dac <__any_on+0x32>
 8009d88:	dd0a      	ble.n	8009da0 <__any_on+0x26>
 8009d8a:	f011 011f 	ands.w	r1, r1, #31
 8009d8e:	d007      	beq.n	8009da0 <__any_on+0x26>
 8009d90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d94:	fa24 f001 	lsr.w	r0, r4, r1
 8009d98:	fa00 f101 	lsl.w	r1, r0, r1
 8009d9c:	428c      	cmp	r4, r1
 8009d9e:	d10b      	bne.n	8009db8 <__any_on+0x3e>
 8009da0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d803      	bhi.n	8009db0 <__any_on+0x36>
 8009da8:	2000      	movs	r0, #0
 8009daa:	bd10      	pop	{r4, pc}
 8009dac:	4603      	mov	r3, r0
 8009dae:	e7f7      	b.n	8009da0 <__any_on+0x26>
 8009db0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009db4:	2900      	cmp	r1, #0
 8009db6:	d0f5      	beq.n	8009da4 <__any_on+0x2a>
 8009db8:	2001      	movs	r0, #1
 8009dba:	e7f6      	b.n	8009daa <__any_on+0x30>

08009dbc <sulp>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	ec45 4b10 	vmov	d0, r4, r5
 8009dc6:	4616      	mov	r6, r2
 8009dc8:	f7ff feba 	bl	8009b40 <__ulp>
 8009dcc:	ec51 0b10 	vmov	r0, r1, d0
 8009dd0:	b17e      	cbz	r6, 8009df2 <sulp+0x36>
 8009dd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009dd6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	dd09      	ble.n	8009df2 <sulp+0x36>
 8009dde:	051b      	lsls	r3, r3, #20
 8009de0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009de4:	2400      	movs	r4, #0
 8009de6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009dea:	4622      	mov	r2, r4
 8009dec:	462b      	mov	r3, r5
 8009dee:	f7f6 fc03 	bl	80005f8 <__aeabi_dmul>
 8009df2:	ec41 0b10 	vmov	d0, r0, r1
 8009df6:	bd70      	pop	{r4, r5, r6, pc}

08009df8 <_strtod_l>:
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	b09f      	sub	sp, #124	@ 0x7c
 8009dfe:	460c      	mov	r4, r1
 8009e00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009e02:	2200      	movs	r2, #0
 8009e04:	921a      	str	r2, [sp, #104]	@ 0x68
 8009e06:	9005      	str	r0, [sp, #20]
 8009e08:	f04f 0a00 	mov.w	sl, #0
 8009e0c:	f04f 0b00 	mov.w	fp, #0
 8009e10:	460a      	mov	r2, r1
 8009e12:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e14:	7811      	ldrb	r1, [r2, #0]
 8009e16:	292b      	cmp	r1, #43	@ 0x2b
 8009e18:	d04a      	beq.n	8009eb0 <_strtod_l+0xb8>
 8009e1a:	d838      	bhi.n	8009e8e <_strtod_l+0x96>
 8009e1c:	290d      	cmp	r1, #13
 8009e1e:	d832      	bhi.n	8009e86 <_strtod_l+0x8e>
 8009e20:	2908      	cmp	r1, #8
 8009e22:	d832      	bhi.n	8009e8a <_strtod_l+0x92>
 8009e24:	2900      	cmp	r1, #0
 8009e26:	d03b      	beq.n	8009ea0 <_strtod_l+0xa8>
 8009e28:	2200      	movs	r2, #0
 8009e2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009e2e:	782a      	ldrb	r2, [r5, #0]
 8009e30:	2a30      	cmp	r2, #48	@ 0x30
 8009e32:	f040 80b3 	bne.w	8009f9c <_strtod_l+0x1a4>
 8009e36:	786a      	ldrb	r2, [r5, #1]
 8009e38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e3c:	2a58      	cmp	r2, #88	@ 0x58
 8009e3e:	d16e      	bne.n	8009f1e <_strtod_l+0x126>
 8009e40:	9302      	str	r3, [sp, #8]
 8009e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	4a8e      	ldr	r2, [pc, #568]	@ (800a084 <_strtod_l+0x28c>)
 8009e4c:	9805      	ldr	r0, [sp, #20]
 8009e4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e50:	a919      	add	r1, sp, #100	@ 0x64
 8009e52:	f001 f91b 	bl	800b08c <__gethex>
 8009e56:	f010 060f 	ands.w	r6, r0, #15
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	d005      	beq.n	8009e6a <_strtod_l+0x72>
 8009e5e:	2e06      	cmp	r6, #6
 8009e60:	d128      	bne.n	8009eb4 <_strtod_l+0xbc>
 8009e62:	3501      	adds	r5, #1
 8009e64:	2300      	movs	r3, #0
 8009e66:	9519      	str	r5, [sp, #100]	@ 0x64
 8009e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f040 858e 	bne.w	800a98e <_strtod_l+0xb96>
 8009e72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e74:	b1cb      	cbz	r3, 8009eaa <_strtod_l+0xb2>
 8009e76:	4652      	mov	r2, sl
 8009e78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009e7c:	ec43 2b10 	vmov	d0, r2, r3
 8009e80:	b01f      	add	sp, #124	@ 0x7c
 8009e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e86:	2920      	cmp	r1, #32
 8009e88:	d1ce      	bne.n	8009e28 <_strtod_l+0x30>
 8009e8a:	3201      	adds	r2, #1
 8009e8c:	e7c1      	b.n	8009e12 <_strtod_l+0x1a>
 8009e8e:	292d      	cmp	r1, #45	@ 0x2d
 8009e90:	d1ca      	bne.n	8009e28 <_strtod_l+0x30>
 8009e92:	2101      	movs	r1, #1
 8009e94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e96:	1c51      	adds	r1, r2, #1
 8009e98:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e9a:	7852      	ldrb	r2, [r2, #1]
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	d1c5      	bne.n	8009e2c <_strtod_l+0x34>
 8009ea0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ea2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f040 8570 	bne.w	800a98a <_strtod_l+0xb92>
 8009eaa:	4652      	mov	r2, sl
 8009eac:	465b      	mov	r3, fp
 8009eae:	e7e5      	b.n	8009e7c <_strtod_l+0x84>
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	e7ef      	b.n	8009e94 <_strtod_l+0x9c>
 8009eb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009eb6:	b13a      	cbz	r2, 8009ec8 <_strtod_l+0xd0>
 8009eb8:	2135      	movs	r1, #53	@ 0x35
 8009eba:	a81c      	add	r0, sp, #112	@ 0x70
 8009ebc:	f7ff ff3a 	bl	8009d34 <__copybits>
 8009ec0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ec2:	9805      	ldr	r0, [sp, #20]
 8009ec4:	f7ff fb08 	bl	80094d8 <_Bfree>
 8009ec8:	3e01      	subs	r6, #1
 8009eca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009ecc:	2e04      	cmp	r6, #4
 8009ece:	d806      	bhi.n	8009ede <_strtod_l+0xe6>
 8009ed0:	e8df f006 	tbb	[pc, r6]
 8009ed4:	201d0314 	.word	0x201d0314
 8009ed8:	14          	.byte	0x14
 8009ed9:	00          	.byte	0x00
 8009eda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ede:	05e1      	lsls	r1, r4, #23
 8009ee0:	bf48      	it	mi
 8009ee2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ee6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009eea:	0d1b      	lsrs	r3, r3, #20
 8009eec:	051b      	lsls	r3, r3, #20
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1bb      	bne.n	8009e6a <_strtod_l+0x72>
 8009ef2:	f7fe fb23 	bl	800853c <__errno>
 8009ef6:	2322      	movs	r3, #34	@ 0x22
 8009ef8:	6003      	str	r3, [r0, #0]
 8009efa:	e7b6      	b.n	8009e6a <_strtod_l+0x72>
 8009efc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009f00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009f04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009f08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f0c:	e7e7      	b.n	8009ede <_strtod_l+0xe6>
 8009f0e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a08c <_strtod_l+0x294>
 8009f12:	e7e4      	b.n	8009ede <_strtod_l+0xe6>
 8009f14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009f18:	f04f 3aff 	mov.w	sl, #4294967295
 8009f1c:	e7df      	b.n	8009ede <_strtod_l+0xe6>
 8009f1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f24:	785b      	ldrb	r3, [r3, #1]
 8009f26:	2b30      	cmp	r3, #48	@ 0x30
 8009f28:	d0f9      	beq.n	8009f1e <_strtod_l+0x126>
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d09d      	beq.n	8009e6a <_strtod_l+0x72>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f34:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f36:	2300      	movs	r3, #0
 8009f38:	9308      	str	r3, [sp, #32]
 8009f3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f3c:	461f      	mov	r7, r3
 8009f3e:	220a      	movs	r2, #10
 8009f40:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f42:	7805      	ldrb	r5, [r0, #0]
 8009f44:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f48:	b2d9      	uxtb	r1, r3
 8009f4a:	2909      	cmp	r1, #9
 8009f4c:	d928      	bls.n	8009fa0 <_strtod_l+0x1a8>
 8009f4e:	494e      	ldr	r1, [pc, #312]	@ (800a088 <_strtod_l+0x290>)
 8009f50:	2201      	movs	r2, #1
 8009f52:	f000 ffd5 	bl	800af00 <strncmp>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d032      	beq.n	8009fc0 <_strtod_l+0x1c8>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	462a      	mov	r2, r5
 8009f5e:	4681      	mov	r9, r0
 8009f60:	463d      	mov	r5, r7
 8009f62:	4603      	mov	r3, r0
 8009f64:	2a65      	cmp	r2, #101	@ 0x65
 8009f66:	d001      	beq.n	8009f6c <_strtod_l+0x174>
 8009f68:	2a45      	cmp	r2, #69	@ 0x45
 8009f6a:	d114      	bne.n	8009f96 <_strtod_l+0x19e>
 8009f6c:	b91d      	cbnz	r5, 8009f76 <_strtod_l+0x17e>
 8009f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f70:	4302      	orrs	r2, r0
 8009f72:	d095      	beq.n	8009ea0 <_strtod_l+0xa8>
 8009f74:	2500      	movs	r5, #0
 8009f76:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009f78:	1c62      	adds	r2, r4, #1
 8009f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f7c:	7862      	ldrb	r2, [r4, #1]
 8009f7e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f80:	d077      	beq.n	800a072 <_strtod_l+0x27a>
 8009f82:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f84:	d07b      	beq.n	800a07e <_strtod_l+0x286>
 8009f86:	f04f 0c00 	mov.w	ip, #0
 8009f8a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f8e:	2909      	cmp	r1, #9
 8009f90:	f240 8082 	bls.w	800a098 <_strtod_l+0x2a0>
 8009f94:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f96:	f04f 0800 	mov.w	r8, #0
 8009f9a:	e0a2      	b.n	800a0e2 <_strtod_l+0x2ea>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e7c7      	b.n	8009f30 <_strtod_l+0x138>
 8009fa0:	2f08      	cmp	r7, #8
 8009fa2:	bfd5      	itete	le
 8009fa4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009fa6:	9908      	ldrgt	r1, [sp, #32]
 8009fa8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009fac:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009fb0:	f100 0001 	add.w	r0, r0, #1
 8009fb4:	bfd4      	ite	le
 8009fb6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009fb8:	9308      	strgt	r3, [sp, #32]
 8009fba:	3701      	adds	r7, #1
 8009fbc:	9019      	str	r0, [sp, #100]	@ 0x64
 8009fbe:	e7bf      	b.n	8009f40 <_strtod_l+0x148>
 8009fc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fc6:	785a      	ldrb	r2, [r3, #1]
 8009fc8:	b37f      	cbz	r7, 800a02a <_strtod_l+0x232>
 8009fca:	4681      	mov	r9, r0
 8009fcc:	463d      	mov	r5, r7
 8009fce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009fd2:	2b09      	cmp	r3, #9
 8009fd4:	d912      	bls.n	8009ffc <_strtod_l+0x204>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e7c4      	b.n	8009f64 <_strtod_l+0x16c>
 8009fda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fe0:	785a      	ldrb	r2, [r3, #1]
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	2a30      	cmp	r2, #48	@ 0x30
 8009fe6:	d0f8      	beq.n	8009fda <_strtod_l+0x1e2>
 8009fe8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	f200 84d3 	bhi.w	800a998 <_strtod_l+0xba0>
 8009ff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ff4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ff6:	4681      	mov	r9, r0
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	3a30      	subs	r2, #48	@ 0x30
 8009ffe:	f100 0301 	add.w	r3, r0, #1
 800a002:	d02a      	beq.n	800a05a <_strtod_l+0x262>
 800a004:	4499      	add	r9, r3
 800a006:	eb00 0c05 	add.w	ip, r0, r5
 800a00a:	462b      	mov	r3, r5
 800a00c:	210a      	movs	r1, #10
 800a00e:	4563      	cmp	r3, ip
 800a010:	d10d      	bne.n	800a02e <_strtod_l+0x236>
 800a012:	1c69      	adds	r1, r5, #1
 800a014:	4401      	add	r1, r0
 800a016:	4428      	add	r0, r5
 800a018:	2808      	cmp	r0, #8
 800a01a:	dc16      	bgt.n	800a04a <_strtod_l+0x252>
 800a01c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a01e:	230a      	movs	r3, #10
 800a020:	fb03 2300 	mla	r3, r3, r0, r2
 800a024:	930a      	str	r3, [sp, #40]	@ 0x28
 800a026:	2300      	movs	r3, #0
 800a028:	e018      	b.n	800a05c <_strtod_l+0x264>
 800a02a:	4638      	mov	r0, r7
 800a02c:	e7da      	b.n	8009fe4 <_strtod_l+0x1ec>
 800a02e:	2b08      	cmp	r3, #8
 800a030:	f103 0301 	add.w	r3, r3, #1
 800a034:	dc03      	bgt.n	800a03e <_strtod_l+0x246>
 800a036:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a038:	434e      	muls	r6, r1
 800a03a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a03c:	e7e7      	b.n	800a00e <_strtod_l+0x216>
 800a03e:	2b10      	cmp	r3, #16
 800a040:	bfde      	ittt	le
 800a042:	9e08      	ldrle	r6, [sp, #32]
 800a044:	434e      	mulle	r6, r1
 800a046:	9608      	strle	r6, [sp, #32]
 800a048:	e7e1      	b.n	800a00e <_strtod_l+0x216>
 800a04a:	280f      	cmp	r0, #15
 800a04c:	dceb      	bgt.n	800a026 <_strtod_l+0x22e>
 800a04e:	9808      	ldr	r0, [sp, #32]
 800a050:	230a      	movs	r3, #10
 800a052:	fb03 2300 	mla	r3, r3, r0, r2
 800a056:	9308      	str	r3, [sp, #32]
 800a058:	e7e5      	b.n	800a026 <_strtod_l+0x22e>
 800a05a:	4629      	mov	r1, r5
 800a05c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a05e:	1c50      	adds	r0, r2, #1
 800a060:	9019      	str	r0, [sp, #100]	@ 0x64
 800a062:	7852      	ldrb	r2, [r2, #1]
 800a064:	4618      	mov	r0, r3
 800a066:	460d      	mov	r5, r1
 800a068:	e7b1      	b.n	8009fce <_strtod_l+0x1d6>
 800a06a:	f04f 0900 	mov.w	r9, #0
 800a06e:	2301      	movs	r3, #1
 800a070:	e77d      	b.n	8009f6e <_strtod_l+0x176>
 800a072:	f04f 0c00 	mov.w	ip, #0
 800a076:	1ca2      	adds	r2, r4, #2
 800a078:	9219      	str	r2, [sp, #100]	@ 0x64
 800a07a:	78a2      	ldrb	r2, [r4, #2]
 800a07c:	e785      	b.n	8009f8a <_strtod_l+0x192>
 800a07e:	f04f 0c01 	mov.w	ip, #1
 800a082:	e7f8      	b.n	800a076 <_strtod_l+0x27e>
 800a084:	0800c1a8 	.word	0x0800c1a8
 800a088:	0800c190 	.word	0x0800c190
 800a08c:	7ff00000 	.word	0x7ff00000
 800a090:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a092:	1c51      	adds	r1, r2, #1
 800a094:	9119      	str	r1, [sp, #100]	@ 0x64
 800a096:	7852      	ldrb	r2, [r2, #1]
 800a098:	2a30      	cmp	r2, #48	@ 0x30
 800a09a:	d0f9      	beq.n	800a090 <_strtod_l+0x298>
 800a09c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a0a0:	2908      	cmp	r1, #8
 800a0a2:	f63f af78 	bhi.w	8009f96 <_strtod_l+0x19e>
 800a0a6:	3a30      	subs	r2, #48	@ 0x30
 800a0a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a0ae:	f04f 080a 	mov.w	r8, #10
 800a0b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0b4:	1c56      	adds	r6, r2, #1
 800a0b6:	9619      	str	r6, [sp, #100]	@ 0x64
 800a0b8:	7852      	ldrb	r2, [r2, #1]
 800a0ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a0be:	f1be 0f09 	cmp.w	lr, #9
 800a0c2:	d939      	bls.n	800a138 <_strtod_l+0x340>
 800a0c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a0c6:	1a76      	subs	r6, r6, r1
 800a0c8:	2e08      	cmp	r6, #8
 800a0ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a0ce:	dc03      	bgt.n	800a0d8 <_strtod_l+0x2e0>
 800a0d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a0d2:	4588      	cmp	r8, r1
 800a0d4:	bfa8      	it	ge
 800a0d6:	4688      	movge	r8, r1
 800a0d8:	f1bc 0f00 	cmp.w	ip, #0
 800a0dc:	d001      	beq.n	800a0e2 <_strtod_l+0x2ea>
 800a0de:	f1c8 0800 	rsb	r8, r8, #0
 800a0e2:	2d00      	cmp	r5, #0
 800a0e4:	d14e      	bne.n	800a184 <_strtod_l+0x38c>
 800a0e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0e8:	4308      	orrs	r0, r1
 800a0ea:	f47f aebe 	bne.w	8009e6a <_strtod_l+0x72>
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f47f aed6 	bne.w	8009ea0 <_strtod_l+0xa8>
 800a0f4:	2a69      	cmp	r2, #105	@ 0x69
 800a0f6:	d028      	beq.n	800a14a <_strtod_l+0x352>
 800a0f8:	dc25      	bgt.n	800a146 <_strtod_l+0x34e>
 800a0fa:	2a49      	cmp	r2, #73	@ 0x49
 800a0fc:	d025      	beq.n	800a14a <_strtod_l+0x352>
 800a0fe:	2a4e      	cmp	r2, #78	@ 0x4e
 800a100:	f47f aece 	bne.w	8009ea0 <_strtod_l+0xa8>
 800a104:	499b      	ldr	r1, [pc, #620]	@ (800a374 <_strtod_l+0x57c>)
 800a106:	a819      	add	r0, sp, #100	@ 0x64
 800a108:	f001 f9e2 	bl	800b4d0 <__match>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	f43f aec7 	beq.w	8009ea0 <_strtod_l+0xa8>
 800a112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	2b28      	cmp	r3, #40	@ 0x28
 800a118:	d12e      	bne.n	800a178 <_strtod_l+0x380>
 800a11a:	4997      	ldr	r1, [pc, #604]	@ (800a378 <_strtod_l+0x580>)
 800a11c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a11e:	a819      	add	r0, sp, #100	@ 0x64
 800a120:	f001 f9ea 	bl	800b4f8 <__hexnan>
 800a124:	2805      	cmp	r0, #5
 800a126:	d127      	bne.n	800a178 <_strtod_l+0x380>
 800a128:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a12a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a12e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a132:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a136:	e698      	b.n	8009e6a <_strtod_l+0x72>
 800a138:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a13a:	fb08 2101 	mla	r1, r8, r1, r2
 800a13e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a142:	920e      	str	r2, [sp, #56]	@ 0x38
 800a144:	e7b5      	b.n	800a0b2 <_strtod_l+0x2ba>
 800a146:	2a6e      	cmp	r2, #110	@ 0x6e
 800a148:	e7da      	b.n	800a100 <_strtod_l+0x308>
 800a14a:	498c      	ldr	r1, [pc, #560]	@ (800a37c <_strtod_l+0x584>)
 800a14c:	a819      	add	r0, sp, #100	@ 0x64
 800a14e:	f001 f9bf 	bl	800b4d0 <__match>
 800a152:	2800      	cmp	r0, #0
 800a154:	f43f aea4 	beq.w	8009ea0 <_strtod_l+0xa8>
 800a158:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a15a:	4989      	ldr	r1, [pc, #548]	@ (800a380 <_strtod_l+0x588>)
 800a15c:	3b01      	subs	r3, #1
 800a15e:	a819      	add	r0, sp, #100	@ 0x64
 800a160:	9319      	str	r3, [sp, #100]	@ 0x64
 800a162:	f001 f9b5 	bl	800b4d0 <__match>
 800a166:	b910      	cbnz	r0, 800a16e <_strtod_l+0x376>
 800a168:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a16a:	3301      	adds	r3, #1
 800a16c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a16e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a390 <_strtod_l+0x598>
 800a172:	f04f 0a00 	mov.w	sl, #0
 800a176:	e678      	b.n	8009e6a <_strtod_l+0x72>
 800a178:	4882      	ldr	r0, [pc, #520]	@ (800a384 <_strtod_l+0x58c>)
 800a17a:	f000 fee5 	bl	800af48 <nan>
 800a17e:	ec5b ab10 	vmov	sl, fp, d0
 800a182:	e672      	b.n	8009e6a <_strtod_l+0x72>
 800a184:	eba8 0309 	sub.w	r3, r8, r9
 800a188:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a18a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a18c:	2f00      	cmp	r7, #0
 800a18e:	bf08      	it	eq
 800a190:	462f      	moveq	r7, r5
 800a192:	2d10      	cmp	r5, #16
 800a194:	462c      	mov	r4, r5
 800a196:	bfa8      	it	ge
 800a198:	2410      	movge	r4, #16
 800a19a:	f7f6 f9b3 	bl	8000504 <__aeabi_ui2d>
 800a19e:	2d09      	cmp	r5, #9
 800a1a0:	4682      	mov	sl, r0
 800a1a2:	468b      	mov	fp, r1
 800a1a4:	dc13      	bgt.n	800a1ce <_strtod_l+0x3d6>
 800a1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f43f ae5e 	beq.w	8009e6a <_strtod_l+0x72>
 800a1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b0:	dd78      	ble.n	800a2a4 <_strtod_l+0x4ac>
 800a1b2:	2b16      	cmp	r3, #22
 800a1b4:	dc5f      	bgt.n	800a276 <_strtod_l+0x47e>
 800a1b6:	4974      	ldr	r1, [pc, #464]	@ (800a388 <_strtod_l+0x590>)
 800a1b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	465b      	mov	r3, fp
 800a1c4:	f7f6 fa18 	bl	80005f8 <__aeabi_dmul>
 800a1c8:	4682      	mov	sl, r0
 800a1ca:	468b      	mov	fp, r1
 800a1cc:	e64d      	b.n	8009e6a <_strtod_l+0x72>
 800a1ce:	4b6e      	ldr	r3, [pc, #440]	@ (800a388 <_strtod_l+0x590>)
 800a1d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a1d8:	f7f6 fa0e 	bl	80005f8 <__aeabi_dmul>
 800a1dc:	4682      	mov	sl, r0
 800a1de:	9808      	ldr	r0, [sp, #32]
 800a1e0:	468b      	mov	fp, r1
 800a1e2:	f7f6 f98f 	bl	8000504 <__aeabi_ui2d>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4650      	mov	r0, sl
 800a1ec:	4659      	mov	r1, fp
 800a1ee:	f7f6 f84d 	bl	800028c <__adddf3>
 800a1f2:	2d0f      	cmp	r5, #15
 800a1f4:	4682      	mov	sl, r0
 800a1f6:	468b      	mov	fp, r1
 800a1f8:	ddd5      	ble.n	800a1a6 <_strtod_l+0x3ae>
 800a1fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1fc:	1b2c      	subs	r4, r5, r4
 800a1fe:	441c      	add	r4, r3
 800a200:	2c00      	cmp	r4, #0
 800a202:	f340 8096 	ble.w	800a332 <_strtod_l+0x53a>
 800a206:	f014 030f 	ands.w	r3, r4, #15
 800a20a:	d00a      	beq.n	800a222 <_strtod_l+0x42a>
 800a20c:	495e      	ldr	r1, [pc, #376]	@ (800a388 <_strtod_l+0x590>)
 800a20e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a212:	4652      	mov	r2, sl
 800a214:	465b      	mov	r3, fp
 800a216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a21a:	f7f6 f9ed 	bl	80005f8 <__aeabi_dmul>
 800a21e:	4682      	mov	sl, r0
 800a220:	468b      	mov	fp, r1
 800a222:	f034 040f 	bics.w	r4, r4, #15
 800a226:	d073      	beq.n	800a310 <_strtod_l+0x518>
 800a228:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a22c:	dd48      	ble.n	800a2c0 <_strtod_l+0x4c8>
 800a22e:	2400      	movs	r4, #0
 800a230:	46a0      	mov	r8, r4
 800a232:	940a      	str	r4, [sp, #40]	@ 0x28
 800a234:	46a1      	mov	r9, r4
 800a236:	9a05      	ldr	r2, [sp, #20]
 800a238:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a390 <_strtod_l+0x598>
 800a23c:	2322      	movs	r3, #34	@ 0x22
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	f04f 0a00 	mov.w	sl, #0
 800a244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a246:	2b00      	cmp	r3, #0
 800a248:	f43f ae0f 	beq.w	8009e6a <_strtod_l+0x72>
 800a24c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a24e:	9805      	ldr	r0, [sp, #20]
 800a250:	f7ff f942 	bl	80094d8 <_Bfree>
 800a254:	9805      	ldr	r0, [sp, #20]
 800a256:	4649      	mov	r1, r9
 800a258:	f7ff f93e 	bl	80094d8 <_Bfree>
 800a25c:	9805      	ldr	r0, [sp, #20]
 800a25e:	4641      	mov	r1, r8
 800a260:	f7ff f93a 	bl	80094d8 <_Bfree>
 800a264:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a266:	9805      	ldr	r0, [sp, #20]
 800a268:	f7ff f936 	bl	80094d8 <_Bfree>
 800a26c:	9805      	ldr	r0, [sp, #20]
 800a26e:	4621      	mov	r1, r4
 800a270:	f7ff f932 	bl	80094d8 <_Bfree>
 800a274:	e5f9      	b.n	8009e6a <_strtod_l+0x72>
 800a276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a278:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a27c:	4293      	cmp	r3, r2
 800a27e:	dbbc      	blt.n	800a1fa <_strtod_l+0x402>
 800a280:	4c41      	ldr	r4, [pc, #260]	@ (800a388 <_strtod_l+0x590>)
 800a282:	f1c5 050f 	rsb	r5, r5, #15
 800a286:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a28a:	4652      	mov	r2, sl
 800a28c:	465b      	mov	r3, fp
 800a28e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a292:	f7f6 f9b1 	bl	80005f8 <__aeabi_dmul>
 800a296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a298:	1b5d      	subs	r5, r3, r5
 800a29a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a29e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a2a2:	e78f      	b.n	800a1c4 <_strtod_l+0x3cc>
 800a2a4:	3316      	adds	r3, #22
 800a2a6:	dba8      	blt.n	800a1fa <_strtod_l+0x402>
 800a2a8:	4b37      	ldr	r3, [pc, #220]	@ (800a388 <_strtod_l+0x590>)
 800a2aa:	eba9 0808 	sub.w	r8, r9, r8
 800a2ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a2b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a2b6:	4650      	mov	r0, sl
 800a2b8:	4659      	mov	r1, fp
 800a2ba:	f7f6 fac7 	bl	800084c <__aeabi_ddiv>
 800a2be:	e783      	b.n	800a1c8 <_strtod_l+0x3d0>
 800a2c0:	4b32      	ldr	r3, [pc, #200]	@ (800a38c <_strtod_l+0x594>)
 800a2c2:	9308      	str	r3, [sp, #32]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	1124      	asrs	r4, r4, #4
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	461e      	mov	r6, r3
 800a2ce:	2c01      	cmp	r4, #1
 800a2d0:	dc21      	bgt.n	800a316 <_strtod_l+0x51e>
 800a2d2:	b10b      	cbz	r3, 800a2d8 <_strtod_l+0x4e0>
 800a2d4:	4682      	mov	sl, r0
 800a2d6:	468b      	mov	fp, r1
 800a2d8:	492c      	ldr	r1, [pc, #176]	@ (800a38c <_strtod_l+0x594>)
 800a2da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a2de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a2e2:	4652      	mov	r2, sl
 800a2e4:	465b      	mov	r3, fp
 800a2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ea:	f7f6 f985 	bl	80005f8 <__aeabi_dmul>
 800a2ee:	4b28      	ldr	r3, [pc, #160]	@ (800a390 <_strtod_l+0x598>)
 800a2f0:	460a      	mov	r2, r1
 800a2f2:	400b      	ands	r3, r1
 800a2f4:	4927      	ldr	r1, [pc, #156]	@ (800a394 <_strtod_l+0x59c>)
 800a2f6:	428b      	cmp	r3, r1
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	d898      	bhi.n	800a22e <_strtod_l+0x436>
 800a2fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a300:	428b      	cmp	r3, r1
 800a302:	bf86      	itte	hi
 800a304:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a398 <_strtod_l+0x5a0>
 800a308:	f04f 3aff 	movhi.w	sl, #4294967295
 800a30c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a310:	2300      	movs	r3, #0
 800a312:	9308      	str	r3, [sp, #32]
 800a314:	e07a      	b.n	800a40c <_strtod_l+0x614>
 800a316:	07e2      	lsls	r2, r4, #31
 800a318:	d505      	bpl.n	800a326 <_strtod_l+0x52e>
 800a31a:	9b08      	ldr	r3, [sp, #32]
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	f7f6 f96a 	bl	80005f8 <__aeabi_dmul>
 800a324:	2301      	movs	r3, #1
 800a326:	9a08      	ldr	r2, [sp, #32]
 800a328:	3208      	adds	r2, #8
 800a32a:	3601      	adds	r6, #1
 800a32c:	1064      	asrs	r4, r4, #1
 800a32e:	9208      	str	r2, [sp, #32]
 800a330:	e7cd      	b.n	800a2ce <_strtod_l+0x4d6>
 800a332:	d0ed      	beq.n	800a310 <_strtod_l+0x518>
 800a334:	4264      	negs	r4, r4
 800a336:	f014 020f 	ands.w	r2, r4, #15
 800a33a:	d00a      	beq.n	800a352 <_strtod_l+0x55a>
 800a33c:	4b12      	ldr	r3, [pc, #72]	@ (800a388 <_strtod_l+0x590>)
 800a33e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a342:	4650      	mov	r0, sl
 800a344:	4659      	mov	r1, fp
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f7f6 fa7f 	bl	800084c <__aeabi_ddiv>
 800a34e:	4682      	mov	sl, r0
 800a350:	468b      	mov	fp, r1
 800a352:	1124      	asrs	r4, r4, #4
 800a354:	d0dc      	beq.n	800a310 <_strtod_l+0x518>
 800a356:	2c1f      	cmp	r4, #31
 800a358:	dd20      	ble.n	800a39c <_strtod_l+0x5a4>
 800a35a:	2400      	movs	r4, #0
 800a35c:	46a0      	mov	r8, r4
 800a35e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a360:	46a1      	mov	r9, r4
 800a362:	9a05      	ldr	r2, [sp, #20]
 800a364:	2322      	movs	r3, #34	@ 0x22
 800a366:	f04f 0a00 	mov.w	sl, #0
 800a36a:	f04f 0b00 	mov.w	fp, #0
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	e768      	b.n	800a244 <_strtod_l+0x44c>
 800a372:	bf00      	nop
 800a374:	0800bf82 	.word	0x0800bf82
 800a378:	0800c194 	.word	0x0800c194
 800a37c:	0800bf7a 	.word	0x0800bf7a
 800a380:	0800bfb1 	.word	0x0800bfb1
 800a384:	0800c33d 	.word	0x0800c33d
 800a388:	0800c0c8 	.word	0x0800c0c8
 800a38c:	0800c0a0 	.word	0x0800c0a0
 800a390:	7ff00000 	.word	0x7ff00000
 800a394:	7ca00000 	.word	0x7ca00000
 800a398:	7fefffff 	.word	0x7fefffff
 800a39c:	f014 0310 	ands.w	r3, r4, #16
 800a3a0:	bf18      	it	ne
 800a3a2:	236a      	movne	r3, #106	@ 0x6a
 800a3a4:	4ea9      	ldr	r6, [pc, #676]	@ (800a64c <_strtod_l+0x854>)
 800a3a6:	9308      	str	r3, [sp, #32]
 800a3a8:	4650      	mov	r0, sl
 800a3aa:	4659      	mov	r1, fp
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	07e2      	lsls	r2, r4, #31
 800a3b0:	d504      	bpl.n	800a3bc <_strtod_l+0x5c4>
 800a3b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3b6:	f7f6 f91f 	bl	80005f8 <__aeabi_dmul>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	1064      	asrs	r4, r4, #1
 800a3be:	f106 0608 	add.w	r6, r6, #8
 800a3c2:	d1f4      	bne.n	800a3ae <_strtod_l+0x5b6>
 800a3c4:	b10b      	cbz	r3, 800a3ca <_strtod_l+0x5d2>
 800a3c6:	4682      	mov	sl, r0
 800a3c8:	468b      	mov	fp, r1
 800a3ca:	9b08      	ldr	r3, [sp, #32]
 800a3cc:	b1b3      	cbz	r3, 800a3fc <_strtod_l+0x604>
 800a3ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a3d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	4659      	mov	r1, fp
 800a3da:	dd0f      	ble.n	800a3fc <_strtod_l+0x604>
 800a3dc:	2b1f      	cmp	r3, #31
 800a3de:	dd55      	ble.n	800a48c <_strtod_l+0x694>
 800a3e0:	2b34      	cmp	r3, #52	@ 0x34
 800a3e2:	bfde      	ittt	le
 800a3e4:	f04f 33ff 	movle.w	r3, #4294967295
 800a3e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a3ec:	4093      	lslle	r3, r2
 800a3ee:	f04f 0a00 	mov.w	sl, #0
 800a3f2:	bfcc      	ite	gt
 800a3f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a3f8:	ea03 0b01 	andle.w	fp, r3, r1
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2300      	movs	r3, #0
 800a400:	4650      	mov	r0, sl
 800a402:	4659      	mov	r1, fp
 800a404:	f7f6 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d1a6      	bne.n	800a35a <_strtod_l+0x562>
 800a40c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a412:	9805      	ldr	r0, [sp, #20]
 800a414:	462b      	mov	r3, r5
 800a416:	463a      	mov	r2, r7
 800a418:	f7ff f8c6 	bl	80095a8 <__s2b>
 800a41c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a41e:	2800      	cmp	r0, #0
 800a420:	f43f af05 	beq.w	800a22e <_strtod_l+0x436>
 800a424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a426:	2a00      	cmp	r2, #0
 800a428:	eba9 0308 	sub.w	r3, r9, r8
 800a42c:	bfa8      	it	ge
 800a42e:	2300      	movge	r3, #0
 800a430:	9312      	str	r3, [sp, #72]	@ 0x48
 800a432:	2400      	movs	r4, #0
 800a434:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a438:	9316      	str	r3, [sp, #88]	@ 0x58
 800a43a:	46a0      	mov	r8, r4
 800a43c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a43e:	9805      	ldr	r0, [sp, #20]
 800a440:	6859      	ldr	r1, [r3, #4]
 800a442:	f7ff f809 	bl	8009458 <_Balloc>
 800a446:	4681      	mov	r9, r0
 800a448:	2800      	cmp	r0, #0
 800a44a:	f43f aef4 	beq.w	800a236 <_strtod_l+0x43e>
 800a44e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a450:	691a      	ldr	r2, [r3, #16]
 800a452:	3202      	adds	r2, #2
 800a454:	f103 010c 	add.w	r1, r3, #12
 800a458:	0092      	lsls	r2, r2, #2
 800a45a:	300c      	adds	r0, #12
 800a45c:	f7fe f89b 	bl	8008596 <memcpy>
 800a460:	ec4b ab10 	vmov	d0, sl, fp
 800a464:	9805      	ldr	r0, [sp, #20]
 800a466:	aa1c      	add	r2, sp, #112	@ 0x70
 800a468:	a91b      	add	r1, sp, #108	@ 0x6c
 800a46a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a46e:	f7ff fbd7 	bl	8009c20 <__d2b>
 800a472:	901a      	str	r0, [sp, #104]	@ 0x68
 800a474:	2800      	cmp	r0, #0
 800a476:	f43f aede 	beq.w	800a236 <_strtod_l+0x43e>
 800a47a:	9805      	ldr	r0, [sp, #20]
 800a47c:	2101      	movs	r1, #1
 800a47e:	f7ff f929 	bl	80096d4 <__i2b>
 800a482:	4680      	mov	r8, r0
 800a484:	b948      	cbnz	r0, 800a49a <_strtod_l+0x6a2>
 800a486:	f04f 0800 	mov.w	r8, #0
 800a48a:	e6d4      	b.n	800a236 <_strtod_l+0x43e>
 800a48c:	f04f 32ff 	mov.w	r2, #4294967295
 800a490:	fa02 f303 	lsl.w	r3, r2, r3
 800a494:	ea03 0a0a 	and.w	sl, r3, sl
 800a498:	e7b0      	b.n	800a3fc <_strtod_l+0x604>
 800a49a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a49c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	bfab      	itete	ge
 800a4a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a4a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a4a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a4a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a4aa:	bfac      	ite	ge
 800a4ac:	18ef      	addge	r7, r5, r3
 800a4ae:	1b5e      	sublt	r6, r3, r5
 800a4b0:	9b08      	ldr	r3, [sp, #32]
 800a4b2:	1aed      	subs	r5, r5, r3
 800a4b4:	4415      	add	r5, r2
 800a4b6:	4b66      	ldr	r3, [pc, #408]	@ (800a650 <_strtod_l+0x858>)
 800a4b8:	3d01      	subs	r5, #1
 800a4ba:	429d      	cmp	r5, r3
 800a4bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a4c0:	da50      	bge.n	800a564 <_strtod_l+0x76c>
 800a4c2:	1b5b      	subs	r3, r3, r5
 800a4c4:	2b1f      	cmp	r3, #31
 800a4c6:	eba2 0203 	sub.w	r2, r2, r3
 800a4ca:	f04f 0101 	mov.w	r1, #1
 800a4ce:	dc3d      	bgt.n	800a54c <_strtod_l+0x754>
 800a4d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4da:	18bd      	adds	r5, r7, r2
 800a4dc:	9b08      	ldr	r3, [sp, #32]
 800a4de:	42af      	cmp	r7, r5
 800a4e0:	4416      	add	r6, r2
 800a4e2:	441e      	add	r6, r3
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	bfa8      	it	ge
 800a4e8:	462b      	movge	r3, r5
 800a4ea:	42b3      	cmp	r3, r6
 800a4ec:	bfa8      	it	ge
 800a4ee:	4633      	movge	r3, r6
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	bfc2      	ittt	gt
 800a4f4:	1aed      	subgt	r5, r5, r3
 800a4f6:	1af6      	subgt	r6, r6, r3
 800a4f8:	1aff      	subgt	r7, r7, r3
 800a4fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dd16      	ble.n	800a52e <_strtod_l+0x736>
 800a500:	4641      	mov	r1, r8
 800a502:	9805      	ldr	r0, [sp, #20]
 800a504:	461a      	mov	r2, r3
 800a506:	f7ff f9a5 	bl	8009854 <__pow5mult>
 800a50a:	4680      	mov	r8, r0
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d0ba      	beq.n	800a486 <_strtod_l+0x68e>
 800a510:	4601      	mov	r1, r0
 800a512:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a514:	9805      	ldr	r0, [sp, #20]
 800a516:	f7ff f8f3 	bl	8009700 <__multiply>
 800a51a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f43f ae8a 	beq.w	800a236 <_strtod_l+0x43e>
 800a522:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a524:	9805      	ldr	r0, [sp, #20]
 800a526:	f7fe ffd7 	bl	80094d8 <_Bfree>
 800a52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a52c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a52e:	2d00      	cmp	r5, #0
 800a530:	dc1d      	bgt.n	800a56e <_strtod_l+0x776>
 800a532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a534:	2b00      	cmp	r3, #0
 800a536:	dd23      	ble.n	800a580 <_strtod_l+0x788>
 800a538:	4649      	mov	r1, r9
 800a53a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a53c:	9805      	ldr	r0, [sp, #20]
 800a53e:	f7ff f989 	bl	8009854 <__pow5mult>
 800a542:	4681      	mov	r9, r0
 800a544:	b9e0      	cbnz	r0, 800a580 <_strtod_l+0x788>
 800a546:	f04f 0900 	mov.w	r9, #0
 800a54a:	e674      	b.n	800a236 <_strtod_l+0x43e>
 800a54c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a550:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a554:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a558:	35e2      	adds	r5, #226	@ 0xe2
 800a55a:	fa01 f305 	lsl.w	r3, r1, r5
 800a55e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a560:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a562:	e7ba      	b.n	800a4da <_strtod_l+0x6e2>
 800a564:	2300      	movs	r3, #0
 800a566:	9310      	str	r3, [sp, #64]	@ 0x40
 800a568:	2301      	movs	r3, #1
 800a56a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a56c:	e7b5      	b.n	800a4da <_strtod_l+0x6e2>
 800a56e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a570:	9805      	ldr	r0, [sp, #20]
 800a572:	462a      	mov	r2, r5
 800a574:	f7ff f9c8 	bl	8009908 <__lshift>
 800a578:	901a      	str	r0, [sp, #104]	@ 0x68
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d1d9      	bne.n	800a532 <_strtod_l+0x73a>
 800a57e:	e65a      	b.n	800a236 <_strtod_l+0x43e>
 800a580:	2e00      	cmp	r6, #0
 800a582:	dd07      	ble.n	800a594 <_strtod_l+0x79c>
 800a584:	4649      	mov	r1, r9
 800a586:	9805      	ldr	r0, [sp, #20]
 800a588:	4632      	mov	r2, r6
 800a58a:	f7ff f9bd 	bl	8009908 <__lshift>
 800a58e:	4681      	mov	r9, r0
 800a590:	2800      	cmp	r0, #0
 800a592:	d0d8      	beq.n	800a546 <_strtod_l+0x74e>
 800a594:	2f00      	cmp	r7, #0
 800a596:	dd08      	ble.n	800a5aa <_strtod_l+0x7b2>
 800a598:	4641      	mov	r1, r8
 800a59a:	9805      	ldr	r0, [sp, #20]
 800a59c:	463a      	mov	r2, r7
 800a59e:	f7ff f9b3 	bl	8009908 <__lshift>
 800a5a2:	4680      	mov	r8, r0
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f43f ae46 	beq.w	800a236 <_strtod_l+0x43e>
 800a5aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5ac:	9805      	ldr	r0, [sp, #20]
 800a5ae:	464a      	mov	r2, r9
 800a5b0:	f7ff fa32 	bl	8009a18 <__mdiff>
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	f43f ae3d 	beq.w	800a236 <_strtod_l+0x43e>
 800a5bc:	68c3      	ldr	r3, [r0, #12]
 800a5be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60c3      	str	r3, [r0, #12]
 800a5c4:	4641      	mov	r1, r8
 800a5c6:	f7ff fa0b 	bl	80099e0 <__mcmp>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	da46      	bge.n	800a65c <_strtod_l+0x864>
 800a5ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5d0:	ea53 030a 	orrs.w	r3, r3, sl
 800a5d4:	d16c      	bne.n	800a6b0 <_strtod_l+0x8b8>
 800a5d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d168      	bne.n	800a6b0 <_strtod_l+0x8b8>
 800a5de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5e2:	0d1b      	lsrs	r3, r3, #20
 800a5e4:	051b      	lsls	r3, r3, #20
 800a5e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5ea:	d961      	bls.n	800a6b0 <_strtod_l+0x8b8>
 800a5ec:	6963      	ldr	r3, [r4, #20]
 800a5ee:	b913      	cbnz	r3, 800a5f6 <_strtod_l+0x7fe>
 800a5f0:	6923      	ldr	r3, [r4, #16]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	dd5c      	ble.n	800a6b0 <_strtod_l+0x8b8>
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	9805      	ldr	r0, [sp, #20]
 800a5fc:	f7ff f984 	bl	8009908 <__lshift>
 800a600:	4641      	mov	r1, r8
 800a602:	4604      	mov	r4, r0
 800a604:	f7ff f9ec 	bl	80099e0 <__mcmp>
 800a608:	2800      	cmp	r0, #0
 800a60a:	dd51      	ble.n	800a6b0 <_strtod_l+0x8b8>
 800a60c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a610:	9a08      	ldr	r2, [sp, #32]
 800a612:	0d1b      	lsrs	r3, r3, #20
 800a614:	051b      	lsls	r3, r3, #20
 800a616:	2a00      	cmp	r2, #0
 800a618:	d06b      	beq.n	800a6f2 <_strtod_l+0x8fa>
 800a61a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a61e:	d868      	bhi.n	800a6f2 <_strtod_l+0x8fa>
 800a620:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a624:	f67f ae9d 	bls.w	800a362 <_strtod_l+0x56a>
 800a628:	4b0a      	ldr	r3, [pc, #40]	@ (800a654 <_strtod_l+0x85c>)
 800a62a:	4650      	mov	r0, sl
 800a62c:	4659      	mov	r1, fp
 800a62e:	2200      	movs	r2, #0
 800a630:	f7f5 ffe2 	bl	80005f8 <__aeabi_dmul>
 800a634:	4b08      	ldr	r3, [pc, #32]	@ (800a658 <_strtod_l+0x860>)
 800a636:	400b      	ands	r3, r1
 800a638:	4682      	mov	sl, r0
 800a63a:	468b      	mov	fp, r1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f47f ae05 	bne.w	800a24c <_strtod_l+0x454>
 800a642:	9a05      	ldr	r2, [sp, #20]
 800a644:	2322      	movs	r3, #34	@ 0x22
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	e600      	b.n	800a24c <_strtod_l+0x454>
 800a64a:	bf00      	nop
 800a64c:	0800c1c0 	.word	0x0800c1c0
 800a650:	fffffc02 	.word	0xfffffc02
 800a654:	39500000 	.word	0x39500000
 800a658:	7ff00000 	.word	0x7ff00000
 800a65c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a660:	d165      	bne.n	800a72e <_strtod_l+0x936>
 800a662:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a664:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a668:	b35a      	cbz	r2, 800a6c2 <_strtod_l+0x8ca>
 800a66a:	4a9f      	ldr	r2, [pc, #636]	@ (800a8e8 <_strtod_l+0xaf0>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d12b      	bne.n	800a6c8 <_strtod_l+0x8d0>
 800a670:	9b08      	ldr	r3, [sp, #32]
 800a672:	4651      	mov	r1, sl
 800a674:	b303      	cbz	r3, 800a6b8 <_strtod_l+0x8c0>
 800a676:	4b9d      	ldr	r3, [pc, #628]	@ (800a8ec <_strtod_l+0xaf4>)
 800a678:	465a      	mov	r2, fp
 800a67a:	4013      	ands	r3, r2
 800a67c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a680:	f04f 32ff 	mov.w	r2, #4294967295
 800a684:	d81b      	bhi.n	800a6be <_strtod_l+0x8c6>
 800a686:	0d1b      	lsrs	r3, r3, #20
 800a688:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a68c:	fa02 f303 	lsl.w	r3, r2, r3
 800a690:	4299      	cmp	r1, r3
 800a692:	d119      	bne.n	800a6c8 <_strtod_l+0x8d0>
 800a694:	4b96      	ldr	r3, [pc, #600]	@ (800a8f0 <_strtod_l+0xaf8>)
 800a696:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a698:	429a      	cmp	r2, r3
 800a69a:	d102      	bne.n	800a6a2 <_strtod_l+0x8aa>
 800a69c:	3101      	adds	r1, #1
 800a69e:	f43f adca 	beq.w	800a236 <_strtod_l+0x43e>
 800a6a2:	4b92      	ldr	r3, [pc, #584]	@ (800a8ec <_strtod_l+0xaf4>)
 800a6a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6a6:	401a      	ands	r2, r3
 800a6a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a6ac:	f04f 0a00 	mov.w	sl, #0
 800a6b0:	9b08      	ldr	r3, [sp, #32]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1b8      	bne.n	800a628 <_strtod_l+0x830>
 800a6b6:	e5c9      	b.n	800a24c <_strtod_l+0x454>
 800a6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6bc:	e7e8      	b.n	800a690 <_strtod_l+0x898>
 800a6be:	4613      	mov	r3, r2
 800a6c0:	e7e6      	b.n	800a690 <_strtod_l+0x898>
 800a6c2:	ea53 030a 	orrs.w	r3, r3, sl
 800a6c6:	d0a1      	beq.n	800a60c <_strtod_l+0x814>
 800a6c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a6ca:	b1db      	cbz	r3, 800a704 <_strtod_l+0x90c>
 800a6cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6ce:	4213      	tst	r3, r2
 800a6d0:	d0ee      	beq.n	800a6b0 <_strtod_l+0x8b8>
 800a6d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6d4:	9a08      	ldr	r2, [sp, #32]
 800a6d6:	4650      	mov	r0, sl
 800a6d8:	4659      	mov	r1, fp
 800a6da:	b1bb      	cbz	r3, 800a70c <_strtod_l+0x914>
 800a6dc:	f7ff fb6e 	bl	8009dbc <sulp>
 800a6e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6e4:	ec53 2b10 	vmov	r2, r3, d0
 800a6e8:	f7f5 fdd0 	bl	800028c <__adddf3>
 800a6ec:	4682      	mov	sl, r0
 800a6ee:	468b      	mov	fp, r1
 800a6f0:	e7de      	b.n	800a6b0 <_strtod_l+0x8b8>
 800a6f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a6f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6fe:	f04f 3aff 	mov.w	sl, #4294967295
 800a702:	e7d5      	b.n	800a6b0 <_strtod_l+0x8b8>
 800a704:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a706:	ea13 0f0a 	tst.w	r3, sl
 800a70a:	e7e1      	b.n	800a6d0 <_strtod_l+0x8d8>
 800a70c:	f7ff fb56 	bl	8009dbc <sulp>
 800a710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a714:	ec53 2b10 	vmov	r2, r3, d0
 800a718:	f7f5 fdb6 	bl	8000288 <__aeabi_dsub>
 800a71c:	2200      	movs	r2, #0
 800a71e:	2300      	movs	r3, #0
 800a720:	4682      	mov	sl, r0
 800a722:	468b      	mov	fp, r1
 800a724:	f7f6 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d0c1      	beq.n	800a6b0 <_strtod_l+0x8b8>
 800a72c:	e619      	b.n	800a362 <_strtod_l+0x56a>
 800a72e:	4641      	mov	r1, r8
 800a730:	4620      	mov	r0, r4
 800a732:	f7ff facd 	bl	8009cd0 <__ratio>
 800a736:	ec57 6b10 	vmov	r6, r7, d0
 800a73a:	2200      	movs	r2, #0
 800a73c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f6 f9d4 	bl	8000af0 <__aeabi_dcmple>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d06f      	beq.n	800a82c <_strtod_l+0xa34>
 800a74c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d17a      	bne.n	800a848 <_strtod_l+0xa50>
 800a752:	f1ba 0f00 	cmp.w	sl, #0
 800a756:	d158      	bne.n	800a80a <_strtod_l+0xa12>
 800a758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a75a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d15a      	bne.n	800a818 <_strtod_l+0xa20>
 800a762:	4b64      	ldr	r3, [pc, #400]	@ (800a8f4 <_strtod_l+0xafc>)
 800a764:	2200      	movs	r2, #0
 800a766:	4630      	mov	r0, r6
 800a768:	4639      	mov	r1, r7
 800a76a:	f7f6 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d159      	bne.n	800a826 <_strtod_l+0xa2e>
 800a772:	4630      	mov	r0, r6
 800a774:	4639      	mov	r1, r7
 800a776:	4b60      	ldr	r3, [pc, #384]	@ (800a8f8 <_strtod_l+0xb00>)
 800a778:	2200      	movs	r2, #0
 800a77a:	f7f5 ff3d 	bl	80005f8 <__aeabi_dmul>
 800a77e:	4606      	mov	r6, r0
 800a780:	460f      	mov	r7, r1
 800a782:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a786:	9606      	str	r6, [sp, #24]
 800a788:	9307      	str	r3, [sp, #28]
 800a78a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a78e:	4d57      	ldr	r5, [pc, #348]	@ (800a8ec <_strtod_l+0xaf4>)
 800a790:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a796:	401d      	ands	r5, r3
 800a798:	4b58      	ldr	r3, [pc, #352]	@ (800a8fc <_strtod_l+0xb04>)
 800a79a:	429d      	cmp	r5, r3
 800a79c:	f040 80b2 	bne.w	800a904 <_strtod_l+0xb0c>
 800a7a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a7a6:	ec4b ab10 	vmov	d0, sl, fp
 800a7aa:	f7ff f9c9 	bl	8009b40 <__ulp>
 800a7ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7b2:	ec51 0b10 	vmov	r0, r1, d0
 800a7b6:	f7f5 ff1f 	bl	80005f8 <__aeabi_dmul>
 800a7ba:	4652      	mov	r2, sl
 800a7bc:	465b      	mov	r3, fp
 800a7be:	f7f5 fd65 	bl	800028c <__adddf3>
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4949      	ldr	r1, [pc, #292]	@ (800a8ec <_strtod_l+0xaf4>)
 800a7c6:	4a4e      	ldr	r2, [pc, #312]	@ (800a900 <_strtod_l+0xb08>)
 800a7c8:	4019      	ands	r1, r3
 800a7ca:	4291      	cmp	r1, r2
 800a7cc:	4682      	mov	sl, r0
 800a7ce:	d942      	bls.n	800a856 <_strtod_l+0xa5e>
 800a7d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7d2:	4b47      	ldr	r3, [pc, #284]	@ (800a8f0 <_strtod_l+0xaf8>)
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d103      	bne.n	800a7e0 <_strtod_l+0x9e8>
 800a7d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7da:	3301      	adds	r3, #1
 800a7dc:	f43f ad2b 	beq.w	800a236 <_strtod_l+0x43e>
 800a7e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a8f0 <_strtod_l+0xaf8>
 800a7e4:	f04f 3aff 	mov.w	sl, #4294967295
 800a7e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7ea:	9805      	ldr	r0, [sp, #20]
 800a7ec:	f7fe fe74 	bl	80094d8 <_Bfree>
 800a7f0:	9805      	ldr	r0, [sp, #20]
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	f7fe fe70 	bl	80094d8 <_Bfree>
 800a7f8:	9805      	ldr	r0, [sp, #20]
 800a7fa:	4641      	mov	r1, r8
 800a7fc:	f7fe fe6c 	bl	80094d8 <_Bfree>
 800a800:	9805      	ldr	r0, [sp, #20]
 800a802:	4621      	mov	r1, r4
 800a804:	f7fe fe68 	bl	80094d8 <_Bfree>
 800a808:	e618      	b.n	800a43c <_strtod_l+0x644>
 800a80a:	f1ba 0f01 	cmp.w	sl, #1
 800a80e:	d103      	bne.n	800a818 <_strtod_l+0xa20>
 800a810:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a812:	2b00      	cmp	r3, #0
 800a814:	f43f ada5 	beq.w	800a362 <_strtod_l+0x56a>
 800a818:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a8c8 <_strtod_l+0xad0>
 800a81c:	4f35      	ldr	r7, [pc, #212]	@ (800a8f4 <_strtod_l+0xafc>)
 800a81e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a822:	2600      	movs	r6, #0
 800a824:	e7b1      	b.n	800a78a <_strtod_l+0x992>
 800a826:	4f34      	ldr	r7, [pc, #208]	@ (800a8f8 <_strtod_l+0xb00>)
 800a828:	2600      	movs	r6, #0
 800a82a:	e7aa      	b.n	800a782 <_strtod_l+0x98a>
 800a82c:	4b32      	ldr	r3, [pc, #200]	@ (800a8f8 <_strtod_l+0xb00>)
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	2200      	movs	r2, #0
 800a834:	f7f5 fee0 	bl	80005f8 <__aeabi_dmul>
 800a838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d09f      	beq.n	800a782 <_strtod_l+0x98a>
 800a842:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a846:	e7a0      	b.n	800a78a <_strtod_l+0x992>
 800a848:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a8d0 <_strtod_l+0xad8>
 800a84c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a850:	ec57 6b17 	vmov	r6, r7, d7
 800a854:	e799      	b.n	800a78a <_strtod_l+0x992>
 800a856:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a85a:	9b08      	ldr	r3, [sp, #32]
 800a85c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1c1      	bne.n	800a7e8 <_strtod_l+0x9f0>
 800a864:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a868:	0d1b      	lsrs	r3, r3, #20
 800a86a:	051b      	lsls	r3, r3, #20
 800a86c:	429d      	cmp	r5, r3
 800a86e:	d1bb      	bne.n	800a7e8 <_strtod_l+0x9f0>
 800a870:	4630      	mov	r0, r6
 800a872:	4639      	mov	r1, r7
 800a874:	f7f6 fa20 	bl	8000cb8 <__aeabi_d2lz>
 800a878:	f7f5 fe90 	bl	800059c <__aeabi_l2d>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4630      	mov	r0, r6
 800a882:	4639      	mov	r1, r7
 800a884:	f7f5 fd00 	bl	8000288 <__aeabi_dsub>
 800a888:	460b      	mov	r3, r1
 800a88a:	4602      	mov	r2, r0
 800a88c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a890:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a896:	ea46 060a 	orr.w	r6, r6, sl
 800a89a:	431e      	orrs	r6, r3
 800a89c:	d06f      	beq.n	800a97e <_strtod_l+0xb86>
 800a89e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a8d8 <_strtod_l+0xae0>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7f6 f91a 	bl	8000adc <__aeabi_dcmplt>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	f47f accf 	bne.w	800a24c <_strtod_l+0x454>
 800a8ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800a8e0 <_strtod_l+0xae8>)
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8b8:	f7f6 f92e 	bl	8000b18 <__aeabi_dcmpgt>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d093      	beq.n	800a7e8 <_strtod_l+0x9f0>
 800a8c0:	e4c4      	b.n	800a24c <_strtod_l+0x454>
 800a8c2:	bf00      	nop
 800a8c4:	f3af 8000 	nop.w
 800a8c8:	00000000 	.word	0x00000000
 800a8cc:	bff00000 	.word	0xbff00000
 800a8d0:	00000000 	.word	0x00000000
 800a8d4:	3ff00000 	.word	0x3ff00000
 800a8d8:	94a03595 	.word	0x94a03595
 800a8dc:	3fdfffff 	.word	0x3fdfffff
 800a8e0:	35afe535 	.word	0x35afe535
 800a8e4:	3fe00000 	.word	0x3fe00000
 800a8e8:	000fffff 	.word	0x000fffff
 800a8ec:	7ff00000 	.word	0x7ff00000
 800a8f0:	7fefffff 	.word	0x7fefffff
 800a8f4:	3ff00000 	.word	0x3ff00000
 800a8f8:	3fe00000 	.word	0x3fe00000
 800a8fc:	7fe00000 	.word	0x7fe00000
 800a900:	7c9fffff 	.word	0x7c9fffff
 800a904:	9b08      	ldr	r3, [sp, #32]
 800a906:	b323      	cbz	r3, 800a952 <_strtod_l+0xb5a>
 800a908:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a90c:	d821      	bhi.n	800a952 <_strtod_l+0xb5a>
 800a90e:	a328      	add	r3, pc, #160	@ (adr r3, 800a9b0 <_strtod_l+0xbb8>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	4630      	mov	r0, r6
 800a916:	4639      	mov	r1, r7
 800a918:	f7f6 f8ea 	bl	8000af0 <__aeabi_dcmple>
 800a91c:	b1a0      	cbz	r0, 800a948 <_strtod_l+0xb50>
 800a91e:	4639      	mov	r1, r7
 800a920:	4630      	mov	r0, r6
 800a922:	f7f6 f941 	bl	8000ba8 <__aeabi_d2uiz>
 800a926:	2801      	cmp	r0, #1
 800a928:	bf38      	it	cc
 800a92a:	2001      	movcc	r0, #1
 800a92c:	f7f5 fdea 	bl	8000504 <__aeabi_ui2d>
 800a930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a932:	4606      	mov	r6, r0
 800a934:	460f      	mov	r7, r1
 800a936:	b9fb      	cbnz	r3, 800a978 <_strtod_l+0xb80>
 800a938:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a93c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a93e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a940:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a944:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a948:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a94a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a94e:	1b5b      	subs	r3, r3, r5
 800a950:	9311      	str	r3, [sp, #68]	@ 0x44
 800a952:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a956:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a95a:	f7ff f8f1 	bl	8009b40 <__ulp>
 800a95e:	4650      	mov	r0, sl
 800a960:	ec53 2b10 	vmov	r2, r3, d0
 800a964:	4659      	mov	r1, fp
 800a966:	f7f5 fe47 	bl	80005f8 <__aeabi_dmul>
 800a96a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a96e:	f7f5 fc8d 	bl	800028c <__adddf3>
 800a972:	4682      	mov	sl, r0
 800a974:	468b      	mov	fp, r1
 800a976:	e770      	b.n	800a85a <_strtod_l+0xa62>
 800a978:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a97c:	e7e0      	b.n	800a940 <_strtod_l+0xb48>
 800a97e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a9b8 <_strtod_l+0xbc0>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f6 f8aa 	bl	8000adc <__aeabi_dcmplt>
 800a988:	e798      	b.n	800a8bc <_strtod_l+0xac4>
 800a98a:	2300      	movs	r3, #0
 800a98c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a98e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	f7ff ba6d 	b.w	8009e72 <_strtod_l+0x7a>
 800a998:	2a65      	cmp	r2, #101	@ 0x65
 800a99a:	f43f ab66 	beq.w	800a06a <_strtod_l+0x272>
 800a99e:	2a45      	cmp	r2, #69	@ 0x45
 800a9a0:	f43f ab63 	beq.w	800a06a <_strtod_l+0x272>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	f7ff bb9e 	b.w	800a0e6 <_strtod_l+0x2ee>
 800a9aa:	bf00      	nop
 800a9ac:	f3af 8000 	nop.w
 800a9b0:	ffc00000 	.word	0xffc00000
 800a9b4:	41dfffff 	.word	0x41dfffff
 800a9b8:	94a03595 	.word	0x94a03595
 800a9bc:	3fcfffff 	.word	0x3fcfffff

0800a9c0 <_strtod_r>:
 800a9c0:	4b01      	ldr	r3, [pc, #4]	@ (800a9c8 <_strtod_r+0x8>)
 800a9c2:	f7ff ba19 	b.w	8009df8 <_strtod_l>
 800a9c6:	bf00      	nop
 800a9c8:	2000006c 	.word	0x2000006c

0800a9cc <_strtol_l.constprop.0>:
 800a9cc:	2b24      	cmp	r3, #36	@ 0x24
 800a9ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d2:	4686      	mov	lr, r0
 800a9d4:	4690      	mov	r8, r2
 800a9d6:	d801      	bhi.n	800a9dc <_strtol_l.constprop.0+0x10>
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d106      	bne.n	800a9ea <_strtol_l.constprop.0+0x1e>
 800a9dc:	f7fd fdae 	bl	800853c <__errno>
 800a9e0:	2316      	movs	r3, #22
 800a9e2:	6003      	str	r3, [r0, #0]
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ea:	4834      	ldr	r0, [pc, #208]	@ (800aabc <_strtol_l.constprop.0+0xf0>)
 800a9ec:	460d      	mov	r5, r1
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9f4:	5d06      	ldrb	r6, [r0, r4]
 800a9f6:	f016 0608 	ands.w	r6, r6, #8
 800a9fa:	d1f8      	bne.n	800a9ee <_strtol_l.constprop.0+0x22>
 800a9fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a9fe:	d12d      	bne.n	800aa5c <_strtol_l.constprop.0+0x90>
 800aa00:	782c      	ldrb	r4, [r5, #0]
 800aa02:	2601      	movs	r6, #1
 800aa04:	1c95      	adds	r5, r2, #2
 800aa06:	f033 0210 	bics.w	r2, r3, #16
 800aa0a:	d109      	bne.n	800aa20 <_strtol_l.constprop.0+0x54>
 800aa0c:	2c30      	cmp	r4, #48	@ 0x30
 800aa0e:	d12a      	bne.n	800aa66 <_strtol_l.constprop.0+0x9a>
 800aa10:	782a      	ldrb	r2, [r5, #0]
 800aa12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa16:	2a58      	cmp	r2, #88	@ 0x58
 800aa18:	d125      	bne.n	800aa66 <_strtol_l.constprop.0+0x9a>
 800aa1a:	786c      	ldrb	r4, [r5, #1]
 800aa1c:	2310      	movs	r3, #16
 800aa1e:	3502      	adds	r5, #2
 800aa20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa24:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa28:	2200      	movs	r2, #0
 800aa2a:	fbbc f9f3 	udiv	r9, ip, r3
 800aa2e:	4610      	mov	r0, r2
 800aa30:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa38:	2f09      	cmp	r7, #9
 800aa3a:	d81b      	bhi.n	800aa74 <_strtol_l.constprop.0+0xa8>
 800aa3c:	463c      	mov	r4, r7
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	dd27      	ble.n	800aa92 <_strtol_l.constprop.0+0xc6>
 800aa42:	1c57      	adds	r7, r2, #1
 800aa44:	d007      	beq.n	800aa56 <_strtol_l.constprop.0+0x8a>
 800aa46:	4581      	cmp	r9, r0
 800aa48:	d320      	bcc.n	800aa8c <_strtol_l.constprop.0+0xc0>
 800aa4a:	d101      	bne.n	800aa50 <_strtol_l.constprop.0+0x84>
 800aa4c:	45a2      	cmp	sl, r4
 800aa4e:	db1d      	blt.n	800aa8c <_strtol_l.constprop.0+0xc0>
 800aa50:	fb00 4003 	mla	r0, r0, r3, r4
 800aa54:	2201      	movs	r2, #1
 800aa56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa5a:	e7eb      	b.n	800aa34 <_strtol_l.constprop.0+0x68>
 800aa5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800aa5e:	bf04      	itt	eq
 800aa60:	782c      	ldrbeq	r4, [r5, #0]
 800aa62:	1c95      	addeq	r5, r2, #2
 800aa64:	e7cf      	b.n	800aa06 <_strtol_l.constprop.0+0x3a>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1da      	bne.n	800aa20 <_strtol_l.constprop.0+0x54>
 800aa6a:	2c30      	cmp	r4, #48	@ 0x30
 800aa6c:	bf0c      	ite	eq
 800aa6e:	2308      	moveq	r3, #8
 800aa70:	230a      	movne	r3, #10
 800aa72:	e7d5      	b.n	800aa20 <_strtol_l.constprop.0+0x54>
 800aa74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa78:	2f19      	cmp	r7, #25
 800aa7a:	d801      	bhi.n	800aa80 <_strtol_l.constprop.0+0xb4>
 800aa7c:	3c37      	subs	r4, #55	@ 0x37
 800aa7e:	e7de      	b.n	800aa3e <_strtol_l.constprop.0+0x72>
 800aa80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa84:	2f19      	cmp	r7, #25
 800aa86:	d804      	bhi.n	800aa92 <_strtol_l.constprop.0+0xc6>
 800aa88:	3c57      	subs	r4, #87	@ 0x57
 800aa8a:	e7d8      	b.n	800aa3e <_strtol_l.constprop.0+0x72>
 800aa8c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa90:	e7e1      	b.n	800aa56 <_strtol_l.constprop.0+0x8a>
 800aa92:	1c53      	adds	r3, r2, #1
 800aa94:	d108      	bne.n	800aaa8 <_strtol_l.constprop.0+0xdc>
 800aa96:	2322      	movs	r3, #34	@ 0x22
 800aa98:	f8ce 3000 	str.w	r3, [lr]
 800aa9c:	4660      	mov	r0, ip
 800aa9e:	f1b8 0f00 	cmp.w	r8, #0
 800aaa2:	d0a0      	beq.n	800a9e6 <_strtol_l.constprop.0+0x1a>
 800aaa4:	1e69      	subs	r1, r5, #1
 800aaa6:	e006      	b.n	800aab6 <_strtol_l.constprop.0+0xea>
 800aaa8:	b106      	cbz	r6, 800aaac <_strtol_l.constprop.0+0xe0>
 800aaaa:	4240      	negs	r0, r0
 800aaac:	f1b8 0f00 	cmp.w	r8, #0
 800aab0:	d099      	beq.n	800a9e6 <_strtol_l.constprop.0+0x1a>
 800aab2:	2a00      	cmp	r2, #0
 800aab4:	d1f6      	bne.n	800aaa4 <_strtol_l.constprop.0+0xd8>
 800aab6:	f8c8 1000 	str.w	r1, [r8]
 800aaba:	e794      	b.n	800a9e6 <_strtol_l.constprop.0+0x1a>
 800aabc:	0800c1e9 	.word	0x0800c1e9

0800aac0 <_strtol_r>:
 800aac0:	f7ff bf84 	b.w	800a9cc <_strtol_l.constprop.0>

0800aac4 <__ssputs_r>:
 800aac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac8:	688e      	ldr	r6, [r1, #8]
 800aaca:	461f      	mov	r7, r3
 800aacc:	42be      	cmp	r6, r7
 800aace:	680b      	ldr	r3, [r1, #0]
 800aad0:	4682      	mov	sl, r0
 800aad2:	460c      	mov	r4, r1
 800aad4:	4690      	mov	r8, r2
 800aad6:	d82d      	bhi.n	800ab34 <__ssputs_r+0x70>
 800aad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aadc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aae0:	d026      	beq.n	800ab30 <__ssputs_r+0x6c>
 800aae2:	6965      	ldr	r5, [r4, #20]
 800aae4:	6909      	ldr	r1, [r1, #16]
 800aae6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaea:	eba3 0901 	sub.w	r9, r3, r1
 800aaee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaf2:	1c7b      	adds	r3, r7, #1
 800aaf4:	444b      	add	r3, r9
 800aaf6:	106d      	asrs	r5, r5, #1
 800aaf8:	429d      	cmp	r5, r3
 800aafa:	bf38      	it	cc
 800aafc:	461d      	movcc	r5, r3
 800aafe:	0553      	lsls	r3, r2, #21
 800ab00:	d527      	bpl.n	800ab52 <__ssputs_r+0x8e>
 800ab02:	4629      	mov	r1, r5
 800ab04:	f7fe fc1c 	bl	8009340 <_malloc_r>
 800ab08:	4606      	mov	r6, r0
 800ab0a:	b360      	cbz	r0, 800ab66 <__ssputs_r+0xa2>
 800ab0c:	6921      	ldr	r1, [r4, #16]
 800ab0e:	464a      	mov	r2, r9
 800ab10:	f7fd fd41 	bl	8008596 <memcpy>
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	6126      	str	r6, [r4, #16]
 800ab22:	6165      	str	r5, [r4, #20]
 800ab24:	444e      	add	r6, r9
 800ab26:	eba5 0509 	sub.w	r5, r5, r9
 800ab2a:	6026      	str	r6, [r4, #0]
 800ab2c:	60a5      	str	r5, [r4, #8]
 800ab2e:	463e      	mov	r6, r7
 800ab30:	42be      	cmp	r6, r7
 800ab32:	d900      	bls.n	800ab36 <__ssputs_r+0x72>
 800ab34:	463e      	mov	r6, r7
 800ab36:	6820      	ldr	r0, [r4, #0]
 800ab38:	4632      	mov	r2, r6
 800ab3a:	4641      	mov	r1, r8
 800ab3c:	f000 f9c6 	bl	800aecc <memmove>
 800ab40:	68a3      	ldr	r3, [r4, #8]
 800ab42:	1b9b      	subs	r3, r3, r6
 800ab44:	60a3      	str	r3, [r4, #8]
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	4433      	add	r3, r6
 800ab4a:	6023      	str	r3, [r4, #0]
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab52:	462a      	mov	r2, r5
 800ab54:	f000 fd7d 	bl	800b652 <_realloc_r>
 800ab58:	4606      	mov	r6, r0
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d1e0      	bne.n	800ab20 <__ssputs_r+0x5c>
 800ab5e:	6921      	ldr	r1, [r4, #16]
 800ab60:	4650      	mov	r0, sl
 800ab62:	f7fe fb79 	bl	8009258 <_free_r>
 800ab66:	230c      	movs	r3, #12
 800ab68:	f8ca 3000 	str.w	r3, [sl]
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab72:	81a3      	strh	r3, [r4, #12]
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	e7e9      	b.n	800ab4e <__ssputs_r+0x8a>
	...

0800ab7c <_svfiprintf_r>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	4698      	mov	r8, r3
 800ab82:	898b      	ldrh	r3, [r1, #12]
 800ab84:	061b      	lsls	r3, r3, #24
 800ab86:	b09d      	sub	sp, #116	@ 0x74
 800ab88:	4607      	mov	r7, r0
 800ab8a:	460d      	mov	r5, r1
 800ab8c:	4614      	mov	r4, r2
 800ab8e:	d510      	bpl.n	800abb2 <_svfiprintf_r+0x36>
 800ab90:	690b      	ldr	r3, [r1, #16]
 800ab92:	b973      	cbnz	r3, 800abb2 <_svfiprintf_r+0x36>
 800ab94:	2140      	movs	r1, #64	@ 0x40
 800ab96:	f7fe fbd3 	bl	8009340 <_malloc_r>
 800ab9a:	6028      	str	r0, [r5, #0]
 800ab9c:	6128      	str	r0, [r5, #16]
 800ab9e:	b930      	cbnz	r0, 800abae <_svfiprintf_r+0x32>
 800aba0:	230c      	movs	r3, #12
 800aba2:	603b      	str	r3, [r7, #0]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	b01d      	add	sp, #116	@ 0x74
 800abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abae:	2340      	movs	r3, #64	@ 0x40
 800abb0:	616b      	str	r3, [r5, #20]
 800abb2:	2300      	movs	r3, #0
 800abb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abb6:	2320      	movs	r3, #32
 800abb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800abc0:	2330      	movs	r3, #48	@ 0x30
 800abc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad60 <_svfiprintf_r+0x1e4>
 800abc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abca:	f04f 0901 	mov.w	r9, #1
 800abce:	4623      	mov	r3, r4
 800abd0:	469a      	mov	sl, r3
 800abd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd6:	b10a      	cbz	r2, 800abdc <_svfiprintf_r+0x60>
 800abd8:	2a25      	cmp	r2, #37	@ 0x25
 800abda:	d1f9      	bne.n	800abd0 <_svfiprintf_r+0x54>
 800abdc:	ebba 0b04 	subs.w	fp, sl, r4
 800abe0:	d00b      	beq.n	800abfa <_svfiprintf_r+0x7e>
 800abe2:	465b      	mov	r3, fp
 800abe4:	4622      	mov	r2, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	4638      	mov	r0, r7
 800abea:	f7ff ff6b 	bl	800aac4 <__ssputs_r>
 800abee:	3001      	adds	r0, #1
 800abf0:	f000 80a7 	beq.w	800ad42 <_svfiprintf_r+0x1c6>
 800abf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abf6:	445a      	add	r2, fp
 800abf8:	9209      	str	r2, [sp, #36]	@ 0x24
 800abfa:	f89a 3000 	ldrb.w	r3, [sl]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f000 809f 	beq.w	800ad42 <_svfiprintf_r+0x1c6>
 800ac04:	2300      	movs	r3, #0
 800ac06:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac0e:	f10a 0a01 	add.w	sl, sl, #1
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	9307      	str	r3, [sp, #28]
 800ac16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac1c:	4654      	mov	r4, sl
 800ac1e:	2205      	movs	r2, #5
 800ac20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac24:	484e      	ldr	r0, [pc, #312]	@ (800ad60 <_svfiprintf_r+0x1e4>)
 800ac26:	f7f5 fad3 	bl	80001d0 <memchr>
 800ac2a:	9a04      	ldr	r2, [sp, #16]
 800ac2c:	b9d8      	cbnz	r0, 800ac66 <_svfiprintf_r+0xea>
 800ac2e:	06d0      	lsls	r0, r2, #27
 800ac30:	bf44      	itt	mi
 800ac32:	2320      	movmi	r3, #32
 800ac34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac38:	0711      	lsls	r1, r2, #28
 800ac3a:	bf44      	itt	mi
 800ac3c:	232b      	movmi	r3, #43	@ 0x2b
 800ac3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac42:	f89a 3000 	ldrb.w	r3, [sl]
 800ac46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac48:	d015      	beq.n	800ac76 <_svfiprintf_r+0xfa>
 800ac4a:	9a07      	ldr	r2, [sp, #28]
 800ac4c:	4654      	mov	r4, sl
 800ac4e:	2000      	movs	r0, #0
 800ac50:	f04f 0c0a 	mov.w	ip, #10
 800ac54:	4621      	mov	r1, r4
 800ac56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac5a:	3b30      	subs	r3, #48	@ 0x30
 800ac5c:	2b09      	cmp	r3, #9
 800ac5e:	d94b      	bls.n	800acf8 <_svfiprintf_r+0x17c>
 800ac60:	b1b0      	cbz	r0, 800ac90 <_svfiprintf_r+0x114>
 800ac62:	9207      	str	r2, [sp, #28]
 800ac64:	e014      	b.n	800ac90 <_svfiprintf_r+0x114>
 800ac66:	eba0 0308 	sub.w	r3, r0, r8
 800ac6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	46a2      	mov	sl, r4
 800ac74:	e7d2      	b.n	800ac1c <_svfiprintf_r+0xa0>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	1d19      	adds	r1, r3, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	9103      	str	r1, [sp, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bfbb      	ittet	lt
 800ac82:	425b      	neglt	r3, r3
 800ac84:	f042 0202 	orrlt.w	r2, r2, #2
 800ac88:	9307      	strge	r3, [sp, #28]
 800ac8a:	9307      	strlt	r3, [sp, #28]
 800ac8c:	bfb8      	it	lt
 800ac8e:	9204      	strlt	r2, [sp, #16]
 800ac90:	7823      	ldrb	r3, [r4, #0]
 800ac92:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac94:	d10a      	bne.n	800acac <_svfiprintf_r+0x130>
 800ac96:	7863      	ldrb	r3, [r4, #1]
 800ac98:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac9a:	d132      	bne.n	800ad02 <_svfiprintf_r+0x186>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	1d1a      	adds	r2, r3, #4
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	9203      	str	r2, [sp, #12]
 800aca4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aca8:	3402      	adds	r4, #2
 800acaa:	9305      	str	r3, [sp, #20]
 800acac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad70 <_svfiprintf_r+0x1f4>
 800acb0:	7821      	ldrb	r1, [r4, #0]
 800acb2:	2203      	movs	r2, #3
 800acb4:	4650      	mov	r0, sl
 800acb6:	f7f5 fa8b 	bl	80001d0 <memchr>
 800acba:	b138      	cbz	r0, 800accc <_svfiprintf_r+0x150>
 800acbc:	9b04      	ldr	r3, [sp, #16]
 800acbe:	eba0 000a 	sub.w	r0, r0, sl
 800acc2:	2240      	movs	r2, #64	@ 0x40
 800acc4:	4082      	lsls	r2, r0
 800acc6:	4313      	orrs	r3, r2
 800acc8:	3401      	adds	r4, #1
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd0:	4824      	ldr	r0, [pc, #144]	@ (800ad64 <_svfiprintf_r+0x1e8>)
 800acd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acd6:	2206      	movs	r2, #6
 800acd8:	f7f5 fa7a 	bl	80001d0 <memchr>
 800acdc:	2800      	cmp	r0, #0
 800acde:	d036      	beq.n	800ad4e <_svfiprintf_r+0x1d2>
 800ace0:	4b21      	ldr	r3, [pc, #132]	@ (800ad68 <_svfiprintf_r+0x1ec>)
 800ace2:	bb1b      	cbnz	r3, 800ad2c <_svfiprintf_r+0x1b0>
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	3307      	adds	r3, #7
 800ace8:	f023 0307 	bic.w	r3, r3, #7
 800acec:	3308      	adds	r3, #8
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf2:	4433      	add	r3, r6
 800acf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800acf6:	e76a      	b.n	800abce <_svfiprintf_r+0x52>
 800acf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acfc:	460c      	mov	r4, r1
 800acfe:	2001      	movs	r0, #1
 800ad00:	e7a8      	b.n	800ac54 <_svfiprintf_r+0xd8>
 800ad02:	2300      	movs	r3, #0
 800ad04:	3401      	adds	r4, #1
 800ad06:	9305      	str	r3, [sp, #20]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	f04f 0c0a 	mov.w	ip, #10
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad14:	3a30      	subs	r2, #48	@ 0x30
 800ad16:	2a09      	cmp	r2, #9
 800ad18:	d903      	bls.n	800ad22 <_svfiprintf_r+0x1a6>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0c6      	beq.n	800acac <_svfiprintf_r+0x130>
 800ad1e:	9105      	str	r1, [sp, #20]
 800ad20:	e7c4      	b.n	800acac <_svfiprintf_r+0x130>
 800ad22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad26:	4604      	mov	r4, r0
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e7f0      	b.n	800ad0e <_svfiprintf_r+0x192>
 800ad2c:	ab03      	add	r3, sp, #12
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	462a      	mov	r2, r5
 800ad32:	4b0e      	ldr	r3, [pc, #56]	@ (800ad6c <_svfiprintf_r+0x1f0>)
 800ad34:	a904      	add	r1, sp, #16
 800ad36:	4638      	mov	r0, r7
 800ad38:	f7fc fc66 	bl	8007608 <_printf_float>
 800ad3c:	1c42      	adds	r2, r0, #1
 800ad3e:	4606      	mov	r6, r0
 800ad40:	d1d6      	bne.n	800acf0 <_svfiprintf_r+0x174>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	065b      	lsls	r3, r3, #25
 800ad46:	f53f af2d 	bmi.w	800aba4 <_svfiprintf_r+0x28>
 800ad4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad4c:	e72c      	b.n	800aba8 <_svfiprintf_r+0x2c>
 800ad4e:	ab03      	add	r3, sp, #12
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	462a      	mov	r2, r5
 800ad54:	4b05      	ldr	r3, [pc, #20]	@ (800ad6c <_svfiprintf_r+0x1f0>)
 800ad56:	a904      	add	r1, sp, #16
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7fc feed 	bl	8007b38 <_printf_i>
 800ad5e:	e7ed      	b.n	800ad3c <_svfiprintf_r+0x1c0>
 800ad60:	0800c2e9 	.word	0x0800c2e9
 800ad64:	0800c2f3 	.word	0x0800c2f3
 800ad68:	08007609 	.word	0x08007609
 800ad6c:	0800aac5 	.word	0x0800aac5
 800ad70:	0800c2ef 	.word	0x0800c2ef

0800ad74 <__sflush_r>:
 800ad74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7c:	0716      	lsls	r6, r2, #28
 800ad7e:	4605      	mov	r5, r0
 800ad80:	460c      	mov	r4, r1
 800ad82:	d454      	bmi.n	800ae2e <__sflush_r+0xba>
 800ad84:	684b      	ldr	r3, [r1, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	dc02      	bgt.n	800ad90 <__sflush_r+0x1c>
 800ad8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dd48      	ble.n	800ae22 <__sflush_r+0xae>
 800ad90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad92:	2e00      	cmp	r6, #0
 800ad94:	d045      	beq.n	800ae22 <__sflush_r+0xae>
 800ad96:	2300      	movs	r3, #0
 800ad98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad9c:	682f      	ldr	r7, [r5, #0]
 800ad9e:	6a21      	ldr	r1, [r4, #32]
 800ada0:	602b      	str	r3, [r5, #0]
 800ada2:	d030      	beq.n	800ae06 <__sflush_r+0x92>
 800ada4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	0759      	lsls	r1, r3, #29
 800adaa:	d505      	bpl.n	800adb8 <__sflush_r+0x44>
 800adac:	6863      	ldr	r3, [r4, #4]
 800adae:	1ad2      	subs	r2, r2, r3
 800adb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adb2:	b10b      	cbz	r3, 800adb8 <__sflush_r+0x44>
 800adb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adb6:	1ad2      	subs	r2, r2, r3
 800adb8:	2300      	movs	r3, #0
 800adba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adbc:	6a21      	ldr	r1, [r4, #32]
 800adbe:	4628      	mov	r0, r5
 800adc0:	47b0      	blx	r6
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	d106      	bne.n	800add6 <__sflush_r+0x62>
 800adc8:	6829      	ldr	r1, [r5, #0]
 800adca:	291d      	cmp	r1, #29
 800adcc:	d82b      	bhi.n	800ae26 <__sflush_r+0xb2>
 800adce:	4a2a      	ldr	r2, [pc, #168]	@ (800ae78 <__sflush_r+0x104>)
 800add0:	410a      	asrs	r2, r1
 800add2:	07d6      	lsls	r6, r2, #31
 800add4:	d427      	bmi.n	800ae26 <__sflush_r+0xb2>
 800add6:	2200      	movs	r2, #0
 800add8:	6062      	str	r2, [r4, #4]
 800adda:	04d9      	lsls	r1, r3, #19
 800addc:	6922      	ldr	r2, [r4, #16]
 800adde:	6022      	str	r2, [r4, #0]
 800ade0:	d504      	bpl.n	800adec <__sflush_r+0x78>
 800ade2:	1c42      	adds	r2, r0, #1
 800ade4:	d101      	bne.n	800adea <__sflush_r+0x76>
 800ade6:	682b      	ldr	r3, [r5, #0]
 800ade8:	b903      	cbnz	r3, 800adec <__sflush_r+0x78>
 800adea:	6560      	str	r0, [r4, #84]	@ 0x54
 800adec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adee:	602f      	str	r7, [r5, #0]
 800adf0:	b1b9      	cbz	r1, 800ae22 <__sflush_r+0xae>
 800adf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adf6:	4299      	cmp	r1, r3
 800adf8:	d002      	beq.n	800ae00 <__sflush_r+0x8c>
 800adfa:	4628      	mov	r0, r5
 800adfc:	f7fe fa2c 	bl	8009258 <_free_r>
 800ae00:	2300      	movs	r3, #0
 800ae02:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae04:	e00d      	b.n	800ae22 <__sflush_r+0xae>
 800ae06:	2301      	movs	r3, #1
 800ae08:	4628      	mov	r0, r5
 800ae0a:	47b0      	blx	r6
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	1c50      	adds	r0, r2, #1
 800ae10:	d1c9      	bne.n	800ada6 <__sflush_r+0x32>
 800ae12:	682b      	ldr	r3, [r5, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d0c6      	beq.n	800ada6 <__sflush_r+0x32>
 800ae18:	2b1d      	cmp	r3, #29
 800ae1a:	d001      	beq.n	800ae20 <__sflush_r+0xac>
 800ae1c:	2b16      	cmp	r3, #22
 800ae1e:	d11e      	bne.n	800ae5e <__sflush_r+0xea>
 800ae20:	602f      	str	r7, [r5, #0]
 800ae22:	2000      	movs	r0, #0
 800ae24:	e022      	b.n	800ae6c <__sflush_r+0xf8>
 800ae26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae2a:	b21b      	sxth	r3, r3
 800ae2c:	e01b      	b.n	800ae66 <__sflush_r+0xf2>
 800ae2e:	690f      	ldr	r7, [r1, #16]
 800ae30:	2f00      	cmp	r7, #0
 800ae32:	d0f6      	beq.n	800ae22 <__sflush_r+0xae>
 800ae34:	0793      	lsls	r3, r2, #30
 800ae36:	680e      	ldr	r6, [r1, #0]
 800ae38:	bf08      	it	eq
 800ae3a:	694b      	ldreq	r3, [r1, #20]
 800ae3c:	600f      	str	r7, [r1, #0]
 800ae3e:	bf18      	it	ne
 800ae40:	2300      	movne	r3, #0
 800ae42:	eba6 0807 	sub.w	r8, r6, r7
 800ae46:	608b      	str	r3, [r1, #8]
 800ae48:	f1b8 0f00 	cmp.w	r8, #0
 800ae4c:	dde9      	ble.n	800ae22 <__sflush_r+0xae>
 800ae4e:	6a21      	ldr	r1, [r4, #32]
 800ae50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae52:	4643      	mov	r3, r8
 800ae54:	463a      	mov	r2, r7
 800ae56:	4628      	mov	r0, r5
 800ae58:	47b0      	blx	r6
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	dc08      	bgt.n	800ae70 <__sflush_r+0xfc>
 800ae5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae70:	4407      	add	r7, r0
 800ae72:	eba8 0800 	sub.w	r8, r8, r0
 800ae76:	e7e7      	b.n	800ae48 <__sflush_r+0xd4>
 800ae78:	dfbffffe 	.word	0xdfbffffe

0800ae7c <_fflush_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	690b      	ldr	r3, [r1, #16]
 800ae80:	4605      	mov	r5, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	b913      	cbnz	r3, 800ae8c <_fflush_r+0x10>
 800ae86:	2500      	movs	r5, #0
 800ae88:	4628      	mov	r0, r5
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	b118      	cbz	r0, 800ae96 <_fflush_r+0x1a>
 800ae8e:	6a03      	ldr	r3, [r0, #32]
 800ae90:	b90b      	cbnz	r3, 800ae96 <_fflush_r+0x1a>
 800ae92:	f7fd fa11 	bl	80082b8 <__sinit>
 800ae96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0f3      	beq.n	800ae86 <_fflush_r+0xa>
 800ae9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aea0:	07d0      	lsls	r0, r2, #31
 800aea2:	d404      	bmi.n	800aeae <_fflush_r+0x32>
 800aea4:	0599      	lsls	r1, r3, #22
 800aea6:	d402      	bmi.n	800aeae <_fflush_r+0x32>
 800aea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeaa:	f7fd fb72 	bl	8008592 <__retarget_lock_acquire_recursive>
 800aeae:	4628      	mov	r0, r5
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	f7ff ff5f 	bl	800ad74 <__sflush_r>
 800aeb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aeb8:	07da      	lsls	r2, r3, #31
 800aeba:	4605      	mov	r5, r0
 800aebc:	d4e4      	bmi.n	800ae88 <_fflush_r+0xc>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	059b      	lsls	r3, r3, #22
 800aec2:	d4e1      	bmi.n	800ae88 <_fflush_r+0xc>
 800aec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aec6:	f7fd fb65 	bl	8008594 <__retarget_lock_release_recursive>
 800aeca:	e7dd      	b.n	800ae88 <_fflush_r+0xc>

0800aecc <memmove>:
 800aecc:	4288      	cmp	r0, r1
 800aece:	b510      	push	{r4, lr}
 800aed0:	eb01 0402 	add.w	r4, r1, r2
 800aed4:	d902      	bls.n	800aedc <memmove+0x10>
 800aed6:	4284      	cmp	r4, r0
 800aed8:	4623      	mov	r3, r4
 800aeda:	d807      	bhi.n	800aeec <memmove+0x20>
 800aedc:	1e43      	subs	r3, r0, #1
 800aede:	42a1      	cmp	r1, r4
 800aee0:	d008      	beq.n	800aef4 <memmove+0x28>
 800aee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeea:	e7f8      	b.n	800aede <memmove+0x12>
 800aeec:	4402      	add	r2, r0
 800aeee:	4601      	mov	r1, r0
 800aef0:	428a      	cmp	r2, r1
 800aef2:	d100      	bne.n	800aef6 <memmove+0x2a>
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aefa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aefe:	e7f7      	b.n	800aef0 <memmove+0x24>

0800af00 <strncmp>:
 800af00:	b510      	push	{r4, lr}
 800af02:	b16a      	cbz	r2, 800af20 <strncmp+0x20>
 800af04:	3901      	subs	r1, #1
 800af06:	1884      	adds	r4, r0, r2
 800af08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800af10:	429a      	cmp	r2, r3
 800af12:	d103      	bne.n	800af1c <strncmp+0x1c>
 800af14:	42a0      	cmp	r0, r4
 800af16:	d001      	beq.n	800af1c <strncmp+0x1c>
 800af18:	2a00      	cmp	r2, #0
 800af1a:	d1f5      	bne.n	800af08 <strncmp+0x8>
 800af1c:	1ad0      	subs	r0, r2, r3
 800af1e:	bd10      	pop	{r4, pc}
 800af20:	4610      	mov	r0, r2
 800af22:	e7fc      	b.n	800af1e <strncmp+0x1e>

0800af24 <_sbrk_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d06      	ldr	r5, [pc, #24]	@ (800af40 <_sbrk_r+0x1c>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	f7f6 fffa 	bl	8001f28 <_sbrk>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_sbrk_r+0x1a>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_sbrk_r+0x1a>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	20005d88 	.word	0x20005d88
 800af44:	00000000 	.word	0x00000000

0800af48 <nan>:
 800af48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800af50 <nan+0x8>
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	00000000 	.word	0x00000000
 800af54:	7ff80000 	.word	0x7ff80000

0800af58 <__assert_func>:
 800af58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af5a:	4614      	mov	r4, r2
 800af5c:	461a      	mov	r2, r3
 800af5e:	4b09      	ldr	r3, [pc, #36]	@ (800af84 <__assert_func+0x2c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4605      	mov	r5, r0
 800af64:	68d8      	ldr	r0, [r3, #12]
 800af66:	b954      	cbnz	r4, 800af7e <__assert_func+0x26>
 800af68:	4b07      	ldr	r3, [pc, #28]	@ (800af88 <__assert_func+0x30>)
 800af6a:	461c      	mov	r4, r3
 800af6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af70:	9100      	str	r1, [sp, #0]
 800af72:	462b      	mov	r3, r5
 800af74:	4905      	ldr	r1, [pc, #20]	@ (800af8c <__assert_func+0x34>)
 800af76:	f000 fba7 	bl	800b6c8 <fiprintf>
 800af7a:	f000 fbb7 	bl	800b6ec <abort>
 800af7e:	4b04      	ldr	r3, [pc, #16]	@ (800af90 <__assert_func+0x38>)
 800af80:	e7f4      	b.n	800af6c <__assert_func+0x14>
 800af82:	bf00      	nop
 800af84:	2000001c 	.word	0x2000001c
 800af88:	0800c33d 	.word	0x0800c33d
 800af8c:	0800c30f 	.word	0x0800c30f
 800af90:	0800c302 	.word	0x0800c302

0800af94 <_calloc_r>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	fba1 5402 	umull	r5, r4, r1, r2
 800af9a:	b93c      	cbnz	r4, 800afac <_calloc_r+0x18>
 800af9c:	4629      	mov	r1, r5
 800af9e:	f7fe f9cf 	bl	8009340 <_malloc_r>
 800afa2:	4606      	mov	r6, r0
 800afa4:	b928      	cbnz	r0, 800afb2 <_calloc_r+0x1e>
 800afa6:	2600      	movs	r6, #0
 800afa8:	4630      	mov	r0, r6
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	220c      	movs	r2, #12
 800afae:	6002      	str	r2, [r0, #0]
 800afb0:	e7f9      	b.n	800afa6 <_calloc_r+0x12>
 800afb2:	462a      	mov	r2, r5
 800afb4:	4621      	mov	r1, r4
 800afb6:	f7fd fa18 	bl	80083ea <memset>
 800afba:	e7f5      	b.n	800afa8 <_calloc_r+0x14>

0800afbc <rshift>:
 800afbc:	6903      	ldr	r3, [r0, #16]
 800afbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afca:	f100 0414 	add.w	r4, r0, #20
 800afce:	dd45      	ble.n	800b05c <rshift+0xa0>
 800afd0:	f011 011f 	ands.w	r1, r1, #31
 800afd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afdc:	d10c      	bne.n	800aff8 <rshift+0x3c>
 800afde:	f100 0710 	add.w	r7, r0, #16
 800afe2:	4629      	mov	r1, r5
 800afe4:	42b1      	cmp	r1, r6
 800afe6:	d334      	bcc.n	800b052 <rshift+0x96>
 800afe8:	1a9b      	subs	r3, r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	1eea      	subs	r2, r5, #3
 800afee:	4296      	cmp	r6, r2
 800aff0:	bf38      	it	cc
 800aff2:	2300      	movcc	r3, #0
 800aff4:	4423      	add	r3, r4
 800aff6:	e015      	b.n	800b024 <rshift+0x68>
 800aff8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800affc:	f1c1 0820 	rsb	r8, r1, #32
 800b000:	40cf      	lsrs	r7, r1
 800b002:	f105 0e04 	add.w	lr, r5, #4
 800b006:	46a1      	mov	r9, r4
 800b008:	4576      	cmp	r6, lr
 800b00a:	46f4      	mov	ip, lr
 800b00c:	d815      	bhi.n	800b03a <rshift+0x7e>
 800b00e:	1a9a      	subs	r2, r3, r2
 800b010:	0092      	lsls	r2, r2, #2
 800b012:	3a04      	subs	r2, #4
 800b014:	3501      	adds	r5, #1
 800b016:	42ae      	cmp	r6, r5
 800b018:	bf38      	it	cc
 800b01a:	2200      	movcc	r2, #0
 800b01c:	18a3      	adds	r3, r4, r2
 800b01e:	50a7      	str	r7, [r4, r2]
 800b020:	b107      	cbz	r7, 800b024 <rshift+0x68>
 800b022:	3304      	adds	r3, #4
 800b024:	1b1a      	subs	r2, r3, r4
 800b026:	42a3      	cmp	r3, r4
 800b028:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b02c:	bf08      	it	eq
 800b02e:	2300      	moveq	r3, #0
 800b030:	6102      	str	r2, [r0, #16]
 800b032:	bf08      	it	eq
 800b034:	6143      	streq	r3, [r0, #20]
 800b036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b03a:	f8dc c000 	ldr.w	ip, [ip]
 800b03e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b042:	ea4c 0707 	orr.w	r7, ip, r7
 800b046:	f849 7b04 	str.w	r7, [r9], #4
 800b04a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b04e:	40cf      	lsrs	r7, r1
 800b050:	e7da      	b.n	800b008 <rshift+0x4c>
 800b052:	f851 cb04 	ldr.w	ip, [r1], #4
 800b056:	f847 cf04 	str.w	ip, [r7, #4]!
 800b05a:	e7c3      	b.n	800afe4 <rshift+0x28>
 800b05c:	4623      	mov	r3, r4
 800b05e:	e7e1      	b.n	800b024 <rshift+0x68>

0800b060 <__hexdig_fun>:
 800b060:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b064:	2b09      	cmp	r3, #9
 800b066:	d802      	bhi.n	800b06e <__hexdig_fun+0xe>
 800b068:	3820      	subs	r0, #32
 800b06a:	b2c0      	uxtb	r0, r0
 800b06c:	4770      	bx	lr
 800b06e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b072:	2b05      	cmp	r3, #5
 800b074:	d801      	bhi.n	800b07a <__hexdig_fun+0x1a>
 800b076:	3847      	subs	r0, #71	@ 0x47
 800b078:	e7f7      	b.n	800b06a <__hexdig_fun+0xa>
 800b07a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b07e:	2b05      	cmp	r3, #5
 800b080:	d801      	bhi.n	800b086 <__hexdig_fun+0x26>
 800b082:	3827      	subs	r0, #39	@ 0x27
 800b084:	e7f1      	b.n	800b06a <__hexdig_fun+0xa>
 800b086:	2000      	movs	r0, #0
 800b088:	4770      	bx	lr
	...

0800b08c <__gethex>:
 800b08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b090:	b085      	sub	sp, #20
 800b092:	468a      	mov	sl, r1
 800b094:	9302      	str	r3, [sp, #8]
 800b096:	680b      	ldr	r3, [r1, #0]
 800b098:	9001      	str	r0, [sp, #4]
 800b09a:	4690      	mov	r8, r2
 800b09c:	1c9c      	adds	r4, r3, #2
 800b09e:	46a1      	mov	r9, r4
 800b0a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b0a4:	2830      	cmp	r0, #48	@ 0x30
 800b0a6:	d0fa      	beq.n	800b09e <__gethex+0x12>
 800b0a8:	eba9 0303 	sub.w	r3, r9, r3
 800b0ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800b0b0:	f7ff ffd6 	bl	800b060 <__hexdig_fun>
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d168      	bne.n	800b18c <__gethex+0x100>
 800b0ba:	49a0      	ldr	r1, [pc, #640]	@ (800b33c <__gethex+0x2b0>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	4648      	mov	r0, r9
 800b0c0:	f7ff ff1e 	bl	800af00 <strncmp>
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d167      	bne.n	800b19a <__gethex+0x10e>
 800b0ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b0ce:	4626      	mov	r6, r4
 800b0d0:	f7ff ffc6 	bl	800b060 <__hexdig_fun>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d062      	beq.n	800b19e <__gethex+0x112>
 800b0d8:	4623      	mov	r3, r4
 800b0da:	7818      	ldrb	r0, [r3, #0]
 800b0dc:	2830      	cmp	r0, #48	@ 0x30
 800b0de:	4699      	mov	r9, r3
 800b0e0:	f103 0301 	add.w	r3, r3, #1
 800b0e4:	d0f9      	beq.n	800b0da <__gethex+0x4e>
 800b0e6:	f7ff ffbb 	bl	800b060 <__hexdig_fun>
 800b0ea:	fab0 f580 	clz	r5, r0
 800b0ee:	096d      	lsrs	r5, r5, #5
 800b0f0:	f04f 0b01 	mov.w	fp, #1
 800b0f4:	464a      	mov	r2, r9
 800b0f6:	4616      	mov	r6, r2
 800b0f8:	3201      	adds	r2, #1
 800b0fa:	7830      	ldrb	r0, [r6, #0]
 800b0fc:	f7ff ffb0 	bl	800b060 <__hexdig_fun>
 800b100:	2800      	cmp	r0, #0
 800b102:	d1f8      	bne.n	800b0f6 <__gethex+0x6a>
 800b104:	498d      	ldr	r1, [pc, #564]	@ (800b33c <__gethex+0x2b0>)
 800b106:	2201      	movs	r2, #1
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff fef9 	bl	800af00 <strncmp>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d13f      	bne.n	800b192 <__gethex+0x106>
 800b112:	b944      	cbnz	r4, 800b126 <__gethex+0x9a>
 800b114:	1c74      	adds	r4, r6, #1
 800b116:	4622      	mov	r2, r4
 800b118:	4616      	mov	r6, r2
 800b11a:	3201      	adds	r2, #1
 800b11c:	7830      	ldrb	r0, [r6, #0]
 800b11e:	f7ff ff9f 	bl	800b060 <__hexdig_fun>
 800b122:	2800      	cmp	r0, #0
 800b124:	d1f8      	bne.n	800b118 <__gethex+0x8c>
 800b126:	1ba4      	subs	r4, r4, r6
 800b128:	00a7      	lsls	r7, r4, #2
 800b12a:	7833      	ldrb	r3, [r6, #0]
 800b12c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b130:	2b50      	cmp	r3, #80	@ 0x50
 800b132:	d13e      	bne.n	800b1b2 <__gethex+0x126>
 800b134:	7873      	ldrb	r3, [r6, #1]
 800b136:	2b2b      	cmp	r3, #43	@ 0x2b
 800b138:	d033      	beq.n	800b1a2 <__gethex+0x116>
 800b13a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b13c:	d034      	beq.n	800b1a8 <__gethex+0x11c>
 800b13e:	1c71      	adds	r1, r6, #1
 800b140:	2400      	movs	r4, #0
 800b142:	7808      	ldrb	r0, [r1, #0]
 800b144:	f7ff ff8c 	bl	800b060 <__hexdig_fun>
 800b148:	1e43      	subs	r3, r0, #1
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b18      	cmp	r3, #24
 800b14e:	d830      	bhi.n	800b1b2 <__gethex+0x126>
 800b150:	f1a0 0210 	sub.w	r2, r0, #16
 800b154:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b158:	f7ff ff82 	bl	800b060 <__hexdig_fun>
 800b15c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b160:	fa5f fc8c 	uxtb.w	ip, ip
 800b164:	f1bc 0f18 	cmp.w	ip, #24
 800b168:	f04f 030a 	mov.w	r3, #10
 800b16c:	d91e      	bls.n	800b1ac <__gethex+0x120>
 800b16e:	b104      	cbz	r4, 800b172 <__gethex+0xe6>
 800b170:	4252      	negs	r2, r2
 800b172:	4417      	add	r7, r2
 800b174:	f8ca 1000 	str.w	r1, [sl]
 800b178:	b1ed      	cbz	r5, 800b1b6 <__gethex+0x12a>
 800b17a:	f1bb 0f00 	cmp.w	fp, #0
 800b17e:	bf0c      	ite	eq
 800b180:	2506      	moveq	r5, #6
 800b182:	2500      	movne	r5, #0
 800b184:	4628      	mov	r0, r5
 800b186:	b005      	add	sp, #20
 800b188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18c:	2500      	movs	r5, #0
 800b18e:	462c      	mov	r4, r5
 800b190:	e7b0      	b.n	800b0f4 <__gethex+0x68>
 800b192:	2c00      	cmp	r4, #0
 800b194:	d1c7      	bne.n	800b126 <__gethex+0x9a>
 800b196:	4627      	mov	r7, r4
 800b198:	e7c7      	b.n	800b12a <__gethex+0x9e>
 800b19a:	464e      	mov	r6, r9
 800b19c:	462f      	mov	r7, r5
 800b19e:	2501      	movs	r5, #1
 800b1a0:	e7c3      	b.n	800b12a <__gethex+0x9e>
 800b1a2:	2400      	movs	r4, #0
 800b1a4:	1cb1      	adds	r1, r6, #2
 800b1a6:	e7cc      	b.n	800b142 <__gethex+0xb6>
 800b1a8:	2401      	movs	r4, #1
 800b1aa:	e7fb      	b.n	800b1a4 <__gethex+0x118>
 800b1ac:	fb03 0002 	mla	r0, r3, r2, r0
 800b1b0:	e7ce      	b.n	800b150 <__gethex+0xc4>
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	e7de      	b.n	800b174 <__gethex+0xe8>
 800b1b6:	eba6 0309 	sub.w	r3, r6, r9
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	4629      	mov	r1, r5
 800b1be:	2b07      	cmp	r3, #7
 800b1c0:	dc0a      	bgt.n	800b1d8 <__gethex+0x14c>
 800b1c2:	9801      	ldr	r0, [sp, #4]
 800b1c4:	f7fe f948 	bl	8009458 <_Balloc>
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	b940      	cbnz	r0, 800b1de <__gethex+0x152>
 800b1cc:	4b5c      	ldr	r3, [pc, #368]	@ (800b340 <__gethex+0x2b4>)
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	21e4      	movs	r1, #228	@ 0xe4
 800b1d2:	485c      	ldr	r0, [pc, #368]	@ (800b344 <__gethex+0x2b8>)
 800b1d4:	f7ff fec0 	bl	800af58 <__assert_func>
 800b1d8:	3101      	adds	r1, #1
 800b1da:	105b      	asrs	r3, r3, #1
 800b1dc:	e7ef      	b.n	800b1be <__gethex+0x132>
 800b1de:	f100 0a14 	add.w	sl, r0, #20
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	4655      	mov	r5, sl
 800b1e6:	469b      	mov	fp, r3
 800b1e8:	45b1      	cmp	r9, r6
 800b1ea:	d337      	bcc.n	800b25c <__gethex+0x1d0>
 800b1ec:	f845 bb04 	str.w	fp, [r5], #4
 800b1f0:	eba5 050a 	sub.w	r5, r5, sl
 800b1f4:	10ad      	asrs	r5, r5, #2
 800b1f6:	6125      	str	r5, [r4, #16]
 800b1f8:	4658      	mov	r0, fp
 800b1fa:	f7fe fa1f 	bl	800963c <__hi0bits>
 800b1fe:	016d      	lsls	r5, r5, #5
 800b200:	f8d8 6000 	ldr.w	r6, [r8]
 800b204:	1a2d      	subs	r5, r5, r0
 800b206:	42b5      	cmp	r5, r6
 800b208:	dd54      	ble.n	800b2b4 <__gethex+0x228>
 800b20a:	1bad      	subs	r5, r5, r6
 800b20c:	4629      	mov	r1, r5
 800b20e:	4620      	mov	r0, r4
 800b210:	f7fe fdb3 	bl	8009d7a <__any_on>
 800b214:	4681      	mov	r9, r0
 800b216:	b178      	cbz	r0, 800b238 <__gethex+0x1ac>
 800b218:	1e6b      	subs	r3, r5, #1
 800b21a:	1159      	asrs	r1, r3, #5
 800b21c:	f003 021f 	and.w	r2, r3, #31
 800b220:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b224:	f04f 0901 	mov.w	r9, #1
 800b228:	fa09 f202 	lsl.w	r2, r9, r2
 800b22c:	420a      	tst	r2, r1
 800b22e:	d003      	beq.n	800b238 <__gethex+0x1ac>
 800b230:	454b      	cmp	r3, r9
 800b232:	dc36      	bgt.n	800b2a2 <__gethex+0x216>
 800b234:	f04f 0902 	mov.w	r9, #2
 800b238:	4629      	mov	r1, r5
 800b23a:	4620      	mov	r0, r4
 800b23c:	f7ff febe 	bl	800afbc <rshift>
 800b240:	442f      	add	r7, r5
 800b242:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b246:	42bb      	cmp	r3, r7
 800b248:	da42      	bge.n	800b2d0 <__gethex+0x244>
 800b24a:	9801      	ldr	r0, [sp, #4]
 800b24c:	4621      	mov	r1, r4
 800b24e:	f7fe f943 	bl	80094d8 <_Bfree>
 800b252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b254:	2300      	movs	r3, #0
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	25a3      	movs	r5, #163	@ 0xa3
 800b25a:	e793      	b.n	800b184 <__gethex+0xf8>
 800b25c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b260:	2a2e      	cmp	r2, #46	@ 0x2e
 800b262:	d012      	beq.n	800b28a <__gethex+0x1fe>
 800b264:	2b20      	cmp	r3, #32
 800b266:	d104      	bne.n	800b272 <__gethex+0x1e6>
 800b268:	f845 bb04 	str.w	fp, [r5], #4
 800b26c:	f04f 0b00 	mov.w	fp, #0
 800b270:	465b      	mov	r3, fp
 800b272:	7830      	ldrb	r0, [r6, #0]
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	f7ff fef3 	bl	800b060 <__hexdig_fun>
 800b27a:	9b03      	ldr	r3, [sp, #12]
 800b27c:	f000 000f 	and.w	r0, r0, #15
 800b280:	4098      	lsls	r0, r3
 800b282:	ea4b 0b00 	orr.w	fp, fp, r0
 800b286:	3304      	adds	r3, #4
 800b288:	e7ae      	b.n	800b1e8 <__gethex+0x15c>
 800b28a:	45b1      	cmp	r9, r6
 800b28c:	d8ea      	bhi.n	800b264 <__gethex+0x1d8>
 800b28e:	492b      	ldr	r1, [pc, #172]	@ (800b33c <__gethex+0x2b0>)
 800b290:	9303      	str	r3, [sp, #12]
 800b292:	2201      	movs	r2, #1
 800b294:	4630      	mov	r0, r6
 800b296:	f7ff fe33 	bl	800af00 <strncmp>
 800b29a:	9b03      	ldr	r3, [sp, #12]
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d1e1      	bne.n	800b264 <__gethex+0x1d8>
 800b2a0:	e7a2      	b.n	800b1e8 <__gethex+0x15c>
 800b2a2:	1ea9      	subs	r1, r5, #2
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f7fe fd68 	bl	8009d7a <__any_on>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d0c2      	beq.n	800b234 <__gethex+0x1a8>
 800b2ae:	f04f 0903 	mov.w	r9, #3
 800b2b2:	e7c1      	b.n	800b238 <__gethex+0x1ac>
 800b2b4:	da09      	bge.n	800b2ca <__gethex+0x23e>
 800b2b6:	1b75      	subs	r5, r6, r5
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	9801      	ldr	r0, [sp, #4]
 800b2bc:	462a      	mov	r2, r5
 800b2be:	f7fe fb23 	bl	8009908 <__lshift>
 800b2c2:	1b7f      	subs	r7, r7, r5
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	f100 0a14 	add.w	sl, r0, #20
 800b2ca:	f04f 0900 	mov.w	r9, #0
 800b2ce:	e7b8      	b.n	800b242 <__gethex+0x1b6>
 800b2d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2d4:	42bd      	cmp	r5, r7
 800b2d6:	dd6f      	ble.n	800b3b8 <__gethex+0x32c>
 800b2d8:	1bed      	subs	r5, r5, r7
 800b2da:	42ae      	cmp	r6, r5
 800b2dc:	dc34      	bgt.n	800b348 <__gethex+0x2bc>
 800b2de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d022      	beq.n	800b32c <__gethex+0x2a0>
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d024      	beq.n	800b334 <__gethex+0x2a8>
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d115      	bne.n	800b31a <__gethex+0x28e>
 800b2ee:	42ae      	cmp	r6, r5
 800b2f0:	d113      	bne.n	800b31a <__gethex+0x28e>
 800b2f2:	2e01      	cmp	r6, #1
 800b2f4:	d10b      	bne.n	800b30e <__gethex+0x282>
 800b2f6:	9a02      	ldr	r2, [sp, #8]
 800b2f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2fc:	6013      	str	r3, [r2, #0]
 800b2fe:	2301      	movs	r3, #1
 800b300:	6123      	str	r3, [r4, #16]
 800b302:	f8ca 3000 	str.w	r3, [sl]
 800b306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b308:	2562      	movs	r5, #98	@ 0x62
 800b30a:	601c      	str	r4, [r3, #0]
 800b30c:	e73a      	b.n	800b184 <__gethex+0xf8>
 800b30e:	1e71      	subs	r1, r6, #1
 800b310:	4620      	mov	r0, r4
 800b312:	f7fe fd32 	bl	8009d7a <__any_on>
 800b316:	2800      	cmp	r0, #0
 800b318:	d1ed      	bne.n	800b2f6 <__gethex+0x26a>
 800b31a:	9801      	ldr	r0, [sp, #4]
 800b31c:	4621      	mov	r1, r4
 800b31e:	f7fe f8db 	bl	80094d8 <_Bfree>
 800b322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b324:	2300      	movs	r3, #0
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	2550      	movs	r5, #80	@ 0x50
 800b32a:	e72b      	b.n	800b184 <__gethex+0xf8>
 800b32c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1f3      	bne.n	800b31a <__gethex+0x28e>
 800b332:	e7e0      	b.n	800b2f6 <__gethex+0x26a>
 800b334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1dd      	bne.n	800b2f6 <__gethex+0x26a>
 800b33a:	e7ee      	b.n	800b31a <__gethex+0x28e>
 800b33c:	0800c190 	.word	0x0800c190
 800b340:	0800c02a 	.word	0x0800c02a
 800b344:	0800c33e 	.word	0x0800c33e
 800b348:	1e6f      	subs	r7, r5, #1
 800b34a:	f1b9 0f00 	cmp.w	r9, #0
 800b34e:	d130      	bne.n	800b3b2 <__gethex+0x326>
 800b350:	b127      	cbz	r7, 800b35c <__gethex+0x2d0>
 800b352:	4639      	mov	r1, r7
 800b354:	4620      	mov	r0, r4
 800b356:	f7fe fd10 	bl	8009d7a <__any_on>
 800b35a:	4681      	mov	r9, r0
 800b35c:	117a      	asrs	r2, r7, #5
 800b35e:	2301      	movs	r3, #1
 800b360:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b364:	f007 071f 	and.w	r7, r7, #31
 800b368:	40bb      	lsls	r3, r7
 800b36a:	4213      	tst	r3, r2
 800b36c:	4629      	mov	r1, r5
 800b36e:	4620      	mov	r0, r4
 800b370:	bf18      	it	ne
 800b372:	f049 0902 	orrne.w	r9, r9, #2
 800b376:	f7ff fe21 	bl	800afbc <rshift>
 800b37a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b37e:	1b76      	subs	r6, r6, r5
 800b380:	2502      	movs	r5, #2
 800b382:	f1b9 0f00 	cmp.w	r9, #0
 800b386:	d047      	beq.n	800b418 <__gethex+0x38c>
 800b388:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d015      	beq.n	800b3bc <__gethex+0x330>
 800b390:	2b03      	cmp	r3, #3
 800b392:	d017      	beq.n	800b3c4 <__gethex+0x338>
 800b394:	2b01      	cmp	r3, #1
 800b396:	d109      	bne.n	800b3ac <__gethex+0x320>
 800b398:	f019 0f02 	tst.w	r9, #2
 800b39c:	d006      	beq.n	800b3ac <__gethex+0x320>
 800b39e:	f8da 3000 	ldr.w	r3, [sl]
 800b3a2:	ea49 0903 	orr.w	r9, r9, r3
 800b3a6:	f019 0f01 	tst.w	r9, #1
 800b3aa:	d10e      	bne.n	800b3ca <__gethex+0x33e>
 800b3ac:	f045 0510 	orr.w	r5, r5, #16
 800b3b0:	e032      	b.n	800b418 <__gethex+0x38c>
 800b3b2:	f04f 0901 	mov.w	r9, #1
 800b3b6:	e7d1      	b.n	800b35c <__gethex+0x2d0>
 800b3b8:	2501      	movs	r5, #1
 800b3ba:	e7e2      	b.n	800b382 <__gethex+0x2f6>
 800b3bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3be:	f1c3 0301 	rsb	r3, r3, #1
 800b3c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0f0      	beq.n	800b3ac <__gethex+0x320>
 800b3ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3ce:	f104 0314 	add.w	r3, r4, #20
 800b3d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b3d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b3da:	f04f 0c00 	mov.w	ip, #0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b3e8:	d01b      	beq.n	800b422 <__gethex+0x396>
 800b3ea:	3201      	adds	r2, #1
 800b3ec:	6002      	str	r2, [r0, #0]
 800b3ee:	2d02      	cmp	r5, #2
 800b3f0:	f104 0314 	add.w	r3, r4, #20
 800b3f4:	d13c      	bne.n	800b470 <__gethex+0x3e4>
 800b3f6:	f8d8 2000 	ldr.w	r2, [r8]
 800b3fa:	3a01      	subs	r2, #1
 800b3fc:	42b2      	cmp	r2, r6
 800b3fe:	d109      	bne.n	800b414 <__gethex+0x388>
 800b400:	1171      	asrs	r1, r6, #5
 800b402:	2201      	movs	r2, #1
 800b404:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b408:	f006 061f 	and.w	r6, r6, #31
 800b40c:	fa02 f606 	lsl.w	r6, r2, r6
 800b410:	421e      	tst	r6, r3
 800b412:	d13a      	bne.n	800b48a <__gethex+0x3fe>
 800b414:	f045 0520 	orr.w	r5, r5, #32
 800b418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b41a:	601c      	str	r4, [r3, #0]
 800b41c:	9b02      	ldr	r3, [sp, #8]
 800b41e:	601f      	str	r7, [r3, #0]
 800b420:	e6b0      	b.n	800b184 <__gethex+0xf8>
 800b422:	4299      	cmp	r1, r3
 800b424:	f843 cc04 	str.w	ip, [r3, #-4]
 800b428:	d8d9      	bhi.n	800b3de <__gethex+0x352>
 800b42a:	68a3      	ldr	r3, [r4, #8]
 800b42c:	459b      	cmp	fp, r3
 800b42e:	db17      	blt.n	800b460 <__gethex+0x3d4>
 800b430:	6861      	ldr	r1, [r4, #4]
 800b432:	9801      	ldr	r0, [sp, #4]
 800b434:	3101      	adds	r1, #1
 800b436:	f7fe f80f 	bl	8009458 <_Balloc>
 800b43a:	4681      	mov	r9, r0
 800b43c:	b918      	cbnz	r0, 800b446 <__gethex+0x3ba>
 800b43e:	4b1a      	ldr	r3, [pc, #104]	@ (800b4a8 <__gethex+0x41c>)
 800b440:	4602      	mov	r2, r0
 800b442:	2184      	movs	r1, #132	@ 0x84
 800b444:	e6c5      	b.n	800b1d2 <__gethex+0x146>
 800b446:	6922      	ldr	r2, [r4, #16]
 800b448:	3202      	adds	r2, #2
 800b44a:	f104 010c 	add.w	r1, r4, #12
 800b44e:	0092      	lsls	r2, r2, #2
 800b450:	300c      	adds	r0, #12
 800b452:	f7fd f8a0 	bl	8008596 <memcpy>
 800b456:	4621      	mov	r1, r4
 800b458:	9801      	ldr	r0, [sp, #4]
 800b45a:	f7fe f83d 	bl	80094d8 <_Bfree>
 800b45e:	464c      	mov	r4, r9
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b468:	6122      	str	r2, [r4, #16]
 800b46a:	2201      	movs	r2, #1
 800b46c:	615a      	str	r2, [r3, #20]
 800b46e:	e7be      	b.n	800b3ee <__gethex+0x362>
 800b470:	6922      	ldr	r2, [r4, #16]
 800b472:	455a      	cmp	r2, fp
 800b474:	dd0b      	ble.n	800b48e <__gethex+0x402>
 800b476:	2101      	movs	r1, #1
 800b478:	4620      	mov	r0, r4
 800b47a:	f7ff fd9f 	bl	800afbc <rshift>
 800b47e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b482:	3701      	adds	r7, #1
 800b484:	42bb      	cmp	r3, r7
 800b486:	f6ff aee0 	blt.w	800b24a <__gethex+0x1be>
 800b48a:	2501      	movs	r5, #1
 800b48c:	e7c2      	b.n	800b414 <__gethex+0x388>
 800b48e:	f016 061f 	ands.w	r6, r6, #31
 800b492:	d0fa      	beq.n	800b48a <__gethex+0x3fe>
 800b494:	4453      	add	r3, sl
 800b496:	f1c6 0620 	rsb	r6, r6, #32
 800b49a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b49e:	f7fe f8cd 	bl	800963c <__hi0bits>
 800b4a2:	42b0      	cmp	r0, r6
 800b4a4:	dbe7      	blt.n	800b476 <__gethex+0x3ea>
 800b4a6:	e7f0      	b.n	800b48a <__gethex+0x3fe>
 800b4a8:	0800c02a 	.word	0x0800c02a

0800b4ac <L_shift>:
 800b4ac:	f1c2 0208 	rsb	r2, r2, #8
 800b4b0:	0092      	lsls	r2, r2, #2
 800b4b2:	b570      	push	{r4, r5, r6, lr}
 800b4b4:	f1c2 0620 	rsb	r6, r2, #32
 800b4b8:	6843      	ldr	r3, [r0, #4]
 800b4ba:	6804      	ldr	r4, [r0, #0]
 800b4bc:	fa03 f506 	lsl.w	r5, r3, r6
 800b4c0:	432c      	orrs	r4, r5
 800b4c2:	40d3      	lsrs	r3, r2
 800b4c4:	6004      	str	r4, [r0, #0]
 800b4c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4ca:	4288      	cmp	r0, r1
 800b4cc:	d3f4      	bcc.n	800b4b8 <L_shift+0xc>
 800b4ce:	bd70      	pop	{r4, r5, r6, pc}

0800b4d0 <__match>:
 800b4d0:	b530      	push	{r4, r5, lr}
 800b4d2:	6803      	ldr	r3, [r0, #0]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4da:	b914      	cbnz	r4, 800b4e2 <__match+0x12>
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	2001      	movs	r0, #1
 800b4e0:	bd30      	pop	{r4, r5, pc}
 800b4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b4ea:	2d19      	cmp	r5, #25
 800b4ec:	bf98      	it	ls
 800b4ee:	3220      	addls	r2, #32
 800b4f0:	42a2      	cmp	r2, r4
 800b4f2:	d0f0      	beq.n	800b4d6 <__match+0x6>
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	e7f3      	b.n	800b4e0 <__match+0x10>

0800b4f8 <__hexnan>:
 800b4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	680b      	ldr	r3, [r1, #0]
 800b4fe:	6801      	ldr	r1, [r0, #0]
 800b500:	115e      	asrs	r6, r3, #5
 800b502:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b506:	f013 031f 	ands.w	r3, r3, #31
 800b50a:	b087      	sub	sp, #28
 800b50c:	bf18      	it	ne
 800b50e:	3604      	addne	r6, #4
 800b510:	2500      	movs	r5, #0
 800b512:	1f37      	subs	r7, r6, #4
 800b514:	4682      	mov	sl, r0
 800b516:	4690      	mov	r8, r2
 800b518:	9301      	str	r3, [sp, #4]
 800b51a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b51e:	46b9      	mov	r9, r7
 800b520:	463c      	mov	r4, r7
 800b522:	9502      	str	r5, [sp, #8]
 800b524:	46ab      	mov	fp, r5
 800b526:	784a      	ldrb	r2, [r1, #1]
 800b528:	1c4b      	adds	r3, r1, #1
 800b52a:	9303      	str	r3, [sp, #12]
 800b52c:	b342      	cbz	r2, 800b580 <__hexnan+0x88>
 800b52e:	4610      	mov	r0, r2
 800b530:	9105      	str	r1, [sp, #20]
 800b532:	9204      	str	r2, [sp, #16]
 800b534:	f7ff fd94 	bl	800b060 <__hexdig_fun>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d151      	bne.n	800b5e0 <__hexnan+0xe8>
 800b53c:	9a04      	ldr	r2, [sp, #16]
 800b53e:	9905      	ldr	r1, [sp, #20]
 800b540:	2a20      	cmp	r2, #32
 800b542:	d818      	bhi.n	800b576 <__hexnan+0x7e>
 800b544:	9b02      	ldr	r3, [sp, #8]
 800b546:	459b      	cmp	fp, r3
 800b548:	dd13      	ble.n	800b572 <__hexnan+0x7a>
 800b54a:	454c      	cmp	r4, r9
 800b54c:	d206      	bcs.n	800b55c <__hexnan+0x64>
 800b54e:	2d07      	cmp	r5, #7
 800b550:	dc04      	bgt.n	800b55c <__hexnan+0x64>
 800b552:	462a      	mov	r2, r5
 800b554:	4649      	mov	r1, r9
 800b556:	4620      	mov	r0, r4
 800b558:	f7ff ffa8 	bl	800b4ac <L_shift>
 800b55c:	4544      	cmp	r4, r8
 800b55e:	d952      	bls.n	800b606 <__hexnan+0x10e>
 800b560:	2300      	movs	r3, #0
 800b562:	f1a4 0904 	sub.w	r9, r4, #4
 800b566:	f844 3c04 	str.w	r3, [r4, #-4]
 800b56a:	f8cd b008 	str.w	fp, [sp, #8]
 800b56e:	464c      	mov	r4, r9
 800b570:	461d      	mov	r5, r3
 800b572:	9903      	ldr	r1, [sp, #12]
 800b574:	e7d7      	b.n	800b526 <__hexnan+0x2e>
 800b576:	2a29      	cmp	r2, #41	@ 0x29
 800b578:	d157      	bne.n	800b62a <__hexnan+0x132>
 800b57a:	3102      	adds	r1, #2
 800b57c:	f8ca 1000 	str.w	r1, [sl]
 800b580:	f1bb 0f00 	cmp.w	fp, #0
 800b584:	d051      	beq.n	800b62a <__hexnan+0x132>
 800b586:	454c      	cmp	r4, r9
 800b588:	d206      	bcs.n	800b598 <__hexnan+0xa0>
 800b58a:	2d07      	cmp	r5, #7
 800b58c:	dc04      	bgt.n	800b598 <__hexnan+0xa0>
 800b58e:	462a      	mov	r2, r5
 800b590:	4649      	mov	r1, r9
 800b592:	4620      	mov	r0, r4
 800b594:	f7ff ff8a 	bl	800b4ac <L_shift>
 800b598:	4544      	cmp	r4, r8
 800b59a:	d936      	bls.n	800b60a <__hexnan+0x112>
 800b59c:	f1a8 0204 	sub.w	r2, r8, #4
 800b5a0:	4623      	mov	r3, r4
 800b5a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b5a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b5aa:	429f      	cmp	r7, r3
 800b5ac:	d2f9      	bcs.n	800b5a2 <__hexnan+0xaa>
 800b5ae:	1b3b      	subs	r3, r7, r4
 800b5b0:	f023 0303 	bic.w	r3, r3, #3
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	3401      	adds	r4, #1
 800b5b8:	3e03      	subs	r6, #3
 800b5ba:	42b4      	cmp	r4, r6
 800b5bc:	bf88      	it	hi
 800b5be:	2304      	movhi	r3, #4
 800b5c0:	4443      	add	r3, r8
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f843 2b04 	str.w	r2, [r3], #4
 800b5c8:	429f      	cmp	r7, r3
 800b5ca:	d2fb      	bcs.n	800b5c4 <__hexnan+0xcc>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	b91b      	cbnz	r3, 800b5d8 <__hexnan+0xe0>
 800b5d0:	4547      	cmp	r7, r8
 800b5d2:	d128      	bne.n	800b626 <__hexnan+0x12e>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	603b      	str	r3, [r7, #0]
 800b5d8:	2005      	movs	r0, #5
 800b5da:	b007      	add	sp, #28
 800b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e0:	3501      	adds	r5, #1
 800b5e2:	2d08      	cmp	r5, #8
 800b5e4:	f10b 0b01 	add.w	fp, fp, #1
 800b5e8:	dd06      	ble.n	800b5f8 <__hexnan+0x100>
 800b5ea:	4544      	cmp	r4, r8
 800b5ec:	d9c1      	bls.n	800b572 <__hexnan+0x7a>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5f4:	2501      	movs	r5, #1
 800b5f6:	3c04      	subs	r4, #4
 800b5f8:	6822      	ldr	r2, [r4, #0]
 800b5fa:	f000 000f 	and.w	r0, r0, #15
 800b5fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b602:	6020      	str	r0, [r4, #0]
 800b604:	e7b5      	b.n	800b572 <__hexnan+0x7a>
 800b606:	2508      	movs	r5, #8
 800b608:	e7b3      	b.n	800b572 <__hexnan+0x7a>
 800b60a:	9b01      	ldr	r3, [sp, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d0dd      	beq.n	800b5cc <__hexnan+0xd4>
 800b610:	f1c3 0320 	rsb	r3, r3, #32
 800b614:	f04f 32ff 	mov.w	r2, #4294967295
 800b618:	40da      	lsrs	r2, r3
 800b61a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b61e:	4013      	ands	r3, r2
 800b620:	f846 3c04 	str.w	r3, [r6, #-4]
 800b624:	e7d2      	b.n	800b5cc <__hexnan+0xd4>
 800b626:	3f04      	subs	r7, #4
 800b628:	e7d0      	b.n	800b5cc <__hexnan+0xd4>
 800b62a:	2004      	movs	r0, #4
 800b62c:	e7d5      	b.n	800b5da <__hexnan+0xe2>

0800b62e <__ascii_mbtowc>:
 800b62e:	b082      	sub	sp, #8
 800b630:	b901      	cbnz	r1, 800b634 <__ascii_mbtowc+0x6>
 800b632:	a901      	add	r1, sp, #4
 800b634:	b142      	cbz	r2, 800b648 <__ascii_mbtowc+0x1a>
 800b636:	b14b      	cbz	r3, 800b64c <__ascii_mbtowc+0x1e>
 800b638:	7813      	ldrb	r3, [r2, #0]
 800b63a:	600b      	str	r3, [r1, #0]
 800b63c:	7812      	ldrb	r2, [r2, #0]
 800b63e:	1e10      	subs	r0, r2, #0
 800b640:	bf18      	it	ne
 800b642:	2001      	movne	r0, #1
 800b644:	b002      	add	sp, #8
 800b646:	4770      	bx	lr
 800b648:	4610      	mov	r0, r2
 800b64a:	e7fb      	b.n	800b644 <__ascii_mbtowc+0x16>
 800b64c:	f06f 0001 	mvn.w	r0, #1
 800b650:	e7f8      	b.n	800b644 <__ascii_mbtowc+0x16>

0800b652 <_realloc_r>:
 800b652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b656:	4680      	mov	r8, r0
 800b658:	4615      	mov	r5, r2
 800b65a:	460c      	mov	r4, r1
 800b65c:	b921      	cbnz	r1, 800b668 <_realloc_r+0x16>
 800b65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b662:	4611      	mov	r1, r2
 800b664:	f7fd be6c 	b.w	8009340 <_malloc_r>
 800b668:	b92a      	cbnz	r2, 800b676 <_realloc_r+0x24>
 800b66a:	f7fd fdf5 	bl	8009258 <_free_r>
 800b66e:	2400      	movs	r4, #0
 800b670:	4620      	mov	r0, r4
 800b672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b676:	f000 f840 	bl	800b6fa <_malloc_usable_size_r>
 800b67a:	4285      	cmp	r5, r0
 800b67c:	4606      	mov	r6, r0
 800b67e:	d802      	bhi.n	800b686 <_realloc_r+0x34>
 800b680:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b684:	d8f4      	bhi.n	800b670 <_realloc_r+0x1e>
 800b686:	4629      	mov	r1, r5
 800b688:	4640      	mov	r0, r8
 800b68a:	f7fd fe59 	bl	8009340 <_malloc_r>
 800b68e:	4607      	mov	r7, r0
 800b690:	2800      	cmp	r0, #0
 800b692:	d0ec      	beq.n	800b66e <_realloc_r+0x1c>
 800b694:	42b5      	cmp	r5, r6
 800b696:	462a      	mov	r2, r5
 800b698:	4621      	mov	r1, r4
 800b69a:	bf28      	it	cs
 800b69c:	4632      	movcs	r2, r6
 800b69e:	f7fc ff7a 	bl	8008596 <memcpy>
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	f7fd fdd7 	bl	8009258 <_free_r>
 800b6aa:	463c      	mov	r4, r7
 800b6ac:	e7e0      	b.n	800b670 <_realloc_r+0x1e>

0800b6ae <__ascii_wctomb>:
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	b141      	cbz	r1, 800b6c6 <__ascii_wctomb+0x18>
 800b6b4:	2aff      	cmp	r2, #255	@ 0xff
 800b6b6:	d904      	bls.n	800b6c2 <__ascii_wctomb+0x14>
 800b6b8:	228a      	movs	r2, #138	@ 0x8a
 800b6ba:	601a      	str	r2, [r3, #0]
 800b6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c0:	4770      	bx	lr
 800b6c2:	700a      	strb	r2, [r1, #0]
 800b6c4:	2001      	movs	r0, #1
 800b6c6:	4770      	bx	lr

0800b6c8 <fiprintf>:
 800b6c8:	b40e      	push	{r1, r2, r3}
 800b6ca:	b503      	push	{r0, r1, lr}
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	ab03      	add	r3, sp, #12
 800b6d0:	4805      	ldr	r0, [pc, #20]	@ (800b6e8 <fiprintf+0x20>)
 800b6d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6d6:	6800      	ldr	r0, [r0, #0]
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	f000 f83f 	bl	800b75c <_vfiprintf_r>
 800b6de:	b002      	add	sp, #8
 800b6e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6e4:	b003      	add	sp, #12
 800b6e6:	4770      	bx	lr
 800b6e8:	2000001c 	.word	0x2000001c

0800b6ec <abort>:
 800b6ec:	b508      	push	{r3, lr}
 800b6ee:	2006      	movs	r0, #6
 800b6f0:	f000 fa08 	bl	800bb04 <raise>
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	f7f6 fbe7 	bl	8001ec8 <_exit>

0800b6fa <_malloc_usable_size_r>:
 800b6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6fe:	1f18      	subs	r0, r3, #4
 800b700:	2b00      	cmp	r3, #0
 800b702:	bfbc      	itt	lt
 800b704:	580b      	ldrlt	r3, [r1, r0]
 800b706:	18c0      	addlt	r0, r0, r3
 800b708:	4770      	bx	lr

0800b70a <__sfputc_r>:
 800b70a:	6893      	ldr	r3, [r2, #8]
 800b70c:	3b01      	subs	r3, #1
 800b70e:	2b00      	cmp	r3, #0
 800b710:	b410      	push	{r4}
 800b712:	6093      	str	r3, [r2, #8]
 800b714:	da08      	bge.n	800b728 <__sfputc_r+0x1e>
 800b716:	6994      	ldr	r4, [r2, #24]
 800b718:	42a3      	cmp	r3, r4
 800b71a:	db01      	blt.n	800b720 <__sfputc_r+0x16>
 800b71c:	290a      	cmp	r1, #10
 800b71e:	d103      	bne.n	800b728 <__sfputc_r+0x1e>
 800b720:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b724:	f000 b932 	b.w	800b98c <__swbuf_r>
 800b728:	6813      	ldr	r3, [r2, #0]
 800b72a:	1c58      	adds	r0, r3, #1
 800b72c:	6010      	str	r0, [r2, #0]
 800b72e:	7019      	strb	r1, [r3, #0]
 800b730:	4608      	mov	r0, r1
 800b732:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <__sfputs_r>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	4614      	mov	r4, r2
 800b740:	18d5      	adds	r5, r2, r3
 800b742:	42ac      	cmp	r4, r5
 800b744:	d101      	bne.n	800b74a <__sfputs_r+0x12>
 800b746:	2000      	movs	r0, #0
 800b748:	e007      	b.n	800b75a <__sfputs_r+0x22>
 800b74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74e:	463a      	mov	r2, r7
 800b750:	4630      	mov	r0, r6
 800b752:	f7ff ffda 	bl	800b70a <__sfputc_r>
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	d1f3      	bne.n	800b742 <__sfputs_r+0xa>
 800b75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b75c <_vfiprintf_r>:
 800b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b760:	460d      	mov	r5, r1
 800b762:	b09d      	sub	sp, #116	@ 0x74
 800b764:	4614      	mov	r4, r2
 800b766:	4698      	mov	r8, r3
 800b768:	4606      	mov	r6, r0
 800b76a:	b118      	cbz	r0, 800b774 <_vfiprintf_r+0x18>
 800b76c:	6a03      	ldr	r3, [r0, #32]
 800b76e:	b90b      	cbnz	r3, 800b774 <_vfiprintf_r+0x18>
 800b770:	f7fc fda2 	bl	80082b8 <__sinit>
 800b774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b776:	07d9      	lsls	r1, r3, #31
 800b778:	d405      	bmi.n	800b786 <_vfiprintf_r+0x2a>
 800b77a:	89ab      	ldrh	r3, [r5, #12]
 800b77c:	059a      	lsls	r2, r3, #22
 800b77e:	d402      	bmi.n	800b786 <_vfiprintf_r+0x2a>
 800b780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b782:	f7fc ff06 	bl	8008592 <__retarget_lock_acquire_recursive>
 800b786:	89ab      	ldrh	r3, [r5, #12]
 800b788:	071b      	lsls	r3, r3, #28
 800b78a:	d501      	bpl.n	800b790 <_vfiprintf_r+0x34>
 800b78c:	692b      	ldr	r3, [r5, #16]
 800b78e:	b99b      	cbnz	r3, 800b7b8 <_vfiprintf_r+0x5c>
 800b790:	4629      	mov	r1, r5
 800b792:	4630      	mov	r0, r6
 800b794:	f000 f938 	bl	800ba08 <__swsetup_r>
 800b798:	b170      	cbz	r0, 800b7b8 <_vfiprintf_r+0x5c>
 800b79a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b79c:	07dc      	lsls	r4, r3, #31
 800b79e:	d504      	bpl.n	800b7aa <_vfiprintf_r+0x4e>
 800b7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a4:	b01d      	add	sp, #116	@ 0x74
 800b7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7aa:	89ab      	ldrh	r3, [r5, #12]
 800b7ac:	0598      	lsls	r0, r3, #22
 800b7ae:	d4f7      	bmi.n	800b7a0 <_vfiprintf_r+0x44>
 800b7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7b2:	f7fc feef 	bl	8008594 <__retarget_lock_release_recursive>
 800b7b6:	e7f3      	b.n	800b7a0 <_vfiprintf_r+0x44>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7bc:	2320      	movs	r3, #32
 800b7be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7c6:	2330      	movs	r3, #48	@ 0x30
 800b7c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b978 <_vfiprintf_r+0x21c>
 800b7cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7d0:	f04f 0901 	mov.w	r9, #1
 800b7d4:	4623      	mov	r3, r4
 800b7d6:	469a      	mov	sl, r3
 800b7d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7dc:	b10a      	cbz	r2, 800b7e2 <_vfiprintf_r+0x86>
 800b7de:	2a25      	cmp	r2, #37	@ 0x25
 800b7e0:	d1f9      	bne.n	800b7d6 <_vfiprintf_r+0x7a>
 800b7e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b7e6:	d00b      	beq.n	800b800 <_vfiprintf_r+0xa4>
 800b7e8:	465b      	mov	r3, fp
 800b7ea:	4622      	mov	r2, r4
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f7ff ffa2 	bl	800b738 <__sfputs_r>
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	f000 80a7 	beq.w	800b948 <_vfiprintf_r+0x1ec>
 800b7fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7fc:	445a      	add	r2, fp
 800b7fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800b800:	f89a 3000 	ldrb.w	r3, [sl]
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 809f 	beq.w	800b948 <_vfiprintf_r+0x1ec>
 800b80a:	2300      	movs	r3, #0
 800b80c:	f04f 32ff 	mov.w	r2, #4294967295
 800b810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b814:	f10a 0a01 	add.w	sl, sl, #1
 800b818:	9304      	str	r3, [sp, #16]
 800b81a:	9307      	str	r3, [sp, #28]
 800b81c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b820:	931a      	str	r3, [sp, #104]	@ 0x68
 800b822:	4654      	mov	r4, sl
 800b824:	2205      	movs	r2, #5
 800b826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82a:	4853      	ldr	r0, [pc, #332]	@ (800b978 <_vfiprintf_r+0x21c>)
 800b82c:	f7f4 fcd0 	bl	80001d0 <memchr>
 800b830:	9a04      	ldr	r2, [sp, #16]
 800b832:	b9d8      	cbnz	r0, 800b86c <_vfiprintf_r+0x110>
 800b834:	06d1      	lsls	r1, r2, #27
 800b836:	bf44      	itt	mi
 800b838:	2320      	movmi	r3, #32
 800b83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b83e:	0713      	lsls	r3, r2, #28
 800b840:	bf44      	itt	mi
 800b842:	232b      	movmi	r3, #43	@ 0x2b
 800b844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b848:	f89a 3000 	ldrb.w	r3, [sl]
 800b84c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b84e:	d015      	beq.n	800b87c <_vfiprintf_r+0x120>
 800b850:	9a07      	ldr	r2, [sp, #28]
 800b852:	4654      	mov	r4, sl
 800b854:	2000      	movs	r0, #0
 800b856:	f04f 0c0a 	mov.w	ip, #10
 800b85a:	4621      	mov	r1, r4
 800b85c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b860:	3b30      	subs	r3, #48	@ 0x30
 800b862:	2b09      	cmp	r3, #9
 800b864:	d94b      	bls.n	800b8fe <_vfiprintf_r+0x1a2>
 800b866:	b1b0      	cbz	r0, 800b896 <_vfiprintf_r+0x13a>
 800b868:	9207      	str	r2, [sp, #28]
 800b86a:	e014      	b.n	800b896 <_vfiprintf_r+0x13a>
 800b86c:	eba0 0308 	sub.w	r3, r0, r8
 800b870:	fa09 f303 	lsl.w	r3, r9, r3
 800b874:	4313      	orrs	r3, r2
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	46a2      	mov	sl, r4
 800b87a:	e7d2      	b.n	800b822 <_vfiprintf_r+0xc6>
 800b87c:	9b03      	ldr	r3, [sp, #12]
 800b87e:	1d19      	adds	r1, r3, #4
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	9103      	str	r1, [sp, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	bfbb      	ittet	lt
 800b888:	425b      	neglt	r3, r3
 800b88a:	f042 0202 	orrlt.w	r2, r2, #2
 800b88e:	9307      	strge	r3, [sp, #28]
 800b890:	9307      	strlt	r3, [sp, #28]
 800b892:	bfb8      	it	lt
 800b894:	9204      	strlt	r2, [sp, #16]
 800b896:	7823      	ldrb	r3, [r4, #0]
 800b898:	2b2e      	cmp	r3, #46	@ 0x2e
 800b89a:	d10a      	bne.n	800b8b2 <_vfiprintf_r+0x156>
 800b89c:	7863      	ldrb	r3, [r4, #1]
 800b89e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8a0:	d132      	bne.n	800b908 <_vfiprintf_r+0x1ac>
 800b8a2:	9b03      	ldr	r3, [sp, #12]
 800b8a4:	1d1a      	adds	r2, r3, #4
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	9203      	str	r2, [sp, #12]
 800b8aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8ae:	3402      	adds	r4, #2
 800b8b0:	9305      	str	r3, [sp, #20]
 800b8b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b988 <_vfiprintf_r+0x22c>
 800b8b6:	7821      	ldrb	r1, [r4, #0]
 800b8b8:	2203      	movs	r2, #3
 800b8ba:	4650      	mov	r0, sl
 800b8bc:	f7f4 fc88 	bl	80001d0 <memchr>
 800b8c0:	b138      	cbz	r0, 800b8d2 <_vfiprintf_r+0x176>
 800b8c2:	9b04      	ldr	r3, [sp, #16]
 800b8c4:	eba0 000a 	sub.w	r0, r0, sl
 800b8c8:	2240      	movs	r2, #64	@ 0x40
 800b8ca:	4082      	lsls	r2, r0
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	3401      	adds	r4, #1
 800b8d0:	9304      	str	r3, [sp, #16]
 800b8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d6:	4829      	ldr	r0, [pc, #164]	@ (800b97c <_vfiprintf_r+0x220>)
 800b8d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8dc:	2206      	movs	r2, #6
 800b8de:	f7f4 fc77 	bl	80001d0 <memchr>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d03f      	beq.n	800b966 <_vfiprintf_r+0x20a>
 800b8e6:	4b26      	ldr	r3, [pc, #152]	@ (800b980 <_vfiprintf_r+0x224>)
 800b8e8:	bb1b      	cbnz	r3, 800b932 <_vfiprintf_r+0x1d6>
 800b8ea:	9b03      	ldr	r3, [sp, #12]
 800b8ec:	3307      	adds	r3, #7
 800b8ee:	f023 0307 	bic.w	r3, r3, #7
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	9303      	str	r3, [sp, #12]
 800b8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8f8:	443b      	add	r3, r7
 800b8fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8fc:	e76a      	b.n	800b7d4 <_vfiprintf_r+0x78>
 800b8fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b902:	460c      	mov	r4, r1
 800b904:	2001      	movs	r0, #1
 800b906:	e7a8      	b.n	800b85a <_vfiprintf_r+0xfe>
 800b908:	2300      	movs	r3, #0
 800b90a:	3401      	adds	r4, #1
 800b90c:	9305      	str	r3, [sp, #20]
 800b90e:	4619      	mov	r1, r3
 800b910:	f04f 0c0a 	mov.w	ip, #10
 800b914:	4620      	mov	r0, r4
 800b916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b91a:	3a30      	subs	r2, #48	@ 0x30
 800b91c:	2a09      	cmp	r2, #9
 800b91e:	d903      	bls.n	800b928 <_vfiprintf_r+0x1cc>
 800b920:	2b00      	cmp	r3, #0
 800b922:	d0c6      	beq.n	800b8b2 <_vfiprintf_r+0x156>
 800b924:	9105      	str	r1, [sp, #20]
 800b926:	e7c4      	b.n	800b8b2 <_vfiprintf_r+0x156>
 800b928:	fb0c 2101 	mla	r1, ip, r1, r2
 800b92c:	4604      	mov	r4, r0
 800b92e:	2301      	movs	r3, #1
 800b930:	e7f0      	b.n	800b914 <_vfiprintf_r+0x1b8>
 800b932:	ab03      	add	r3, sp, #12
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	462a      	mov	r2, r5
 800b938:	4b12      	ldr	r3, [pc, #72]	@ (800b984 <_vfiprintf_r+0x228>)
 800b93a:	a904      	add	r1, sp, #16
 800b93c:	4630      	mov	r0, r6
 800b93e:	f7fb fe63 	bl	8007608 <_printf_float>
 800b942:	4607      	mov	r7, r0
 800b944:	1c78      	adds	r0, r7, #1
 800b946:	d1d6      	bne.n	800b8f6 <_vfiprintf_r+0x19a>
 800b948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b94a:	07d9      	lsls	r1, r3, #31
 800b94c:	d405      	bmi.n	800b95a <_vfiprintf_r+0x1fe>
 800b94e:	89ab      	ldrh	r3, [r5, #12]
 800b950:	059a      	lsls	r2, r3, #22
 800b952:	d402      	bmi.n	800b95a <_vfiprintf_r+0x1fe>
 800b954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b956:	f7fc fe1d 	bl	8008594 <__retarget_lock_release_recursive>
 800b95a:	89ab      	ldrh	r3, [r5, #12]
 800b95c:	065b      	lsls	r3, r3, #25
 800b95e:	f53f af1f 	bmi.w	800b7a0 <_vfiprintf_r+0x44>
 800b962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b964:	e71e      	b.n	800b7a4 <_vfiprintf_r+0x48>
 800b966:	ab03      	add	r3, sp, #12
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	462a      	mov	r2, r5
 800b96c:	4b05      	ldr	r3, [pc, #20]	@ (800b984 <_vfiprintf_r+0x228>)
 800b96e:	a904      	add	r1, sp, #16
 800b970:	4630      	mov	r0, r6
 800b972:	f7fc f8e1 	bl	8007b38 <_printf_i>
 800b976:	e7e4      	b.n	800b942 <_vfiprintf_r+0x1e6>
 800b978:	0800c2e9 	.word	0x0800c2e9
 800b97c:	0800c2f3 	.word	0x0800c2f3
 800b980:	08007609 	.word	0x08007609
 800b984:	0800b739 	.word	0x0800b739
 800b988:	0800c2ef 	.word	0x0800c2ef

0800b98c <__swbuf_r>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	460e      	mov	r6, r1
 800b990:	4614      	mov	r4, r2
 800b992:	4605      	mov	r5, r0
 800b994:	b118      	cbz	r0, 800b99e <__swbuf_r+0x12>
 800b996:	6a03      	ldr	r3, [r0, #32]
 800b998:	b90b      	cbnz	r3, 800b99e <__swbuf_r+0x12>
 800b99a:	f7fc fc8d 	bl	80082b8 <__sinit>
 800b99e:	69a3      	ldr	r3, [r4, #24]
 800b9a0:	60a3      	str	r3, [r4, #8]
 800b9a2:	89a3      	ldrh	r3, [r4, #12]
 800b9a4:	071a      	lsls	r2, r3, #28
 800b9a6:	d501      	bpl.n	800b9ac <__swbuf_r+0x20>
 800b9a8:	6923      	ldr	r3, [r4, #16]
 800b9aa:	b943      	cbnz	r3, 800b9be <__swbuf_r+0x32>
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 f82a 	bl	800ba08 <__swsetup_r>
 800b9b4:	b118      	cbz	r0, 800b9be <__swbuf_r+0x32>
 800b9b6:	f04f 37ff 	mov.w	r7, #4294967295
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	6922      	ldr	r2, [r4, #16]
 800b9c2:	1a98      	subs	r0, r3, r2
 800b9c4:	6963      	ldr	r3, [r4, #20]
 800b9c6:	b2f6      	uxtb	r6, r6
 800b9c8:	4283      	cmp	r3, r0
 800b9ca:	4637      	mov	r7, r6
 800b9cc:	dc05      	bgt.n	800b9da <__swbuf_r+0x4e>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f7ff fa53 	bl	800ae7c <_fflush_r>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d1ed      	bne.n	800b9b6 <__swbuf_r+0x2a>
 800b9da:	68a3      	ldr	r3, [r4, #8]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	60a3      	str	r3, [r4, #8]
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	6022      	str	r2, [r4, #0]
 800b9e6:	701e      	strb	r6, [r3, #0]
 800b9e8:	6962      	ldr	r2, [r4, #20]
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d004      	beq.n	800b9fa <__swbuf_r+0x6e>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	07db      	lsls	r3, r3, #31
 800b9f4:	d5e1      	bpl.n	800b9ba <__swbuf_r+0x2e>
 800b9f6:	2e0a      	cmp	r6, #10
 800b9f8:	d1df      	bne.n	800b9ba <__swbuf_r+0x2e>
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f7ff fa3d 	bl	800ae7c <_fflush_r>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d0d9      	beq.n	800b9ba <__swbuf_r+0x2e>
 800ba06:	e7d6      	b.n	800b9b6 <__swbuf_r+0x2a>

0800ba08 <__swsetup_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4b29      	ldr	r3, [pc, #164]	@ (800bab0 <__swsetup_r+0xa8>)
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	6818      	ldr	r0, [r3, #0]
 800ba10:	460c      	mov	r4, r1
 800ba12:	b118      	cbz	r0, 800ba1c <__swsetup_r+0x14>
 800ba14:	6a03      	ldr	r3, [r0, #32]
 800ba16:	b90b      	cbnz	r3, 800ba1c <__swsetup_r+0x14>
 800ba18:	f7fc fc4e 	bl	80082b8 <__sinit>
 800ba1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba20:	0719      	lsls	r1, r3, #28
 800ba22:	d422      	bmi.n	800ba6a <__swsetup_r+0x62>
 800ba24:	06da      	lsls	r2, r3, #27
 800ba26:	d407      	bmi.n	800ba38 <__swsetup_r+0x30>
 800ba28:	2209      	movs	r2, #9
 800ba2a:	602a      	str	r2, [r5, #0]
 800ba2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba30:	81a3      	strh	r3, [r4, #12]
 800ba32:	f04f 30ff 	mov.w	r0, #4294967295
 800ba36:	e033      	b.n	800baa0 <__swsetup_r+0x98>
 800ba38:	0758      	lsls	r0, r3, #29
 800ba3a:	d512      	bpl.n	800ba62 <__swsetup_r+0x5a>
 800ba3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba3e:	b141      	cbz	r1, 800ba52 <__swsetup_r+0x4a>
 800ba40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba44:	4299      	cmp	r1, r3
 800ba46:	d002      	beq.n	800ba4e <__swsetup_r+0x46>
 800ba48:	4628      	mov	r0, r5
 800ba4a:	f7fd fc05 	bl	8009258 <_free_r>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba58:	81a3      	strh	r3, [r4, #12]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	6063      	str	r3, [r4, #4]
 800ba5e:	6923      	ldr	r3, [r4, #16]
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	89a3      	ldrh	r3, [r4, #12]
 800ba64:	f043 0308 	orr.w	r3, r3, #8
 800ba68:	81a3      	strh	r3, [r4, #12]
 800ba6a:	6923      	ldr	r3, [r4, #16]
 800ba6c:	b94b      	cbnz	r3, 800ba82 <__swsetup_r+0x7a>
 800ba6e:	89a3      	ldrh	r3, [r4, #12]
 800ba70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba78:	d003      	beq.n	800ba82 <__swsetup_r+0x7a>
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	f000 f883 	bl	800bb88 <__smakebuf_r>
 800ba82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba86:	f013 0201 	ands.w	r2, r3, #1
 800ba8a:	d00a      	beq.n	800baa2 <__swsetup_r+0x9a>
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	60a2      	str	r2, [r4, #8]
 800ba90:	6962      	ldr	r2, [r4, #20]
 800ba92:	4252      	negs	r2, r2
 800ba94:	61a2      	str	r2, [r4, #24]
 800ba96:	6922      	ldr	r2, [r4, #16]
 800ba98:	b942      	cbnz	r2, 800baac <__swsetup_r+0xa4>
 800ba9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba9e:	d1c5      	bne.n	800ba2c <__swsetup_r+0x24>
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	0799      	lsls	r1, r3, #30
 800baa4:	bf58      	it	pl
 800baa6:	6962      	ldrpl	r2, [r4, #20]
 800baa8:	60a2      	str	r2, [r4, #8]
 800baaa:	e7f4      	b.n	800ba96 <__swsetup_r+0x8e>
 800baac:	2000      	movs	r0, #0
 800baae:	e7f7      	b.n	800baa0 <__swsetup_r+0x98>
 800bab0:	2000001c 	.word	0x2000001c

0800bab4 <_raise_r>:
 800bab4:	291f      	cmp	r1, #31
 800bab6:	b538      	push	{r3, r4, r5, lr}
 800bab8:	4605      	mov	r5, r0
 800baba:	460c      	mov	r4, r1
 800babc:	d904      	bls.n	800bac8 <_raise_r+0x14>
 800babe:	2316      	movs	r3, #22
 800bac0:	6003      	str	r3, [r0, #0]
 800bac2:	f04f 30ff 	mov.w	r0, #4294967295
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800baca:	b112      	cbz	r2, 800bad2 <_raise_r+0x1e>
 800bacc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bad0:	b94b      	cbnz	r3, 800bae6 <_raise_r+0x32>
 800bad2:	4628      	mov	r0, r5
 800bad4:	f000 f830 	bl	800bb38 <_getpid_r>
 800bad8:	4622      	mov	r2, r4
 800bada:	4601      	mov	r1, r0
 800badc:	4628      	mov	r0, r5
 800bade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bae2:	f000 b817 	b.w	800bb14 <_kill_r>
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d00a      	beq.n	800bb00 <_raise_r+0x4c>
 800baea:	1c59      	adds	r1, r3, #1
 800baec:	d103      	bne.n	800baf6 <_raise_r+0x42>
 800baee:	2316      	movs	r3, #22
 800baf0:	6003      	str	r3, [r0, #0]
 800baf2:	2001      	movs	r0, #1
 800baf4:	e7e7      	b.n	800bac6 <_raise_r+0x12>
 800baf6:	2100      	movs	r1, #0
 800baf8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bafc:	4620      	mov	r0, r4
 800bafe:	4798      	blx	r3
 800bb00:	2000      	movs	r0, #0
 800bb02:	e7e0      	b.n	800bac6 <_raise_r+0x12>

0800bb04 <raise>:
 800bb04:	4b02      	ldr	r3, [pc, #8]	@ (800bb10 <raise+0xc>)
 800bb06:	4601      	mov	r1, r0
 800bb08:	6818      	ldr	r0, [r3, #0]
 800bb0a:	f7ff bfd3 	b.w	800bab4 <_raise_r>
 800bb0e:	bf00      	nop
 800bb10:	2000001c 	.word	0x2000001c

0800bb14 <_kill_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d07      	ldr	r5, [pc, #28]	@ (800bb34 <_kill_r+0x20>)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	4611      	mov	r1, r2
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	f7f6 f9c9 	bl	8001eb8 <_kill>
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	d102      	bne.n	800bb30 <_kill_r+0x1c>
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	b103      	cbz	r3, 800bb30 <_kill_r+0x1c>
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	bd38      	pop	{r3, r4, r5, pc}
 800bb32:	bf00      	nop
 800bb34:	20005d88 	.word	0x20005d88

0800bb38 <_getpid_r>:
 800bb38:	f7f6 b9bc 	b.w	8001eb4 <_getpid>

0800bb3c <__swhatbuf_r>:
 800bb3c:	b570      	push	{r4, r5, r6, lr}
 800bb3e:	460c      	mov	r4, r1
 800bb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb44:	2900      	cmp	r1, #0
 800bb46:	b096      	sub	sp, #88	@ 0x58
 800bb48:	4615      	mov	r5, r2
 800bb4a:	461e      	mov	r6, r3
 800bb4c:	da0d      	bge.n	800bb6a <__swhatbuf_r+0x2e>
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb54:	f04f 0100 	mov.w	r1, #0
 800bb58:	bf14      	ite	ne
 800bb5a:	2340      	movne	r3, #64	@ 0x40
 800bb5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb60:	2000      	movs	r0, #0
 800bb62:	6031      	str	r1, [r6, #0]
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	b016      	add	sp, #88	@ 0x58
 800bb68:	bd70      	pop	{r4, r5, r6, pc}
 800bb6a:	466a      	mov	r2, sp
 800bb6c:	f000 f848 	bl	800bc00 <_fstat_r>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	dbec      	blt.n	800bb4e <__swhatbuf_r+0x12>
 800bb74:	9901      	ldr	r1, [sp, #4]
 800bb76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb7e:	4259      	negs	r1, r3
 800bb80:	4159      	adcs	r1, r3
 800bb82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb86:	e7eb      	b.n	800bb60 <__swhatbuf_r+0x24>

0800bb88 <__smakebuf_r>:
 800bb88:	898b      	ldrh	r3, [r1, #12]
 800bb8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb8c:	079d      	lsls	r5, r3, #30
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460c      	mov	r4, r1
 800bb92:	d507      	bpl.n	800bba4 <__smakebuf_r+0x1c>
 800bb94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	6163      	str	r3, [r4, #20]
 800bba0:	b003      	add	sp, #12
 800bba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bba4:	ab01      	add	r3, sp, #4
 800bba6:	466a      	mov	r2, sp
 800bba8:	f7ff ffc8 	bl	800bb3c <__swhatbuf_r>
 800bbac:	9f00      	ldr	r7, [sp, #0]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f7fd fbc4 	bl	8009340 <_malloc_r>
 800bbb8:	b948      	cbnz	r0, 800bbce <__smakebuf_r+0x46>
 800bbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbbe:	059a      	lsls	r2, r3, #22
 800bbc0:	d4ee      	bmi.n	800bba0 <__smakebuf_r+0x18>
 800bbc2:	f023 0303 	bic.w	r3, r3, #3
 800bbc6:	f043 0302 	orr.w	r3, r3, #2
 800bbca:	81a3      	strh	r3, [r4, #12]
 800bbcc:	e7e2      	b.n	800bb94 <__smakebuf_r+0xc>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	6020      	str	r0, [r4, #0]
 800bbd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbd6:	81a3      	strh	r3, [r4, #12]
 800bbd8:	9b01      	ldr	r3, [sp, #4]
 800bbda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bbde:	b15b      	cbz	r3, 800bbf8 <__smakebuf_r+0x70>
 800bbe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f000 f81d 	bl	800bc24 <_isatty_r>
 800bbea:	b128      	cbz	r0, 800bbf8 <__smakebuf_r+0x70>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f023 0303 	bic.w	r3, r3, #3
 800bbf2:	f043 0301 	orr.w	r3, r3, #1
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	431d      	orrs	r5, r3
 800bbfc:	81a5      	strh	r5, [r4, #12]
 800bbfe:	e7cf      	b.n	800bba0 <__smakebuf_r+0x18>

0800bc00 <_fstat_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d07      	ldr	r5, [pc, #28]	@ (800bc20 <_fstat_r+0x20>)
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	602b      	str	r3, [r5, #0]
 800bc0e:	f7f6 f981 	bl	8001f14 <_fstat>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	d102      	bne.n	800bc1c <_fstat_r+0x1c>
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	b103      	cbz	r3, 800bc1c <_fstat_r+0x1c>
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	bf00      	nop
 800bc20:	20005d88 	.word	0x20005d88

0800bc24 <_isatty_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d06      	ldr	r5, [pc, #24]	@ (800bc40 <_isatty_r+0x1c>)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	602b      	str	r3, [r5, #0]
 800bc30:	f7f6 f976 	bl	8001f20 <_isatty>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_isatty_r+0x1a>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_isatty_r+0x1a>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20005d88 	.word	0x20005d88

0800bc44 <_init>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	bf00      	nop
 800bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4a:	bc08      	pop	{r3}
 800bc4c:	469e      	mov	lr, r3
 800bc4e:	4770      	bx	lr

0800bc50 <_fini>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	bf00      	nop
 800bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc56:	bc08      	pop	{r3}
 800bc58:	469e      	mov	lr, r3
 800bc5a:	4770      	bx	lr
